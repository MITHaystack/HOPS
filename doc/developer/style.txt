General guidance on style.  A more complete discussion is given in
the development plan.  This is a starter....

Copyright: all files should include a current-date MIT copyright and
    a reference to the top-level Copyright file, e.g. in C++ source.

    // (c) Massachusetts Institute of Technology, ????-2022
    // The contents of the package Copyright statement apply here.
    // (authorship)

    If other copyrights apply or copyright does not belong to MIT
    (for files brought in from elsewhere) suitable adjustments should
    be made.  This plus a description should appear at the top of the file.

    The third line above should be a line or two on original authorship and
    overhaul authorship as sensible.  Obviously # instead of // for Python.

Libraries
  Should be buildable either statically or dynamically linked.  The default,
  however, should be to only build one, ideally the dynamically linked one.

Applications
  Should all operate canonically to --help and --version.
  Should generally require at least one argument.  Some applications consider
    "no arguments" to be treated as a plea for help.  Other applications go
    off and do something.  If an application has no side effects other than
    providing information to the terminal, as does e.g. ls, no arguments need
    be required.
  Should exit 0 if there are no errors (or --help or --version used); otherwise
    some non-zero exit return value should be used
  Should use standard get-opt style processing.  See examples....

Modularity
  Directory level:
    Source material should be sensibly decomposed into modular self-contained
    units according to best practices by language.  A directory may build
    multiple items of related functionality
  File level:
    Within a file, functional (functions/methods) should ideally be "visible"
    within a window of at most 80 columns and 45 lines.  This should be
    violated if there are performance or other sensible reasons for doing
    so.  The point of this is to allow a develop to "see" what is going on.
    (Material that is off the screen is usually out of mind, and errors may
    easily result from inconsistencies that may result.)
    Some files (e.g. C++ templates) require a different shape, e.g., up to
    as 110 columns, but perhaps fewer lines.
  Variables:
    Should be given short, non-cryptic names when possible, and almost never
    single letter.  Camel case or snake case are both acceptable.
  Logic:
    Use braces, but don't waste vertical space by doing so.  The opening
    brace should be on the same line as the start of the statement/definition.
    (FIXME: need to work through some doxygen and sphinx samples.)
  End of File:
    Files are on rare occasion truncated.  Some end of file marker should be
    included (if the language allows it).  It may be followed by special vim
    edit commands if the file requires it.  Then it is obvious that you have
    seen the end of the file.

Working issues
  Put a FIXME in any file if you see something that needs to be understood and
    possibly fixed for things where the plan forward is uncertain.
  Once we have a working plan forward for the file in question, create an issue
    in the github.

Documentation
  C/C++ Code
    Should be documented for processing by doxygen
  Python
    Should be documented for processing by sphinx
  Bash / Perl
    FIXME: dunno yet.

eof
