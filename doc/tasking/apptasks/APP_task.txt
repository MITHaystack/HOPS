#
# an attempt to organize the software work
# Seeded with EHTSoftwareTasks_jsk.xlsx (Dec15,2011),
# saved as csv (Feb16,2012)and then:
# cut -d, -f2 EHTSoftwareTasks_jsk.csv | grep -n . | sed 's/^/#line-/'
#
# edit sw_task_config.pl for format, &c, or use -c option
# ./sw_tasks.pl -i tsk.txt -o fruit/j21 -d ps -g ALL
# ./sw_tasks.pl -i tsk.txt -o fruit/j21 -r sum -d ps -g CARD
# ./sw_tasks.pl -i tsk.txt -o fruit/j21 -r all
# ./sw_tasks.pl -i tsk.txt -o fruit/j26 -d ps -g all
#

HEAD = start reading here

# data file for organizing the software work from all perspectives
# file is organized to be trivially parsed to allow generation of
# other things as needed
#
# All information is keyword = value pairs, where the keywords are:
#
# @*     = defines an abbreviation to save typing
#          we'll assume these can be substituted later
# # or blank for comments
#
##items
# domain = collection of related things:
# thing  = some piece of a domain, which is a collection of tasks:
# task   = something to be done to complete the thing
# desc   = a more complete description of the domain/thing/task
# nick   = short name for the domain/thing/task
##derived: (type,parent,line)
#
##tasks require the following
# path   = where thing is to be found in the CVS repository
# code   = C++,Java,Python,Other,none
##notes  = where more about the thing is to be found
##level  = easy/moderate/difficult
##issues = open issues relevant to planning
##orient = portrait/landscape
# who    = ,-sep list of workers (worker[:effort])
##derived: (pri,sec,men)
#
##timeline information
# needs  = list of predecessor tasks
# start  = start date
# days   = real man-days of FTE effort by pri/sec/men
# derate = multiplier on days to get calendar days
# done   = percent complete (0-100)
# stop   = completion date (== 'start' for milestones)
# allows = list of successor tasks
##derived: (uid,begin,mjds,flex,end,preps,leads)
#
# values append until next keyword or blank/comment(#)
# desc and nick are implicitly set from domain/thing/task
#
# tdefs  = common
#   and following lines creates a set of task values accessed as @common
#   The parser expands these in its output, so this is really a temporary
#   startup feature.  It avoids alot of specificity when you don't yet
#   know it.  The set of values ends with a blank line or comment.
#
# collecting TLAs here
# ICD = formal ICD
# icd = internal icd
# idl = interface definition language
# IRD = Interface Requirements Document
# PDR = Preliminary Design Review
# CDR = Critical Design Review
# AIV = Assembly Integration and Verification
# 
# other random notes
# 
# commissioning observations cannot be published
# science verification observaions can be published
#
# CORBA framework makes interface simulation trivial,
# so simulation testing refers to adding nontrivial simulation code
# and appropriate levels of testing
#
# Times can be managed as MJD:
#$ HOPS_JULIAN_EPOCH=UTC hops_time -q I 56763.0 |cut -dT -f1
#$ HOPS_JULIAN_EPOCH=UTC hops_time -q M 2014-04-16 |cut -d. -f1|sed 's/$/.0/'

# common abbreviations
@vlbi   = Very Long Base Interferometry
@ssint  = Subsystem integration & testing
@sitsim = System integration & testing in simulation
@sitwhw = System integration & testing with hardware
@mctest = Monitoring configuration and testing
@actest = Alarm configuration and testing
@sec    = Section
@swreq  = the Software Requirements document
@RlCmemo = Rich Lacasse's memo
@SFIM   = Single Field Interferometry Mode
@fiber  = optical fiber link system

# start of the Project
@tSTART  = 2011-08-15
# our first face-to-face meeting (a Concept Review at Haystack)
@tF2F1   = 2011-12-13
# a Preliminary Design Review, location and date TBD,
# with presentations from all components of the WBS
@tPDR    = 2012-10-15
# a Critical/Comprehensive Design Review, location and date TBD,
# with presentations from all components of the WBS
@tCDR    = 2013-01-14
# a Manufacturing Readiness Review, focussed on the PIC
# and possibly the fiber optic and Mark6 systems
@tMRR    = 2013-04-15
# an incremental SoftWare CDR and a Test Readiness Review
@tSWCDR  = 2013-10-15
@tTRR    = 2013-10-15
# Provisional Acceptance In-house prior to shipment of the PIC, &c.
@tPAI    = 2013-11-15
# Provisional Acceptance on Site after deliver of the PIC, &c.
@tPAS    = 2014-02-15
# Dates when hardware is at the high and low sites
@tAOSHW  = 2014-04-24
@tOSFHW  = 2014-04-24
# Some TBD local VLBI test, e.g. with 2 ALMA antennas
@tLVLBI  = 2014-06-15
# the start of the commissioning campaign, probably with a 3mm observation
@tOBS1   = 2014-08-18
# probably a 1mm observation
@tOBS2   = 2015-02-23
# somewhere in this time frame, project code submitted to ALMA
# is frozen for subsequent release (on whatever the ALMA cycle is).
@tSWREL  = 2015-04-15
# probably a 1mm observation
@tOBS3   = 2015-06-15
# the end of the commissioning campaign and the project
@tDONE   = 2015-08-15

# tasking is currently immature, but these are some of the likely players

# pools of developers
@gbc    = GBC (Geoff Crew)
@rjc    = RJC (Roger Cappallo)
@sdd    = SDD (Shep Doeleman)
@vf     = VF (Vincent Fish)
@lm     = LM (Lynn Matthews)
#@Hay    = @gbc,@rjc,@vf,@sdd
@Hay    = Haystack

@rlc    = RlC (Rich Lacasse)
@jg     = JG (Joe Greenberg)
#@Cville = @rlc,@jg
@Cville = NRAO(Correlator)

@np     = NP (Nicolas Pradel)
@cyk    = CYK (Cheng-Yu Kuo)
@mi     = MI (Makoto Inoue)
#@ASIAA  = @np,@cyk
@ASIAA  = ASIAA

@rh     = RH (Rafael Hiriart)
@bg     = BG (Brian Glendenning)
@rm     = RM (Ralph Marson)
@at     = AT (Arturo Hoffstadt)
@jp     = JP (J Perez)
@ra     = RA (Rodrigo Amestica)
@ja     = JA (Jorge Avarias)
#@NRAO   = @rh,@rm,@at,@jp,@ra
@Sville = NRAO(Computing)

# Swedes in Onsala ?
# Holland/JIVE Huiv van Langeveld ?
@hr     = HR (Helge Rottmann)
@wa     = WA (Walter Alef)
@ar     = AR (Alain Roy)
@hf     = HF (Heino Falke)
#@MPFIR  = @hf,@hr,@wa,@ar
@MPIfR  = MPIfR

@rl     = RL (Robert Lucas)
#@ESO    = @rl
@ESO    = ESO

@mh     = MH (Mareki Honma)
@yk     = YK (Yusuke Kono)
@to     = TO (Tomoaki Oyama)
@NAOJ   = NAOJ

@UCon   = U.Concepcion
@nn     = NN (Neil Nagar)
@Onsala = Onsala

# other players
@ad     = AD (Adam Deller)
@wsb    = WSB (Walter Brisken)
@DIFX   = @ad,@wsb

# some large placeholders:
@all    = entire team
@allhw  = entire team:hardware-oriented
@allsw  = entire team:software-oriented
@allto  = entire team:testing-oriented
@alloo  = entire team:observation-oriented


#
# Major domains of activity
#
domain  = General Developer Time
desc    = covers activities not usefully attributable to any specific
            task such as training, architecting, general documenting,
            reviews, and other forms of overhead &c.
nick    = GENERAL

domain  = Hardware
desc    = provides a home for the (external to the software plan)
            hardware schedule constraints
nick    = HW

domain  = Phasing Interface Card
desc    = the Phasing Interface Card under development at NRAO
nick    = CARD

domain  = Pre VLBI Observation Preparation
desc    = provides all the software required for activities that
            precede the scheduled observation from PI preparation
            (e.g. with SCHED), the formal scheduling of the VLBI
            Observing Blocktime through VEX translation into a
            (python) run script
nick    = PREP

domain  = VLBI Observing Mode
desc    = configures ALMA for VLBI, runs the observation, and
            cleans-up after the observing night.  Logically it
            runs for one observing night, but in practice a VLBI
            observing run will consist of several such nights, so
            it may need to pass context from one night to the next.
            This is likely to be a set of enhancement of Single Field
            Interferometry Mode, rather than an additional mode, per se.
nick    = VOM

domain  = VLBI Phasing System Slow
desc    = adjusts the phases of the antennas in an observing array
            to allow coherent summing of the visibilities.  This
            system should operate whether or not VLBI data is actually
            being collected.  It is partitioned into a slow part
            (operating on a timescale of several seconds) and a fast
            part (which is integral with the correlator).  This is
            the slow part which resides in the TelCal computer system.
nick    = PHSLOW

domain  = VLBI Phasing System Fast
desc    = adjusts the phases of the antennas in an observing array
            to allow coherent summing of the visibilities.  This
            system should operate whether or not VLBI data is actually
            being collected.  It is partitioned into a slow part
            (operating on a timescale of several seconds) and a fast
            part (which is integral with the correlator).  This is
            the fast part which resides in the correlator computers.
nick    = PHFAST

domain  = VLBI Data Acquisition System
desc    = collects the phase summed signals from the PIC cards in the
            correlator and stores them on media for remote correlation
            and analysis.  This covers the commanding of the pic cards,
            the network to the recorders (as needed) and the recording
            devices themselves (primarily) during observing runs
nick    = DAS

domain  = Hydrogen Maser
desc    = provides a stable time reference for both the local oscillators
            as well as the data sampling in the VLBI back end.  This
            includes not only the maser but any monitoring devices
nick    = HMASER

domain  = Graphical User Interface
desc    = provides the ALMA operators with graphical feedback on the
            VLBI phasing system status and control as needed and allows
            a small number of operational or diagnostic commands as
            may be required
nick    = GUI

domain  = Post VLBI Observation Data Analysis
desc    = refers to any ALMA-specific tasks required
            to analyze the VLBI observations
nick    = POST

#
# selected external milestones
#
domain  = @GENERAL
orient  = landscape

tdefs   = milestask
path    = none
code    = none
days    = 1
who     = @all

thing   = Development Milestones
desc    = a place to capture external milestones for the early phase
    At the moment @SWCDR and @TRR are at the same place in the schedule.
nick    = DevMilestones
orient  = landscape

task    = Start of Project
@milestask
desc    = when we got approval from NSF to begin the project
nick    = START
start   = @tSTART
done    = 100
stop    = @tSTART
allows  = F2F1

task    = 1st face-to-face mtg at Haystack
@milestask
desc    = when we met to kick off the project, aka Concept Review
nick    = F2F1
needs   = START
start   = @tF2F1
done    = 100
stop    = @tF2F1
allows  = PDR

task    = Preliminary Design Review
@milestask
desc    = a review that covers all aspects of the project at appropriate levels
nick    = PDR
needs   = F2F1
start   = @tPDR
stop    = @tPDR
allows  = CDR

task    = Comprehensive Design Review
@milestask
desc    = a review that should follow the ALMA board approval, cover every
    aspect of the project and should not leave significant open issues.
nick    = CDR
needs   = PDR
start   = @tCDR
stop    = @tCDR
allows  = MRR

task    = Manufacturing Readiness Review
@milestask
desc    = which shows that you have advanced
    far enough in your project to have it manufactured.  I would think
    that this is more of a concern when ALMA money is being spent to
    manufacture the product.  We may be exempted from this formal process.
    In any case, we certainly want to review the PIC Card status before
    we manufacture 8 of them.
nick    = MRR
needs   = CDR
start   = @tMRR
stop    = @tMRR
allows  = SWCDR
who     = @allhw

task    = Incremental S/W Comprehensive Design Review
@milestask
desc    = a review mid-way through the software effort, which allows
    an opportunity to make design adjustments if needed.
nick    = SWCDR
needs   = CDR
start   = @tSWCDR
stop    = @tSWCDR
allows  = TRR
who     = @allsw

thing   = Integration Milestones
desc    = a place to capture external milestones for the later phase
    At the moment @SWCDR and @TRR are at the same place in the schedule.
nick    = IntMilestones
orient  = portrait

task    = Test Readiness Review
@milestask
desc    = The purpose of this review is to
       demonstrate that your product is ready to be tested "in house"  It is
       an opportunity for the project to scrutinize the test plan and the
       state of the equipment.  It is usually handled by teleconference and
       email.
nick    = TRR
#needs   = CDR
start   = @tTRR
stop    = @tTRR
#allows  = PAI
who     = @allto

task    = Provisional Acceptance In-house
@milestask
desc    = The purpose of this review is to
       scrutinize the results of in-house testing of deliverable equipment.
       A report is generally distributed a few weeks ahead of the meeting to
       give the reviewers a chance to review it.  It is usually done by
       teleconference.  The tests associated with this should demonstrate
       that the deliverable meets all requirements, specifications and ICDs.
       If this is not possible (for example if it needs to be connected to
       something else at the site that cannot be simulated, the required
       software is not ready, or needs to be verified at altitude), then this
       needs to be explained.  The status of the documentation is also
       reviewed.
nick    = PAI
#needs   = TRR
start   = @tPAI
stop    = @tPAI
allows  = PAS
who     = @allto

task    = Provisional Acceptance Shipped
@milestask
desc    = The purpose of this review is to scrutinize the results of site
       testing which demonstrates that the equipment survived the shipment to
       the site.  The testing is more of a bare-bones functional test.  The
       status of documentation and action items from the PAI meeting are
       reviewed as well.
nick    = PAS
needs   = PAI
start   = @tPAS
stop    = @tPAS
allows  = AOSHW
who     = @allto

task    = Ready for AOS HW installation
@milestask
desc    = a time at which all the hardware is on site and ready to be installed
    The Maser and PICs (and supporting hardware) are at the high site (AOS);
    the Mark6 recorders are at the low site (OSF); and the @fiber
    has components at both sites.
nick    = AOSHW
#needs   = SWCDR
start   = @tAOSHW
stop    = @tAOSHW
allows  = LocalVLBI
who     = @allto

task    = Local VLBI test
@milestask
desc    = VLBI testing with assets in Chile
issues  = need to figure out how to do this and whether it is with
    a pair of ALMA antennas (talk to Rodrigo Olguin or Alejandro Saez)
    or between ALMA and APEX (talk to Alain Roy).  If the Mark6 recorders
    can support DiFX, then the correlation could take place at the OSF.
nick    = LocalVLBI
needs   = AOSHW
start   = @tLVLBI
stop    = @tLVLBI
allows  = OBS1
who     = @allto

task    = 1st observation is 3mm test
@milestask
desc    = the first opportunity to do VLBI with external sites.
    This marks the beginning of the commissioning phase.
    From this point forward we will do VLBI as time ALMA's schedule allows.
issues  = need to define goals of this test, work out peer site(s)
nick    = OBS1
needs   = LocalVLBI
start   = @tOBS1
stop    = @tOBS1
allows  = OBS2
who     = @alloo

task    = 2nd observation is 1mm test
@milestask
desc    = most likly the first 230 MHz observation.
issues  = need to define goals of this test, work out peer site(s)
nick    = OBS2
needs   = OBS1
start   = @tOBS2
stop    = @tOBS2
allows  = SW-Release
who     = @alloo

task    = 3rd observation is 1mm obs
@milestask
desc    = a full array 230 MHz observation, with no issues
issues  = need to define goals of this test, work out peer site(s)
nick    = OBS3
needs   = SW-Release
start   = @tOBS3
stop    = @tOBS3
allows  = DONE
who     = @alloo

task    = Completion of Project
@milestask
desc    = the point at which we have delivered everything
            and we have no money left
issues  = need a full punch-list of deliverables
nick    = DONE
needs   = OBS3
start   = @tDONE
stop    = @tDONE
who     = @all

# Phase II testing - northern hemisphere integration tests (ideally both
# against simulation and hardware)
# Phase III - "engineering" testing in Chile, not necessarily on the sky
# Phase IV - on-the sky testing, commissioning in support (e.g., reducing data)
# Phase V - handed over to commissioning team


#
# sub-releases every 2 weeks, major/minor in April/October
# but we don't need to hit those except at the very end.
# this final release is for PIs.
#

task    = final release of all phasing code
@milestask
desc    = all phasing project code is delivered to ALMA and released.
    (I.e. after this milestone, we are no longer changing code, but
    we can be working on final documentation, &c.)
nick    = SW-Release
start   = @tSWREL
stop    = @tSWREL
allows  = OBS3
who     = @allsw

#
#@GENERAL
#
domain  = @GENERAL

tdefs   = generaltask
path    = none
code    = none
days    = 30
who     = @Hay


thing   = software planning
desc    = provides time to plan software
nick    = SWPlan

task    = finish the plan
@generaltask
desc    = complete the software plan
nick    = SW-plan
needs   = F2F1
allows  = PDR
who     = @allsw


thing   = software training
desc    = provides time to learn ALMA software system
nick    = SWTraining

task    = get ALMA s/w training
@generaltask
desc    = learn about all things ALMA as required
nick    = SW-learn
needs   = F2F1
allows  = SWCDR
who     = @allsw


thing   = software documentation
desc    = provides time to write software documents
nick    = SWDocs

task    = provide initial documentation
@generaltask
desc    = write the documents for the ALMA board
nick    = Doc-basic
needs   = F2F1
allows  = PDR
who     = @allsw

task    = complete a test plan
@generaltask
desc    = document describing the system-level software tests and
    criteria for success
nick    = SW-test
needs   = PDR
allows  = CDR
who     = @allto

task    = provide working documentation
@generaltask
desc    = write the documents required for integration,
            testing and observations
nick    = Doc-working
needs   = PDR
allows  = AOSHW
who     = @allto

task    = provide the documentation deliverables
@generaltask
desc    = write the final documents for delivery at end of project
nick    = Doc-final
needs   = AOSHW
allows  = DONE
who     = @all

task    = generate hardware ICD information
@generaltask
desc    = provide the phasing project hardware ICD document
nick    = Doc-HW-icd
needs   = PDR
allows  = CDR
who     = @allhw

#
#@TESTA for the moment, TESTA is a thing within GENERAL
#

thing   = Integration Testing (Software A)
desc    = this is a thread of major test milestones for the complete system.
nick    = TESTA
orient  = landscape

thing   = Integration Testing (Software B)
desc    = this is a thread of major test milestones for the complete system.
nick    = TESTB
orient  = portrait

thing   = Integration Testing (Hardware)
desc    = this is a thread of major test milestones for the complete system.
nick    = TESTH
orient  = landscape

thing   = Integration Testing (Observations)
desc    = this is a thread of major test milestones for the complete system.
nick    = TESTO
orient  = landscape

tdefs   = testask
path    = none
code    = Other
days    = 7
who     = @allto

# these tasks are distributed among other domains....


#
#@HW
# these just get start and stop times
#
domain  = @HW
orient  = landscape

tdefs   = oftask
path    = none
code    = none
days    = 30
who     = @NAOJ

thing   = Optical Fiber Link System Hardware
desc    = 10 GbE @fiber from AOS to OSF
nick    = fiber

task    = Optical Fiber Bid
@oftask
desc    = request bids from vendors
nick    = fiber-bid
start   = 2012-06-04
stop    = 2012-07-03
allows  = fiber-design
days    = 7

task    = Optical Fiber Detailed design
@oftask
desc    = complete the detailed design of the @fiber
nick    = fiber-design
start   = 2012-07-15
stop    = 2012-09-30
allows  = fiber-icd,fiber-make

task    = Optical Fiber ICD information
@oftask
desc    = provide complete information for hardware/software ICDs to whomever
nick    = fiber-icd
start   = 2012-10-01
stop    = 2012-10-15
allows  = Doc-HW-icd
days    = 7
# FIXME: allows what?

task    = Optical Fiber Production
@oftask
desc    = selected vendor builds the tx/rx modules at each end
nick    = fiber-make
start   = 2012-10-01
stop    = 2013-02-25
allows  = fiber-test

task    = Optical Fiber Testing
@oftask
desc    = lab testing of fiber equipment in Japan
nick    = fiber-test
needs   = fiber-make
start   = 2013-04-01
stop    = 2013-09-30
allows  = fiber-install
days    = 7

# FIXME
# road trip to US, OSF test, other testing, install

task    = Optical Fiber Installation
@oftask
desc    = installation of the @fiber between AOS and OSF (with implicit testing)
nick    = fiber-install
needs   = fiber-test
start   = 2014-04-01
stop    = 2014-04-15
allows  = Mark6-tested
days    = 7

thing   = Haystack Correlator
desc    = which is the hardware to support the ALMA DiFX correlation
nick    = HayCorr

tdefs   = hctask
path    = none
code    = none
days    = 30
who     = @ASIAA,@Hay

task    = purchase Haystack Correlator hardware
@hctask
desc    = plans the purchase of compute nodes and network infrastructure
nick    = HayCorr-purchase
start   = 2013-11-15
stop    = 2013-11-15
allows  = HayCorr-assemble

task    = assemble the Haystack Correlator hardware
@hctask
desc    = assemble the Haystack Correlator
nick    = HayCorr-assemble
needs   = HayCorr-purchase
start   = 2014-03-15
stop    = 2014-03-30

domain  = @GENERAL
thing   = @TESTO
task    = test the Haystack Correlator for ALMA
@testask
desc    = test the Haystack Correlator for the capability
    to work efficiently with ALMA data
nick    = HayCorr-test
needs   = HayCorr-assemble
start   = 2014-04-01
stop    = 2014-04-15
allows  = OBS1

domain  = @HW
thing   = Hydrogen Maser
desc    = which is probably the T4 Science iMaser300 currently at Haystack
nick    = iMaser

tdefs   = hmtask
path    = none
code    = none
days    = 30
who     = @Hay

task    = provide maser ICD information
@hmtask
desc    = provide the information to whatever hardware/software ICDs
    require it.  These are available from the manual, the manufacturer
    or the running instance at Haystack.
nick    = iMaser-icd
start   = 2012-07-03
stop    = 2012-09-30
allows  = iMaser-bought,Doc-HW-icd
days    = 7

task    = purchase maser
@hmtask
desc    = either purchase the maser or repurpose it from an
    existing site (Haystack)
nick    = iMaser-bought
start   = 2013-02-01
stop    = 2013-02-01
allows  = iMaser-delivered
days    = 7

task    = maser site prep
@hmtask
desc    = preparations at the OSF to receive the maser
nick    = iMaser-prep
start   = 2012-01-01
stop    = 2012-06-01
allows  = iMaser-inuse

task    = deliver maser
@hmtask
desc    = delivery is to AOS
nick    = iMaser-delivered
needs   = iMaser-bought
start   = 2013-06-01
stop    = 2013-06-01
allows  = iMaser-inuse
days    = 7

task    = integrate maser
@hmtask
desc    = integration of maser with AOS Timing
nick    = iMaser-inuse
start   = 2013-06-15
stop    = 2013-06-15
needs   = iMaser-delivered
days    = 7

thing   = VLBI Recorders and media
desc    = which are the Mark6 recorders to be installed at the OSF site
nick    = Recorders

tdefs   = m6task
path    = none
code    = none
days    = 30
who     = @Hay

task    = Mark6 recorder ICD information
@m6task
desc    = provide the Mark6 recorder ICD information to whatever
    hardware/software ICD requires it.  The HW part is needed for
    AOS installation, the s/w part is probably the exact VSI-S
    command set to be available
nick    = Recorders-icd
start   = 2012-07-03
stop    = 2012-09-03
allows  = Recorders-enhanced,Doc-HW-icd
days    = 7

task    = Mark6 ALMA support
@m6task
desc    = the normal Mark6 product will need some enhancement to
    support some testing (e.g. analysis of generated test data)
    and ideally DiFX correlation if we are doing a local VLBI test.
    This task is to provide the enhancements to the embedded Mark6
    software to allow these things.
nick    = Recorders-enhanced
start   = 2012-09-03
stop    = 2013-07-01
allows  = Recorders-bought

# FIXME: allows PIC/LTA testing

task    = purchase Mark6 recorders
@m6task
desc    = with implicit assembly and testing at Haystack.  After that
    the recorders are available for shipment to Chile and/or C'ville
    for more testing.
nick    = Recorders-bought
start   = 2013-07-01
stop    = 2013-09-01
allows  = Recorders-delivered
days    = 7

task    = deliver Mark6 recorders to OSF for testing
@m6task
desc    = delivery is to OSF
nick    = Recorders-delivered
needs   = Recorders-bought
start   = 2013-11-01
stop    = 2013-11-01
allows  = Mark6-tested
days    = 7

task    = purchase Mark6 recorder media
@m6task
desc    = with implicit testing at Haystack
nick    = Media-bought
start   = 2013-07-01
stop    = 2013-09-01
allows  = Media-delivered
days    = 7

task    = deliver Mark6 recorder media
@m6task
desc    = delivery is ultimately to OSF, but some of it will be needed
    wherever the Mark6 units are; e.g. C'ville.
nick    = Media-delivered
needs   = Media-bought
start   = 2013-11-01
stop    = 2013-11-01
allows  = Mark6-tested
days    = 7

# FIXME: what is the exact recorder travel path

domain  = @GENERAL
thing   = @TESTH
task    = test Mark6 recorders with media at OSF with data from PICs
@testask
desc    = complete testing with data from PIC
nick    = Mark6-tested
needs   = Recorders-delivered,Media-delivered,fiber-install
start   = 2014-04-05
stop    = 2014-04-05
allows  = LocalVLBI
days    = 7

#
# Already exists -- excised
#
##thing   = GPS/Maser Monitor
##desc    = which is possibly an Agilent 53200A Series RF Frequency Counter
##nick    = Counter
##
##task    = purchase GPS - Maser Monitor
##nick    = counter-bought
##allows  = counter-delivered
##start   = 2013-01-01
##stop    = 2013-01-01
##
##task    = deliver GPS - Maser Monitor
##nick    = counter-delivered
##needs   = counter-bought
##start   = 2013-03-20
##stop    = 2013-03-20
##allows  = counter-tested
##
##task    = test GPS - Maser Monitor
##nick    = counter-tested
##needs   = counter-delivered,iMaser-delivered
##start   = 2013-04-01
##stop    = 2013-04-08
##allows  = AOSTest

domain  = @HW
thing   = Phasing Interface Card (PIC)
desc    = the 8 cards that convert the summed signals into VDIF packets
nick    = PIC

tdefs   = pictask
path    = none
code    = none
days    = 30
who     = @Cville

task    = PIC Delivered to OSF
@pictask
desc    = Eight working cards (and spares) delivered to OSF for initial testing
    with two-antenna test rig
nick    = PIC-delivered
start   = 2014-02-01
stop    = 2014-02-01
allows  = OSFTest
needs   = PAI
days    = 1

task    = PIC Delivered and installed at AOS
@pictask
desc    = Eight working cards (and spares) delivered to AOS and installation
    in the correlator hardware
nick    = PIC-install
start   = 2014-02-20
stop    = 2014-02-25
allows  = AOSTest
needs   = PAS
days    = 5

domain  = @GENERAL
thing   = @TESTH
task    = PIC Development Complete at Charlottesville
@testask
desc    = integration of a ROACH board with a correlator card and associated
    firmware and engineering support.  This is a system level test with
    test fixtures as described in item 9b of @RlCmemo.
nick    = USTest
start   = 2013-10-15
stop    = 2013-10-15
needs   = TRR
#allows  = PIC-delivered
allows  = PAI
days    = 5

# FIXME Work PAI/PAS into the flow.

task    = PIC System level test with test correlator
@testask
desc    = test PIC within the 2-antenna correlator at the OSF
    prior to integration up at the AOS.
    This is the system level test described as item
    9c of @RlCmemo.
nick    = OSFTest
start   = 2014-02-15
stop    = 2014-02-15
#allows  = PIC-install
allows  = PAS
days    = 5

task    = PIC Integrated and Tested at AOS
@testask
desc    = All 8 PIC cards installed and tested in 4 quadrants at the AOS
    At this point, a 2-antenna correlation could be repeated (i.e. as with
    the test correlator, but now with the real correlator).
nick    = AOSTest
needs   = iMaser-inuse
start   = 2014-03-15
stop    = 2014-03-15
allows  = Mark6-tested
days    = 5

#
#@CARD
#
domain  = @CARD

thing   = PIC Card Development
desc    = setup and learn CASPER tools, evaluate options and design PIC
nick    = PC

task    = Acquire and learn CASPER tools
@pictask
desc    = item 1 of @RlCmemo: acquire and learn CASPER tools
nick    = PC-CASPER
needs   = F2F1
allows  = PC-Hardware,PC-Personality,PC-Firmware

task    = PIC Hardware development
@pictask
desc    = item 2a of @RlCmemo: covering ROACH hardware development
nick    = PC-Hardware
allows  = PC-Board-test

task    = PIC Xilinx personality development
@pictask
desc    = item 2a of @RlCmemo: covering ROACH FPGA development
nick    = PC-Personality
allows  = PC-Board-test

task    = PIC Firmware development
@pictask
desc    = item 2b of @RlCmemo: covering connection to correlator card
nick    = PC-Firmware
allows  = PC-Board-test

task    = PIC board testing
@pictask
desc    = item 2c of @RlCmemo: covering testing of prototype card
nick    = PC-Board-test
allows  = MRR

task    = PIC Respin
@pictask
desc    = item 3 of @RlCmemo: second pass at getting it right
nick    = PC-Respin
days    = 18
needs   = MRR
allows  = PC-Prod

task    = PIC Production
@pictask
desc    = item 4 of @RlCmemo: manufacture the 8+ boards
nick    = PC-Prod
days    = 17
allows  = USTest

thing   = Other PIC related things
desc    = item 5 of @RlCmemo: other physical modifications
    to the correlator, &c
nick    = CorrMods

task    = LTA Firmware modifications
@pictask
desc    = item 5c of @RlCmemo: complete the sum capability
nick    = CorrLTA
needs   = PDR
stop    = 2012-12-31
allows  = USTest

task    = 1PPS distribution and monitoring
@pictask
desc    = item 6 of @RlCmemo: paranoia distribution of 1PPS
    from maser (or simulated maser) and additional GPS to the PIC boards
nick    = PPS
needs   = F2F1
allows  = USTest

task    = PIC Reviews and Documentation
@pictask
desc    = items 7 and 8 of @RlCmemo: support reviews and provide documentation
nick    = PRevDocs
needs   = F2F1
allows  = LocalVLBI

task    = PIC Test Fixture
@pictask
desc    = item 9a.i of @RlCmemo: development of test fixture for module level
    testing
nick    = PTestFixture
needs   = F2F1
allows  = PIC-prototype

task    = PIC Prototype Card Testing
@pictask
desc    = item 9a.ii of @RlCmemo: testing of prototype card in C'ville
nick    = PIC-prototype
allows  = PC-Board-test


#
#@PREP
#
domain  = @PREP

# 2.14.1. SCHED Support:  The VLBI scheduling program (SCHED) needs
# to be updated with ALMA configuration information and capabilities.
# Capabilities of ALMA beyond those typically found at other stations will
# be supplied in an ancillary scheduling file.
thing   = SCHED Accomodations
desc    = enhancements to SCHED to allow VLBI at ALMA
nick    = SCHED

tdefs   = schedtask
path    = none
code    = Other
days    = 7
who     = @MPIfR

task    = SCHED samples
@schedtask
desc    = generate sample key input file(s), modify SCHED (or its tables)
            and pass changes on to Craig Walker for incorporation in SCHED
            (or discuss required changes for him to implement)
nick    = SCHED-keyin
needs   = PDR

task    = SCHED verify
@schedtask
desc    = verify that all sample SCHED file inputs are usefully processed
nick    = SCHED-verify
allows  = VEX-verify


# 2.14.2. VEX Translator:  The translator parses a standard VEX format
# VLBI schedule and the ancillary file (previous section) into UTC
# time-tagged commands that will be issued to the ALMA phasing system.
# The product tells the VOM all that is needed for the ALMA VLBI observing
# run.
# 
##line-9:VEX translator
thing   = VEX Translator
desc    = provides a python script (and perhaps other files) for the @VOM
nick    = VEX

tdefs   = vextask
path    = none
code    = Python
days    = 7
who     = @MPIfR

task    = define specs for @VEX
@vextask
desc    = determines the specifications for the tool to translate the
            VEX specifications (and whatever else might be needed) into
            what is required to run VLBI experiments at ALMA
nick    = VEX-specs
allows  = VEX-files
needs   = PDR

task    = define files provided to @VOM
@vextask
desc    = define the files that are produced by the VEX translation process
    so that they can be delivered to the @VOM.  These specification of
    these files would go in an ICD with Scheduling.  Note that we need to
    have a full understanding of ALMA tuning so that the choices in the
    VEX file will be respected by ALMA.  Note also that TFB filter "skirt"
    shape and placement may affect choices about the bands in frequency space.
nick    = VEX-files
needs   = VEX-specs,SCHED-keyin
allows  = VEX-triv,Scheduling-icd

task    = triv @VEX
@vextask
desc    = delivers an initial implementation good enough to run scans
nick    = VEX-triv
allows  = SCHED-verify

domain  = @GENERAL
thing   = @TESTA
task    = @VEX & @VOM integration testing
@testask
desc    = verify the interfaces between @VEX and @VOM.
nick    = VEX-VOM
needs   = VEX-triv
allows  = VEX-final

domain  = @PREP
thing   = @VEX
task    = final @VEX
@vextask
desc    = delivers the final inplementation good enough for general use
nick    = VEX-final
allows  = VEX-verify

task    = check @VEX
@vextask
desc    = verify that all sample SCHED keyin files are properly translated
nick    = VEX-verify
needs   = VEX-final
allows  = OBS2


# 2.14.3. Scheduler Support:  The VLBI session needs to be incorporated
# into the ALMA observation schedule so that time around the VLBI session
# can be properly utilized.
# 
##line-8:Integration with Scheduling
thing   = Scheduling Modifications
desc    = considers changes to the Scheduling system to allow scheduling
            of VLBI sessions at fixed times
nick    = Scheduling

tdefs   = smtask
path    = none
code    = Other
days    = 0
who     = @MPIfR

task    = identify the @Scheduling
@smtask
desc    = figure out what (if any) changes to the scheduling system are needed
            and develop a plan
nick    = Scheduling-plan
needs   = SWCDR
allows  = Scheduling-icd

task    = Create Scheduling ICD
@smtask
desc    = work out any ICD items with the Scheduling team
needs   = Scheduling-plan
nick    = Scheduling-icd
allows  = Scheduling-mods

task    = make the @Scheduling
@smtask
desc    = work with the Scheduling team to make the necessary modifications
nick    = Scheduling-mods
needs   = Scheduling-icd
allows  = Scheduling-test

domain  = @GENERAL
thing   = @TESTO
task    = test the @Scheduling
@smtask
desc    = work with the Scheduling team to test the changes
nick    = Scheduling-test
allows  = OBS2

#
#@VOM
#
domain  = @VOM
orient  = landscape
##line-5:VLBI Observing Mode development

tdefs   = vomtask
path    = none
code    = C++/Java/Python
days    = 7
who     = @Hay


thing   = Design of the @VOM
desc    = overall design the @VOM.
nick    = VOM-overall

task    = @VOM general design
@vomtask
desc    = complete the overall design the @VOM (but details are
            relegated to other tasks).
    2.1.   VLBI Observing Mode (VOM) VLBI observations will be
    orchestrated by a VLBI Observing Mode (VOM) module, which will
    communicate commands to, and query status from, all sub-system
    components of the phasing system.  The VOM will present a GUI to the
    ALMA operator, enabling control and inspection of the phasing system.
nick    = VOM-general

task    = Design s/w i/f to Correlator (Fast)
@vomtask
desc    = 2.1.1.   Software Interface to Correlator:  as per section 2.2 through 2.5 below.
nick    = VOM-Exec-w-Fast
needs   = PDR
allows  = VOM-general

task    = Design s/w i/f to Telcal (Slow)
@vomtask
desc    = 2.1.2.   Software Interfaces to the TelCal Modules: as per sections 2.6 and 2.7 below.
nick    = VOM-Exec-w-Slow
needs   = PDR
allows  = VOM-general

task    = Design s/w i/f to Maser and its Monitor
@vomtask
desc    = 2.1.3.   Software Interface to the H-Maser:  as per section 2.8 and 2.9 below.
nick    = VOM-Exec-w-HMaser
needs   = CDR
allows  = VOM-icd

task    = Design s/w i/f to VLBI Recorders
@vomtask
desc    = 2.1.4.   Software Interface to the VLBI Recorders:  as per section 2.10 below.
nick    = VOM-Exec-w-Mark6
needs   = PDR
allows  = VOM-general

task    = Design s/w i/f to Optical Fiber Link
@vomtask
desc    = 2.1.5.   Software Interface to the Optical Fiber Link:  as per section 2.11 below.
nick    = VOM-Exec-w-Fiber
needs   = CDR
allows  = VOM-icd

task    = Design s/w i/f to GUI
@vomtask
desc    = 2.1.6.   GUI for Operations: as per 2.12 below.
nick    = VOM-Exec-w-GUI
needs   = CDR
allows  = VOM-icd

task    = Design s/w i/f for handling of Contingencies
@vomtask
desc    = 2.1.7.   Contingencies: as per 2.13 below.
nick    = VOM-Exec-w-Contingency
needs   = CDR
allows  = VOM-icd

task    = Design s/w i/f to Scheduling
@vomtask
desc    = 2.1.8.   Scheduling:  as per 2.14 below.
nick    = VOM-Exec-w-Sched
needs   = PDR
allows  = VOM-general

task    = Develop approach to absolute timing of scans
@vomtask
desc    = ALMA works out its own timing, so we need to be sure
    the VLBI scans start and stop at the appointed times
nick    = VOM-timing
needs   = PDR
allows  = VOM-general

task    = @VOM ICDs
@vomtask
desc    = identify and negotiate all external ICDs that involve the @VOM
nick    = VOM-icd


thing   = Enter VLBI session
desc    = sets up ALMA for VLBI a sequence of VLBI scans
nick    = VOM-Enter

task    = Design VLBI Setup Process
@vomtask
desc    = work out the details of the @VOM setup
nick    = VOM-Enter-design
needs   = VOM-general

task    = Simulate VLBI Setup Process
@vomtask
desc    = simulate the @VOM setup process
nick    = VOM-Enter-simcode
needs   = VOM-Enter-design
allows  = VOM-Enter-code

task    = Implement VLBI Setup Process
@vomtask
desc    = implement the design of the @VOM setup
nick    = VOM-Enter-code
needs   = VOM-Enter-simcode
allows  = VOM-Enter-ssint

task    = Enter VLBI Session @ssint
@vomtask
desc    = @ssint for entry to a VLBI Session
nick    = VOM-Enter-ssint
allows  = VOM-ssint-1


thing   = Execute VLBI Scans
desc    = drives the antennas, phasing system and VLBI backends
            through one observing night scan sequence
nick    = VOM-Exec

task    = Design VLBI scan execution
@vomtask
desc    = work out the details of the @VOM execution.
    The VOM will be based on the Single Field Interferometry Mode which
    already provides most of the functionality that the VOM needs.
    The VEX Translator will have provided a Python script which runs
    the VLBI network scans interleaved with ALMA calibration scans.
    For the VLBI scans, the start/stop times of the scans are fixed
    (because the other VLBI stations need to record simultaneously.)
    For the ALMA calibration scans, an interval of time in which to
    carry out the scan is specified, but the timing is not critical.
    (It is only critical that the operation(s) are completed before
    the next VLBI scan.)  As with other modes, the VOM will begin
    with the creation of the array of antennas to be used, instantiate
    the devices it needs to talk with, and at the end of the session,
    destroy the array.
nick    = VOM-Exec-design
needs   = VOM-general

task    = Simulate VLBI scan execution
@vomtask
desc    = implement the design of the @VOM execution
nick    = VOM-Exec-scan-simcode
needs   = VOM-Exec-design
allows  = VOM-Exec-scan-code

task    = Implement VLBI scan execution
@vomtask
desc    = implement the design of the @VOM execution
nick    = VOM-Exec-scan-code
needs   = VOM-Exec-scan-simcode
allows  = VOM-Exec-ssint-1

task    = Simulate Command and Monitoring of Correlator Phasing
@vomtask
desc    = do the coding to simulate commanding and monitoring of the
    correlator components of the phasing system.
nick    = VOM-Exec-fast-simcode
needs   = VOM-Exec-design
allows  = VOM-Exec-fast-code

task    = Implement Command and Monitoring of Correlator Phasing
@vomtask
desc    = do the coding to support commanding and monitoring of the
    correlator components of the phasing system.
nick    = VOM-Exec-fast-code
allows  = VOM-Exec-ssint-1

task    = Simulate Command and Monitoring of TelCal Phasing
@vomtask
desc    = do the coding to simulate commanding and monitoring of the
    TelCal components of the phasing system.
nick    = VOM-Exec-slow-simcode
needs   = VOM-Exec-design
allows  = VOM-Exec-slow-code

task    = Implement Command and Monitoring of TelCal Phasing
@vomtask
desc    = do the coding to support commanding and monitoring of the
    TelCal components of the phasing system.
nick    = VOM-Exec-slow-code
allows  = VOM-Exec-ssint-1

task    = Simulate Command and Monitoring of Maser and Monitor
@vomtask
desc    = do the coding to simulate commanding and monitoring of the
    H Maser and GPS-Maser monitor.
nick    = VOM-Exec-HMaser-simcode
needs   = VOM-icd
allows  = VOM-Exec-HMaser-code

task    = Implement Command and Monitoring of Maser and Monitor
@vomtask
desc    = do the coding to support commanding and monitoring of the
    H Maser and GPS-Maser monitor.
nick    = VOM-Exec-HMaser-code
allows  = VOM-Exec-ssint-2

task    = Simulate Command and Monitoring of VLBI Recorders
@vomtask
desc    = do the coding to simulate commanding and monitoring of the
    VLBI Recorders.
nick    = VOM-Exec-Mark6-simcode
needs   = VOM-Exec-design
allows  = VOM-Exec-Mark6-code

task    = Implement Command and Monitoring of VLBI Recorders
@vomtask
desc    = do the coding for commanding and monitoring of the
    VLBI Recorders. 
nick    = VOM-Exec-Mark6-code
allows  = VOM-Exec-ssint-1

task    = Simulate Command and Monitoring of Optical Fiber Link
@vomtask
desc    = do the coding to simulate commanding and monitoring of the
    Optical Fiber Link.
nick    = VOM-Exec-Fiber-simcode
needs   = VOM-icd
allows  = VOM-Exec-Fiber-code

task    = Implement Command and Monitoring of Optical Fiber Link
@vomtask
desc    = do the coding to support commanding and monitoring of the
    Optical Fiber Link.
nick    = VOM-Exec-Fiber-code
allows  = VOM-Exec-ssint-2

task    = Simulate Scheduling interface
@vomtask
desc    = do coding to simulate schedule inputs
nick    = VOM-Exec-sched-simcode
needs   = VOM-Exec-design
allows  = VOM-Exec-sched-code

task    = Implement Scheduling interface
@vomtask
desc    = this is primarily ingesting the fruits of the VEX translation
    process, setup scripts to run scans, configure things, &c.
nick    = VOM-Exec-sched-code
allows  = VOM-Exec-ssint-1

task    = Simulate GUI interfaces
@vomtask
desc    = the @VOM proper relays monitoring data to and receives
    commands from the the operator.  This task is the coding to
    simulate these exchanges.
nick    = VOM-Exec-GUI-simcode
needs   = VOM-icd
allows  = VOM-Exec-GUI-code

task    = Implement GUI interfaces
@vomtask
desc    = the @VOM proper relays monitoring data to and receives
    commands from the the operator.  This task is the coding to
    implement these exchanges.
nick    = VOM-Exec-GUI-code
allows  = VOM-Exec-ssint-2

task    = Simulate VLBI contingency handlers
@vomtask
desc    = do the coding to simulate various contingencies
nick    = VOM-Exec-contingency-simcode
needs   = VOM-ssint-2
allows  = VOM-Exec-contingency-code

task    = Implement VLBI contingency handlers
@vomtask
desc    = 2.13. Contingencies
    For minor, per-antenna failures, the simplest course of action is to
    drop that antenna from the sum (and take whatever other actions are
    normally required).  Ideally, the antenna mask handling should be such
    that this action can be easily accomplished by merely updating the mask.
    On more serious failures of a scan, the VOM can direct the PIC/recorders
    to not bother to record the data (or to record it but to mark it as
    invalid).  When the failure is corrected, these actions can be reversed.
    If recorder disk modules fail, scans may be skipped (at that recorder)
    until the operator is able to replace the modules.  If any recorder is
    unavailable, then the session continues with fewer recorders.
nick    = VOM-Exec-contingency-code
allows  = VOM-Exec-ssint-3

task    = Simulate VLBI contingency recovery
@vomtask
desc    = do the coding to simulate recovery from various contingencies
nick    = VOM-Exec-recovery-simcode
needs   = VOM-ssint-2
allows  = VOM-Exec-recovery-code

task    = Implement VLBI recovery from contingency options
@vomtask
desc    = depending on the eventual plan, it may be possible to recover
    from some of the contingencies, either automatically, or through
    operator command.
nick    = VOM-Exec-recovery-code
allows  = VOM-Exec-ssint-3

task    = VLBI Scan @ssint Phase 1
@vomtask
desc    = @ssint for VLBI Scan execution of essential components
nick    = VOM-Exec-ssint-1
allows  = VOM-ssint-1,MRR


task    = VLBI Scan @ssint Phase 2
@vomtask
desc    = @ssint for VLBI Scan execution of additional components, phase 2
nick    = VOM-Exec-ssint-2
allows  = VOM-ssint-2

task    = VLBI Scan @ssint Phase 3
@vomtask
desc    = @ssint for VLBI Scan execution of last-built components, phase 3
nick    = VOM-Exec-ssint-3
allows  = VOM-ssint-3



thing   = Exit VLBI session
desc    = turns off the VLBI system elements when observations are done
nick    = VOM-Exit

task    = Design VLBI Session Exit
@vomtask
desc    = work out the details of VLBI shutdown
nick    = VOM-Exit-design
needs   = VOM-general

task    = Simulate VLBI Session Exit
@vomtask
desc    = implement the code to simulate VLBI shutdown at end of session
nick    = VOM-Exit-simcode
needs   = VOM-Exit-design

task    = Implement VLBI Session Exit
@vomtask
desc    = implement the design of VLBI shutdown at end of session
nick    = VOM-Exit-code
needs   = VOM-Exit-simcode
allows  = VOM-Exit-ssint

task    = VLBI Session Exit @ssint
@vomtask
desc    = @ssint for entry to a VLBI Session
nick    = VOM-Exit-ssint
allows  = VOM-ssint-1


thing   = Integrate VOM with the ALMA Control
desc    = makes changes where needed to allow running a new mode.
    If the VOM is implemented as an enhancement of @SFIM, then
    the integration is probably limited to addition of the few
    extra properties which are then disabled in the usual mode.
nick    = VOM-Add

task    = Add new VLBI controller functionality to ALMA
@vomtask
desc    = changes external to phasing project to allow the new controller
            to be invoked, for its devices to be recognized and manages,
            and for its data to be archived.  Most likely this is adding
            the necessary hooks to Single Field Interferometry Mode and
            the (by default disabled) variables to activate the new
            phasing and VLBI functionality, so there is no work here
            except identifying where these changes could be made if
            it is desired to split off the VOM in the future.
            Despite the name, this includes changes to @SFIM to
            activate the new functionality.
nick    = VOM-External
needs   = VOM-general
allows  = VOM-ssint-1

##line-3:InterferometryController modifications
#task    = InterferometryController modifications
#@vomtask
#desc    = changes the InterferometryController to eliminate components
#    which conflict with VLBI operation.  Changes beyond this are
#    tasked separately.
#nick    = VOM-IC-Mods
##needs   = VOM-Enter-design,VOM-Exec-design,VOM-Exit-design
#needs   = VOM-icd

##line-6:Update SSR modules and observation scripts
task    = Update SSR modules and observation scripts
@vomtask
desc    = 
    RH: The observations are executed by running a Python observation
    script. There is a layer of Python code between the science
    observation scripts and the Java observing mode interfaces. This is
    in CSV module SSR/ObservingModes.  The Python classes contained in
    this module, which are maintained by science staff, define several
    different Targets (e.g., PhaseCalTarget, AtmCalTarget, ScienceTarget,
    etc.), that are created from the input Scheduling Block and are
    executed by the observing script, resulting in different scans,
    each one with a different scientific intent and behaviour.  The new
    VLBI observing mode will need to be integrated with the SSR module
    classes, and a suitable observation script should be developed.
nick    = VOM-Scripts
needs   = VOM-icd
allows  = VOM-ssint-2

##line-7:Integration of fault tolerance techniques
task    = Integration of fault tolerance techniques to @VOM
@vomtask
desc    = 
    RH: When we discussed the VLBI observing mode with Ralph Marson,
    we thought that to fully integrate the observing mode into the
    Control subsystem, taking into account all possible failure modes,
    would take some effort. On the other hand, to have a first version
    running would be more straightforward.  We essentially thought in
    dividing the work in two phases, first develop a prototypical version,
    and then complete it making it more robust to error conditions and
    better integrated with the rest of the system.
nick    = VOM-Faults
needs   = VOM-ssint-2
allows  = VOM-ssint-3


domain  = @GENERAL
thing   = @TESTA

##line-10:Subsystem integration & testing
task    = @VOM @ssint, phase 1
@vomtask
desc    = do the subsystem integration & testing for the VOM, phase 1
nick    = VOM-ssint-1
#allows  = VOM-icd
allows  = TRR
needs   = VEX-VOM

thing   = @TESTB
task    = @VOM @ssint, phase 2
@vomtask
desc    = do the subsystem integration & testing for the VOM, phase 2
nick    = VOM-ssint-2

task    = @VOM @ssint, phase 3
@vomtask
desc    = do the subsystem integration & testing for the VOM, phase 3
nick    = VOM-ssint-3

##line-11:System integration & testing in simulation
task    = @VOM @sitsim
@vomtask
desc    = do the system integration & testing for the VOM in simulation
nick    = VOM-sitsim
needs   = VOM-ssint-3

##line-12:System integration & testing with hardware
task    = @VOM @sitwhw
@vomtask
desc    = do the system integration & testing for the VOM with the hardware
nick    = VOM-sitwhw
allows  = LocalVLBI

#
#@DAS
#
domain  = @DAS

tdefs   = dastask
path    = none
code    = C++/Java/Python
days    = 7
who     = @Hay

###
### Refer to sections 2.10
###
thing   = VLBIRecorder software device
desc    = VLBI Mark6 Recorder software device
nick    = Mark6Dev

task    = VLBIRecorder software device design
@dastask
desc    = design the s/w device that manages the recorders
            including the hardware (VLBIController) side
            As described in @sec 2.10 of @swreq, during a VLBI
            observation, the VLBI recorder is typically controlled via a
            set of pre-scheduled commands that are keyed to specific UTC
            time tags.  The Mark6 records data on “disk modules”,
            which are enclosures that contain multiple hard disks. A
            Mark6 recorder will be able to record 16Gb/s continuously;
            thus one Mark6 can record all data from one quadrant of the
            ALMA correlator, and four Mark6 recorders are required to
            record the entire ALMA bandwidth.  Interaction with the
            VLBI recorders is via a server socket available over an
            ethernet connection.
nick    = Mark6Dev-design
issues  = implement low-level record-on/record-off commands or a
    higher-level run-a-session protocol
needs   = PDR
allows  = Mark6Dev-simcode

task    = Implement VLBIRecorder simulation classes
@dastask
desc    = do the coding for VLBIRecorder s/w device
nick    = Mark6Dev-simcode
allows  = Mark6Dev-code

task    = Implement VLBIRecorder classes
@dastask
desc    = do the coding fo the VLBIRecorder s/w device
nick    = Mark6Dev-code
allows  = Mark6Dev-ssint

task    = VLBIRecorder @ssint
@dastask
desc    = do the subsystem testing of the VLBIRecorder s/w device
nick    = Mark6Dev-ssint
allows  = Controller-ssint

###
### Refer to sections 2.11
###
thing   = OpticalFiber software device
desc    = Optical Fiber software device
nick    = FiberDev

task    = OpticalFiber software device design
@dastask
desc    = design the s/w device that manages the @fiber
            including the hardware (VLBIController) side.  As
            described in @sec 2.11 of @swreq,
            The Optical Fiber Link (OFL) receives optical data from each
            PIC in 10GbE format and multiplexes these data streams on
            either a single or two fibers for transport down to the OSF
            where the VLBI recorders will be installed.  Once at the OSF,
            the data streams are de-mux’d and distributed to the VLBI
            recorders, possible through a switch.  Software interfaces
            to the OFL are envisaged to be minimal, and will probably
            be conducted via an ethernet connection.
            @sec 2.11.1.   Status: The OFL will, upon request,
            return status information including packet statistics
            (sent/received/lost) and instrument physical characteristics
            (power on/off, voltage, temp, alarm conditions.).
            @sec 2.11.2.   Commands:  Basic commands for the OFL will
            include start/stop/reset.
            NOTE: 2012-07-03: no commanding may be required. (FIXME)
issues  = remove commanding from s/w interfaces document (FIXME)
nick    = FiberDev-design
needs   = PDR
allows  = FiberDev-simcode

task    = Implement OpticalFiber simulation classes
@dastask
desc    = do the code for simulation of the OpticalFiber
nick    = FiberDev-simcode
allows  = FiberDev-code

task    = Implement OpticalFiber classes
@dastask
desc    = do the code for the OpticalFiber s/w device
nick    = FiberDev-code
allows  = FiberDev-ssint

task    = OpticalFiber @ssint
@dastask
desc    = do the subsystem testing of the OpticalFiber s/w device
nick    = FiberDev-ssint
allows  = Controller-ssint

##line-4:VLBIController development
thing   = VLBIController
desc    = VLBI Hardware side of VLBIRecorder and OpticalFiber
nick    = VLBIcontrol

task    = VLBIRecorder/OpticalFiber/VLBIController ICD definition
@dastask
desc    = write the ICD definition for this group
nick    = Controller-icd
allows  = Controller-data
needs   = Mark6Dev-design,FiberDev-design

task    = VLBIRecorder/OpticalFiber/VLBIController data and protocol
@dastask
desc    = create the data spreadsheet and network protocols for the
            VLBIRecorder, OpticalFiber and VLBIController device group
nick    = Controller-data
allows  = Controller-simcode,Controller-create

task    = Create VLBIController hardware side
@dastask
desc    = create the VLBIController and integrate it into
            the existing infrastructure
nick    = Controller-create
allows  = Controller-code

task    = Implement the VLBIController simulation classes
@dastask
desc    = do the coding for the VLBIController simulation classes
nick    = Controller-simcode
allows  = Controller-code

task    = Implement the VLBIController classes
@dastask
desc    = do the coding for the VLBIController classes
nick    = Controller-code
allows  = Controller-mctest,Controller-actest


task    = VLBIRecorder/OpticalFiber/VLBIController @mctest
@dastask
desc    = Monitoring configuration and testing for the VLBIRecorder,
            OpticalFiber and VLBIController device group
nick    = Controller-mctest
allows  = Controller-ssint

task    = VLBIRecorder/OpticalFiber/VLBIController @actest
@dastask
desc    = Alarm configuration and testing for the VLBIRecorder,
            OpticalFiber and VLBIController device group
nick    = Controller-actest
allows  = Controller-ssint

task    = VLBIController @ssint
@dastask
desc    = do the VLBIController subsystem integration and testing
nick    = Controller-ssint
allows  = Controller-sitsim

domain  = @GENERAL
thing   = @TESTA
task    = VLBIRecorder/OpticalFiber/VLBIController @sitsim
@testask
desc    = do the VLBIRecorder/OpticalFiber/VLBIController system
            integration and testing in simulation
nick    = Controller-sitsim
allows  = VOM-ssint-1

thing   = @TESTB
task    = VLBIRecorder/OpticalFiber/VLBIController @sitwhw
@testask
desc    = do the VLBIRecorder/OpticalFiber/VLBIController integration
            and testing with the real hardware
nick    = Controller-sitwhw
needs   = VOM-sitsim
allows  = VOM-sitwhw


#
#@HMASER
#
domain  = @HMASER

tdefs   = masertask
path    = none
code    = C++/Java/Python
days    = 7
who     = @Hay

###
### Refer to section 2.8
###
thing   = Maser software device
desc    = software device for monitoring the maser
nick    = MaserDev

task    = Maser software device design
@masertask
desc    = design the s/w device that manages the maser.
    Design considerations include:
    @sec 2.8.1.   Download Diagnostic Data:  At scheduled intervals, the
    diagnostic data collected locally on the Maser will be downloaded
    for storage with all ALMA meta-data.  Separate programs will
    monitor levels of diagnostic variables, compiling historical plots
    and flagging deviant points.  There are approximately 30 separate
    diagnostic values routinely logged by the maser (eventually: need
    table here with diagnostics and cadence).
    @sec 2.8.2.   Shift to Maser Usage:  ALMA may use the Maser even
    during connected element array (non-beam-formed) modes.  However,
    it may be desirable, or even required, to have a software enabled
    switch that can toggle between use of the Maser 10 MHz or 10 MHz
    from the nominal ALMA frequency standard.
nick    = MaserDev-design
issues  = do we need a "Shift to Maser Usage" command?
allows  = MaserDev-simcode
needs   = PDR

task    = Implement Maser simulation classes
@masertask
desc    = do the coding for simulation of the Maser monitoring s/w device
nick    = MaserDev-simcode
allows  = MaserDev-code

task    = Implement Maser classes
@masertask
desc    = do the coding for the Maser monitoring s/w device
nick    = MaserDev-code
allows  = MaserDev-ssint

task    = Maser @ssint
@masertask
desc    = do the subsystem testing of the Maser s/w device
nick    = MaserDev-ssint
allows  = AOSTiming-ssint


###
### Refer to section 2.9
###
##thing   = Maser-GPS Monitor software device
##desc    = counter to measure clock early (maser tick to GPS tick in us)
##nick    = MonitorDev
##
##task    = Maser-GPS Monitor software device design
##@masertask
##desc    = design the s/w device that manages the counter between
##            the Maser and the GPS, including the hardware (AOSTiming) side
##            As described in @sec 2.9 design considerations note that
##            it is a simple ethernet device typically used to measure
##            the offset between the 1PPS Maser tick and the 1PPS GPS
##            tick edges (typically a few microseconds).  This datum can
##            be reported relatively infrequently (e.g. Twice an hour),
##            as it is used to monitor the long term variations of the
##            maser tick (which should be stable) against the GPS tick
##            (which varies considerably).  The synthesizer in the Maser
##            receiver can be adjusted to remove this long-term drift.
##            Whenever the maser is power-cycled, the previous frequency
##            offset and drift rate need to be saved so that consistency of
##            operations can be maintained.  (Monitoring this drift rate is
##            the key diagnostic on maser health.)  [The device may support
##            multiple channels, so (optionally) additional channels may be
##            compared against the Maser/GPS ticks.  (E.g. for diagnostic
##            purposes, the PIC card may have a PPS output, so there may
##            be as many as 8 of these available to monitor.)]
##nick    = MonitorDev-design
##allows  = MonitorDev-simcode
##needs   = PDR
##
##task    = Implement Maser-GPS simulation classes
##@masertask
##desc    = do the coding to simulate the Maser-GPS counter s/w device
##nick    = MonitorDev-simcode
##allows  = MonitorDev-code
##
##task    = Implement Maser-GPS classes
##@masertask
##desc    = do the coding for the Maser-GPS counter s/w device
##nick    = MonitorDev-code
##allows  = MonitorDev-ssint
##
##task    = Maser-GPS @ssint
##@masertask
##desc    = do the subsystem testing of the Maser-GPS counter s/w device
##nick    = MonitorDev-ssint
##allows  = AOSTiming-ssint

thing   = AOSTiming
desc    = Hardware side of Maser and its monitor
nick    = AOSTiming

task    = Maser/Monitor/AOSTiming ICD definition
@masertask
desc    = write the ICD definition for this group
nick    = AOSTiming-icd
allows  = AOSTiming-data
needs   = MaserDev-design

task    = Maser/AOSTiming data spreadsheet and network protocol
@masertask
desc    = create the spreadsheet and network protocols for AOSTiming group
nick    = AOSTiming-data
allows  = AOSTiming-simcode,AOSTiming-external

##line-28:Modifications in AOSTiming
task    = Modifications to existing AOSTiming
@masertask
desc    = integrate the new portions of AOSTiming in the existing system
nick    = AOSTiming-external
allows  = AOSTiming-code

task    = Implement the AOSTiming simulation classes
@masertask
desc    = do the coding for the the AOSTiming simulation classes
nick    = AOSTiming-simcode
allows  = AOSTiming-code

task    = Implement the AOSTiming classes
@masertask
desc    = do the coding for the AOSTiming classes
nick    = AOSTiming-code
allows  = AOSTiming-mctest,AOSTiming-actest

task    = Maser/AOSTiming @mctest
@masertask
desc    = Monitoring configuration and testing for Maser/AOSTiming
nick    = AOSTiming-mctest
allows  = AOSTiming-ssint

task    = Maser/AOSTiming @actest
@masertask
desc    = Alarm configuration and testing for Maser/AOSTiming
nick    = AOSTiming-actest
allows  = AOSTiming-ssint

task    = AOSTiming @ssint
@masertask
desc    = do the AOSTiming subsystem integration and testing
nick    = AOSTiming-ssint
allows  = AOSTiming-sitsim

domain  = @GENERAL
thing   = @TESTB
task    = Maser/AOSTiming @sitsim
@testask
desc    = do the Maser/AOSTiming system integration and testing
            in simulation
nick    = AOSTiming-sitsim
allows  = VOM-ssint-2

task    = Maser/AOSTiming @sitwhw
@testask
desc    = do the Maser/AOSTiming system integration and testing
            with the real hardware
nick    = AOSTiming-sitwhw
needs   = VOM-sitsim
allows  = VOM-sitwhw


#
#@GUI
#
domain  = @GUI

tdefs   = guitask
path    = none
code    = Java
days    = 7
who     = @MPIfR

###
### Refer to section 2.12
###

thing   = @GUI general
desc    = makes accomodations to the existing GUI(s) for the
            ALMA phasing system GUI elements
nick    = GUI-Top

##line-30:Definition of the Operator GUI
##line-31:GUI implementation
task    = Definition of the Operator GUI
@guitask
desc    = Determine what is required in operator GUI.  It should have
            three components for the VLBI, Timing and Phasing subsystems.
nick    = GuiTop-design
needs   = SWCDR
allows  = GuiTop-code

task    = Implement the top-level VLBI GUI
@guitask
desc    = write the code to incorporate the three primary GUI components
nick    = GuiTop-code
allows  = GuiTop-integrate

##line-32:Interface modifications in observing mode
task    = Interface modifications in observing mode
@guitask
desc    = integrate the new GUI components with the existing operator GUI
nick    = GuiTop-integrate
allows  = GuiTop-ssint

##line-33:Subsystem integration & testing
task    = GUI @ssint
@guitask
desc    = Subsystem integration & testing for the VLBI GUI toplevel
nick    = GuiTop-ssint
allows  = GuiTop-sitsim

##line-34:System integration & testing in simulation
##line-35:System integration & testing with hardware
domain  = @GENERAL
thing   = @TESTB
task    = VLBI GUI @sitsim
@testask
desc    = VLBI GUI system integration & testing in simulation
nick    = GuiTop-sitsim
allows  = VOM-ssint-2

task    = VLBI GUI @sitwhw
@guitask
desc    = VLBI GUI system integration & testing with hardware
nick    = GuiTop-sitwhw
allows  = OBS2
needs   = VOM-sitwhw

domain  = @GUI
thing   = VLBI Status Panel
desc    = makes a VLBI DAS status display for operator
nick    = VLBI-Panel

task    = Implement VLBI Status Panel
@guitask
desc    = implement the portion of the GUI that deals with the @fiber
            and the VLBI recorders
nick    = VlbiPanel-code
needs   = GuiTop-design
allows  = VlbiPanel-ssint

task    = @VLBI-Panel @ssint
@guitask
desc    = do the subsystem integration and testing for the VLBI sub-panel
nick    = VlbiPanel-ssint
allows  = GuiTop-ssint

thing   = Phasing Status Panel
desc    = makes a Phasing system status display for operator
nick    = Phase-Panel

task    = Implement Phasing Status Panel
@guitask
desc    = do the coding for the Phasing Status sub-panel
nick    = PhasePanel-code
needs   = GuiTop-design
allows  = PhasePanel-ssint

task    = @Phase-Panel @ssint
@guitask
desc    = do the subsystem integration and testing for the VLBI sub-panel
nick    = PhasePanel-ssint
allows  = GuiTop-ssint

thing   = Timing Status Panel
desc    = makes a Timing status display for operator
nick    = TimingPanel

task    = Implement Timing Status Panel
@guitask
desc    = do the coding for the timing status sub-panel
nick    = TimingPanel-code
needs   = GuiTop-design
allows  = TimingPanel-ssint

task    = @TimingPanel @ssint
@guitask
desc    = do the subsystem integration and testing for the timing
    status sub-panel
nick    = TimingPanel-ssint
allows  = GuiTop-ssint

#
#@PHFAST (Correlator)
#
domain  = @PHFAST
orient  = landscape

###
### Refer to section 2.3
###
thing   = LTA protocol
desc    = concerns changes to LTA protocol for TFB commanding
    as described in @sec 2.3 of @swreq
nick    = LTA

tdefs   = ltatask
path    = none
code    = C++
days    = 7
who     = @Sville

task    = Download Antenna Mask
@ltatask
desc    = @sec 2.3.1. The antenna mask determines which ALMA antennas to include
    in the coherent sum.  The download command communicates 8 bytes to
    the LTA.  The 8 bytes, or 64 bits, correspond to the 64 antenna inputs
    to the correlator.   An antenna input is included in the sum if its
    bit = 1.  Possibly this could be an extension of an the existing
    DOWNLOAD_CONFIGURATION command.
nick    = LTA-mask
needs   = PDR
allows  = LTA-mask-ssint

task    = @LTA-mask @ssint
@ltatask
desc    = do @ssint for the @LTA-mask
nick    = LTA-mask-ssint
allows  = LTA-ssint

task    = Delay of Sum
@ltatask
desc    = summing the antenna signals takes finite processing time, so
    this signal needs to be advanced in time relative to the other antenna
    signals to best calculate the efficiency.  (Delay of sum is a misnomer,
    but it's always been called that.)
issues  = how and where exactly do we do this and is it necessary?
nick    = LTA-sum-delay
needs   = CDR
allows  = LTA-ssint

task    = Study Data flow to Telcal
@ltatask
desc    = the channel average data flows to TelCal only on subscan boundaries
    and these are 2-30s in duration with an overhead of 200-300ms data gap
    between subscans.  Dumps occur every 60ms and Integrations are several
    dumps in duration, but there is no way to get this data to TelCal.
    Plan A is to live with the subscan restriction; this task is to study
    options for a Plan B to allow Integration scale data to flow to TelCal.
    Note that TFB corrections are only non-glitchy at subscan boundaries.
nick    = LTA-subscan-study
needs   = CDR
allows  = DONE

#
# The antenna to be replaced will always be #64.
#
##task    = Antenna Select
##@cortask
##desc    = @sec 2.3.2. Antenna select for CI card (uses sum as an antenna for
##    testing):  In addition to being sent to the PIC card, the 2-bit sum
##    will be fed back to a correlator interface (CI) card.  This allows
##    the sum to be correlated against any set of ALMA antennas as a test
##    feature.  The command is required to cause the CI to use the sum input
##    in place of one of the other antenna inputs already connected to it.
##nick    = LTA-select
##allows  = LTA-select-ssint
##
##task    = @LTA-select @ssint
##@cortask
##desc    = do @ssint for the @LTA-select
##nick    = LTA-select-ssint
##allows  = LTA-ssint

task    = Generate Test Data
@ltatask
desc    = @sec 2.3.3. Generate Test Data:  For testing it is useful to replace
    the normal antenna-sum data stream with a pseudo-random data stream
    whose purpose is to test the interface between the Correlator Card
    sum ports and the PIC card input ports.
nick    = LTA-gendata
needs   = PDR
allows  = LTA-gendata-ssint

task    = @LTA-gendata @ssint
@ltatask
desc    = do @ssint for the @LTA-gendata
nick    = LTA-gendata-ssint
allows  = LTA-ssint

#
# The scale factor is directly computable from the number of antennas
#
##task    = Adjust Scale Factor
##@cortask
##desc    = @sec 2.3.4. Adjust Scale Factor: The scale factor is a multiplier
##    for the antenna sum data, which optimizes the SNR in the two bits
##    transmitted to the PIC card.  Nominally, this factor can be gleaned
##    from the number of antennas being summed (i.e. derived from the
##    antenna mask).  For testing and/or flexibility, an explicit command
##    can be defined.
##nick    = LTA-adjust
##allows  = LTA-adjust-ssint
##
##task    = @LTA-adjust @ssint
##@cortask
##desc    = do @ssint for the @LTA-adjust
##nick    = LTA-adjust-ssint
##allows  = LTA-ssint

task    = LTA @ssint
@ltatask
desc    = @ssint for all new LTA features with existing LTA system
nick    = LTA-ssint
allows  = LTA-sitsim

domain  = @GENERAL
thing   = @TESTB
task    = LTA @sitsim
@testask
desc    = verify the new LTA features with the @VOM and phasing system
nick    = LTA-sitsim
allows  = VOM-ssint-2,MRR


###
### Refer to section 2.4
###
domain  = @PHFAST
thing   = PIC control
desc    = provides support for PIC card in the correlator
    as described in @sec 2.4 of @swreq
nick    = PIC

tdefs   = cortask
path    = none
code    = C++
days    = 7
who     = @Sville,@Hay

task    = Power and Reset
@cortask
desc    = @sec 2.4.1. Power and Reset:  Commands to take the PIC and its
    daughter-board through the necessary power and reset states.
    Following the power-on-reset, the PIC card should be ready to generate
    data packets.
nick    = PIC-reset
needs   = F2F1
allows  = PIC-reset-ssint

task    = @PIC-reset @ssint
@cortask
desc    = do @ssint for the @PIC-reset
nick    = PIC-reset-ssint
allows  = PIC-ssint

task    = Set VDIF Header
@cortask
desc    = @sec 2.4.2. Set VDIF Header:  The data packets generated contain
    a VDIF header that completely defines the data stream.  It includes
    appropriate time-tagging information.  The action of supplying this
    header implies generation of packets at the next TE/PPS and implicitly
    sets the time correctly.
nick    = PIC-vdif
needs   = F2F1
allows  = PIC-vdif-ssint

task    = @PIC-vdif @ssint
@cortask
desc    = do @ssint for the @PIC-vdif
nick    = PIC-vdif-ssint
allows  = PIC-ssint

task    = Data Validity Checks
@cortask
desc    = @sec 2.4.3. Data Invalid/Suspend Packets:  It is possible
    that for short periods of time circumstances within the ALMA system
    may invalidate data and it is desirable to either suspend packet
    generation or to mark the packets as invalid.  The semantics of this
    command could include the number of packets and/or a time period
    over which to drop/mark packets.
nick    = PIC-checks
needs   = F2F1
allows  = PIC-checks-ssint

task    = @PIC-checks @ssint
@cortask
desc    = do @ssint for the @PIC-checks
nick    = PIC-checks-ssint
allows  = PIC-ssint

task    = Implement Test Commands
@cortask
desc    = @sec 2.4.4. Test Commands:  There may be one or more test
    commands (e.g. to analyze test vector generation) that are useful in
    normal operations.  A general test command protocol of
    "do test N with M data bytes of input" where N and M are small
    allows most of what we need: 0 = stop testing, 1 = a sequential
    counter, 2 = generate a pseudorandom stream with provided initial
    state, 3 = check LTA-generated stream and count errors?  et cetera.
nick    = PIC-cmds
needs   = F2F1
allows  = PIC-cmds-ssint

task    = @PIC-cmds @ssint
@cortask
desc    = do @ssint for the @PIC-cmds
nick    = PIC-cmds-ssint
allows  = PIC-ssint

task    = Implement Request for Status
@cortask
desc    = @sec 2.4.5. Request for Status:  The PIC should be monitoring
    a number of things and a request for status can provide power state,
    packet statistics, state statistics on each of the frequency channels,
    timing compliance, and so forth.
nick    = PIC-status
needs   = F2F1
allows  = PIC-status-ssint

task    = @PIC-status @ssint
@cortask
desc    = do @ssint for the @PIC-status
nick    = PIC-status-ssint
allows  = PIC-ssint

task    = PIC @ssint
@cortask
desc    = @ssint for correlator system with completed PIC
nick    = PIC-ssint
allows  = PIC-sitsim

domain  = @GENERAL
thing   = @TESTA
task    = PIC @sitsim
@testask
desc    = verify the new PIC features with the @VOM and phasing system
nick    = PIC-sitsim
allows  = VOM-ssint-1,MRR

###
### Refer to section 2.5
###
##line-37:(Possibly) modify CorrelatorConfiguration structure
##line-38:Modify ObservationControl component
#
domain  = @PHFAST
thing   = Phase Update
desc    = calculates the TFB commands from fast solution and update TFBs
    as described in @sec 2.5 of @swreq
nic     = PuTFB

tdefs   = puptask
path    = none
code    = C++
days    = 7
who     = @Sville

task    = Calculate Fast Corrections
@puptask
desc    = @sec 2.5.1. Apply Fast Time-scale Phase Model:  The phasing
    algorithm is decomposed into fast and slow parts.  The former is a
    simple model which allows the rapid calculation of phase corrections
    and is implemented in the CDP based on commands from TelCal.
nick    = PuTFB-calc
allows  = PuTFB-calc-ssint

task    = @PuTFB-calc @ssint
@puptask
desc    = do @ssint for the @PuTFB-calc
nick    = PuTFB-calc-ssint
allows  = PuTFB-ssint

task    = CDP to CCC data path
@puptask
desc    = Need to create the path for commands to flow from the
    CDP (where the fast timescale calculation is done) to the
    CCC (where the corrections are applied).
nick    = PuTFB-CDP-CCC-path
needs   = CDR
allows  = PuTFB-apply,PuTFB-calc

task    = Apply Fast Corrections
@puptask
desc    = @sec 2.5.2. Apply Phase Corrections: Phase corrections
    determined by the algorithm in the CDP are exported to the CCC
    where commands are issued to the TFB cards to implement the phase
    corrections.  These updates will be performed at the cadence of
    phasing solution intervals.
nick    = PuTFB-apply
allows  = PuTFB-apply-ssint

task    = @PuTFB-apply @ssint
@puptask
desc    = do @ssint for the @PuTFB-apply
nick    = PuTFB-apply-ssint
allows  = PuTFB-ssint

#
# adjusting gains interferes with 2-bit quantization
#
##task    = Apply Digital Gains
##@cortask
##desc    = @sec 2.5.3. Apply Digital Gains: Gains to account for variations
##    in antenna system temperature and gain can be implemented in the TFBs.
##    Antenna information from the TelCal Computer will be exported to
##    the CCC, and appropriate commands issued to the TFB cards.
##nick    = PuTFB-gains
##allows  = PuTFB-gains-ssint
##
##task    = @PuTFB-gains @ssint
##@cortask
##desc    = do @ssint for the @PuTFB-gains
##nick    = PuTFB-gains-ssint
##allows  = PuTFB-ssint

task    = @ssint for completed TFB changes
@puptask
desc    = @ssint for existing system with all TFB changes
nick    = PuTFB-ssint
allows  = PuTFB-sitsim

domain  = @GENERAL
thing   = @TESTA
task    = Phase Update @sitsim
@testask
desc    = verify the new Phase Update features with the @VOM and phasing system
nick    = PuTFB-sitsim
allows  = PHS-sitsim-1

### FIXME: channel average data to Telcal timescale
### Plan A: assume subscan boundaries are fast enough
### Plan B: study what is required to get this data to Telcal
###         on a faster (dump) timescale.

#
#@PHSLOW (TelCal)
#
domain  = @PHSLOW

tdefs   = telcaltask
path    = none
code    = C++
days    = 7
who     = @MPIfR,@ESO

###
### Refer to section 2.6
###
thing   = Phasing System
desc    = Complete the overall design of the phasing system, working out
    the interactions between its internal components and external parts
    of the ALMA system
nick    = PHS

task    = Complete Phasing System Design
@telcaltask
desc    = The TelCal computers support various telescope calibration
    tasks, and consequently have access to most of the information needed
    to support the phasing project.
nick    = PHS-design

task    = Complex Visibility Data
@telcaltask
desc    = @sec 2.6.1. Access to Complex Visibility Data within CDP:
    The solver uses the n(n-1)/2 complex visibilities to solve for (n-1)
    independent antenna phases.
nick    = PHS-visdata
needs   = F2F1
allows  = PHS-icd

task    = WVR Data
@telcaltask
desc    = @sec 2.6.2. Access to WVR Data from WVR System:  When WVR data
    may help reduce antenna phase fluctuations it can be directly applied
    to visibility data before the solving process.
nick    = PHS-wvr
needs   = F2F1
allows  = PHS-icd

task    = Source Model Inputs
@telcaltask
desc    = @sec 2.6.3. Access to Source Model:  The phasing system uses the
    target source as a phasing calibrator, so structure within the source
    on scales resolved by ALMA will contribute to visibility amplitude
    and phase.  A module in the TelCal computer will use a source model
    to predict the contribution to visibilities so that they can be
    removed prior to solving for phase offsets.
nick    = PHS-source
needs   = F2F1
allows  = PHS-icd

task    = Algorithmic Framework
@telcaltask
desc    = Identify the possible algorithms that may be used, prioritizing
    their implementation, and planning for additional schemes to be
    implemented based on learning during the project.
nick    = PHS-algorithms
allows  = PHS-design
needs   = PDR

task    = Phase ICDs
@telcaltask
desc    = complete the ICDs between the TelCal phasing system, the
    correlator components and the @VOM.
nick    = PHS-icd
needs   = PHS-design

##line-41:Phase updates
##line-42:ICD definition
##line-43:Development of new commands
##line-44:Development of high level control routines
##line-45:Monitoring configuration and testing
##line-46:Alarm configuration and testing
##line-47:Modifications in the correlator simulator
##line-48:Modification in CDP Node components
##line-49:Subsystem integration & testing
##line-50:System integration & testing in simulation
##line-51:System integration & testing with hardware

task    = External modifications for @PHS
@telcaltask
desc    = do the coding for any changes to external components required
    by the phasing system (which are not captured elsewhere).
nick    = PHS-external
needs   = PHS-icd
allows  = PHS-ssint-1

task    = Implement @PHS simulation classes
@telcaltask
desc    = do the coding for the @PHS simulation classes.  This is dominated
    by the new commanding and @VOM control routines, with the real work
    placed in the components.
nick    = PHS-simcode
needs   = PHS-icd

task    = Implement @PHS classes
@telcaltask
desc    = do the coding for the @PHS classes.  This is dominated
    by the new commanding and @VOM control routines, with the real work
    placed in the components.
nick    = PHS-code
needs   = PHS-simcode
allows  = PHS-ssint-1

task    = @PHS @mctest
@telcaltask
desc    = @mctest for the @PHS
nick    = PHS-mctest
needs   = PHS-ssint-1

task    = @PHS @actest
@telcaltask
desc    = @actest for the @PHS
nick    = PHS-actest
needs   = PHS-ssint-1

task    = @PHS @ssint, phase 1
@telcaltask
desc    = @ssint for the @PHS, phase 1
nick    = PHS-ssint-1

task    = @PHS @ssint, phase 2
@telcaltask
desc    = @ssint for the @PHS, phase 2
nick    = PHS-ssint-2
needs   = PHS-mctest,PHS-actest

domain  = @GENERAL
thing   = @TESTA
task    = @PHS @sitsim, phase 1
@testask
desc    = @sitsim for the @PHS
nick    = PHS-sitsim-1
needs   = PHS-ssint-1
allows  = VOM-ssint-1

task    = @PHS @sitsim, phase 2
@testask
desc    = @sitsim for the @PHS
nick    = PHS-sitsim-2
needs   = PHS-ssint-2
allows  = VOM-sitsim

thing   = @TESTB
task    = @PHS @sitwhw
@testask
desc    = @sitwhw for the @PHS
nick    = PHS-sitwhw
needs   = VOM-sitsim
allows  = VOM-sitwhw


###
### Refer to section 2.7.1
###
domain  = @PHSLOW
thing   = Source Modeler
@telcaltask
desc    = @sec 2.7.1. Source Modeler:  The details of the source model are
    provided by the VOM and used to calculate slow time-scale phase
    changes in the visibilites which need to be subtracted from
    the solution.  Its inputs are UTC, antenna positions, source
    model/position, and observing frequency.  The output is a set of
    model visibilities and appropriate time tag.
nick    = Source

task    = Implement point-source Modeler classes
@telcaltask
desc    = do the coding for a point source, which is pretty trivial but
    nevertheless forms a basis for all other models (real or simulated).
nick    = Source-point
needs   = PHS-design
allows  = Source-ssint

task    = Implement general source Modeler classes
@telcaltask
desc    = do the coding for more general models as is to be established.
nick    = Source-general
needs   = PHS-sitsim-1
allows  = PHS-sitsim-2

task    = @Source @ssint
@telcaltask
desc    = do the @Source @ssint
nick    = Source-ssint
allows  = PHS-sitsim-1


###
### Refer to section 2.7.2
###
thing   = Phase Solver
@telcaltask
desc    = @sec 2.7.2. Phase Solver:  This task actually solves for the
    phase and works out the fast-time-scale operator to send to the LTA.
    This operator is basically a matrix operator on the the baseline phases
    to produce antenna phase adjustments.  It may have a simple (e.g. linear)
    time evolution.
nick    = Solver

task    = Implement @Solver simulation
@telcaltask
desc    = do the coding to simulate the @Solver
nick    = Solver-simcode
needs   = PHS-design
allows  = Solver-point

task    = Implement @Solver for point source case
@telcaltask
desc    = do the coding for the @Solver when the source has no structure.
nick    = Solver-point
needs   = Solver-simcode

task    = @Solver @ssint
@telcaltask
desc    = do the @ssint for the @Solver
nick    = Solver-ssint
needs   = Solver-point
allows  = PHS-sitsim-1

task    = Implement @Solver for general case
@telcaltask
desc    = do the coding for the @Solver when the @Source provides a more
    complicated object.  (The details are hidden from the @Solver.)
nick    = Solver-general
needs   = PHS-sitsim-1
allows  = PHS-sitsim-2


###
### Refer to section 2.7.3
###
thing   = Phase Commander
desc    = @sec 2.7.3. Phase Commander:  2.7.3. This task is responsible for
    sending the fast-time-scale operator data to the phase update component.
nick    = Commander

task    = Implement @Commander simulation
@telcaltask
desc    = do the coding to simulate @Commander
nick    = Commander-simcode
needs   = PHS-design
allows  = Commander-code


task    = Implement @Commander
@telcaltask
desc    = do the coding for the @Commander
nick    = Commander-code

task    = @Commander @ssint
@telcaltask
desc    = do the @ssint for the @Commander
nick    = Commander-ssint
needs   = Commander-code
allows  = PHS-sitsim-1

### FIXME: @Commander & TFB handshaking testing

###
### Refer to section 2.7.4
###
thing   = Efficiency Monitor
desc    = @sec 2.7.4. Efficiency Monitor:  The correlation of the phase
    against the comparison antenna is available and can be examined to
    determine and report the efficiency of the phase solution that is
    being applied.  (This correlation should scale with the number of
    antennas in a known way.)
nick    = Efficiency

task    = Implement @Efficiency simulator
@telcaltask
desc    = do the coding for an @Efficiency simulator
nick    = Efficiency-simcode
needs   = PHS-sitsim-1
allows  = Efficiency-code

task    = Implement @Efficiency
@telcaltask
desc    = do the coding for an @Efficiency
nick    = Efficiency-code
allows  = PHS-sitsim-2


#
#@POST
#
domain  = @POST

# 2.15.1. Achive Support:  No enhancements to the ALMA archiver are
# anticipated, but the ALM A phasing team will need to develop miscellaneous
# scripts to extract and analyze ALMA data captured during VLBI sessions.
thing   = Archive Support
desc    = concerns things related to non-baseband data
            (presumably data extracted from the archive)
nick    = ArchSup

tdefs   = archtask
path    = none
code    = Other
days    = 7
who     = @Hay

task    = Design @ArchSup
@archtask
desc    = identify and design support scripts or code (if any) that are
            needed to support the phasing project
nick    = ArchSup-design
needs   = CDR
allows  = ArchSup-code

task    = Implement @ArchSup
@archtask
desc    = code these archive support items
nick    = ArchSup-code

domain  = @GENERAL
thing   = @TESTO
task    = Test @ArchSup
@archtask
desc    = test these archive support items.
nick    = ArchSup-test
needs   = ArchSup-code
allows  = OBS1


# 2.15.2. DiFX Enhancements:  The DiFX software correlator may require
# minor enhancements in order to correlate ALMA data.
domain  = @POST
thing   = DiFX Enhancements
desc    = concerns things DiFX needs to do to support ALMA VLBI observations
nick    = DiFX

tdefs   = difxtask
path    = none
code    = Other
days    = 7
who     = @ASIAA

task    = Study @DiFX with numerical simulations
@difxtask
desc    = Study the problem with numerically simulated data and gain experience
    running DiFX correlations on the Haystack correlator.  Learn the layout
    of the current DiFX tree and become familiar with the relevant pieces.
    (Task1 of asiaa.txt.)
notes   = asiaa.txt
nick    = DiFX-study
needs   = F2F1
allows  = DiFX-identify

task    = Identify changes to @DiFX
@difxtask
desc    = Identify areas where DiFX needs to be modified to correlate correctly.
    Identify areas where DiFX could be made to opererate more efficiently.
    Identify "supported" operational modes.  (I.e. we will need to have
    code that identifies correlation setups that we choose not to perform.)
    These changes can be made either through changes to the existing DiFX
    code set, branches to that code set, or additional software.
    (Task2 of asiaa.txt.)
notes   = asiaa.txt
nick    = DiFX-identify
needs   = DiFX-study
allows  = DiFX-plan

task    = Develop plan for @DiFX
@difxtask
desc    = Develop the plan for the enhancements to DiFX.  Note that
    it is quite likely that various DiFX experts will need to be involved
    in the work, and the level of effort on both sides needs to be arranged.
    (Task3 of asiaa.txt.)
notes   = asiaa.txt
nick    = DiFX-plan
needs   = DiFX-identify
allows  = DiFX-upgrade

task    = Plan Haystack upgrade
@difxtask
desc    = Characterize the processing load so that it is possible to specify
    requirements for upgrades to hardware (compute nodes and fabric) of
    the Haystack DiFX correlator.  Assist with the Haystack correlator upgrade.
    (Task4 of asiaa.txt; Task 5 of asiaa.txt is part of HayCorr-assemble.)
notes   = asiaa.txt
nick    = DiFX-upgrade
allows  = HayCorr-purchase

task    = Implement essential @DiFX
@difxtask
desc    = this task is a placeholder for the eventual work.   It focusses on
    the essential functionality required to correlate ALMA VLBI data.
    (Task6 of asiaa.txt.)
notes   = asiaa.txt
nick    = DiFX-essential
needs   = DiFX-plan
allows  = DiFX-convenient

task    = Implement convenient @DiFX
@difxtask
desc    = this task is a placeholder for the eventual work.  It focusses on
    that functionality which makes it convenient to correlate ALMA VLBI data.
    (Task6 of asiaa.txt.)
notes   = asiaa.txt
nick    = DiFX-convenient
needs   = DiFX-essential
allows  = DONE

task    = Document @DiFX
@difxtask
desc    = documents the DiFX effort, starting with study memos, the
    development plan and ultimately the usage notes.
    (Task7 of asiaa.txt.)
notes   = asiaa.txt
nick    = DiFX-document
needs   = DiFX-plan
allows  = DONE

domain  = @GENERAL
thing   = @TESTO
task    = Test essential DiFX enhancements
@difxtask
desc    = Test that the essential DiFX enhancements are adequate
    to process ALMA VLBI data at Haystack
nick    = DiFX-test
needs   = DiFX-essential
allows  = OBS1


domain  = @POST
# 2.15.3. HOPS/AIPS Enhancements: Minor enhancements to these software
# packages may be needed.
thing   = HOPS Enhancements
desc    = concerns things HOPS needs to do to support ALMA VLBI observations
nick    = HOPS

tdefs   = hopstask
path    = none
code    = Other
days    = 7
who     = @Hay

task    = Design @HOPS
@hopstask
desc    = determine what HOPS enhancements are required
nick    = HOPS-design
allows  = HOPS-code,CASA-design

task    = Implement @HOPS
@hopstask
desc    = make the HOPS changes.  (Realistically, this is work with
            the HOPS team to get the changes implemented.)
nick    = HOPS-code
allows  = HOPS-test

domain  = @GENERAL
thing   = @TESTO
task    = Test @HOPS changes
@hopstask
desc    = test the HOPS changes.
nick    = HOPS-test
allows  = OBS2,CASA-test


# 2.15.4. CASA Enhancements:  Some of the HOPS/AIPS capabilities could
# be ported to CASA as needed.
domain  = @POST
thing   = CASA Enhancements
desc    = concerns things CASA needs to do to support ALMA VLBI observations
nick    = CASA

tdefs   = casatask
path    = none
code    = Other
days    = 0
who     = @Hay

task    = Design @CASA
@casatask
desc    = determine what CASA enhancements are required
nick    = CASA-design
allows  = CASA-code

task    = Implement @CASA
@casatask
desc    = make the CASA changes.  (Realistically, this is work with
            the CASA team to get the changes implemented.)
nick    = CASA-code
allows  = CASA-test

domain  = @GENERAL
thing   = @TESTO
task    = Test @CASA changes
@casatask
desc    = test the CASA changes.
nick    = CASA-test
allows  = OBS3


# 2.15.5. Polarization:  The ALMA receivers are linearly polarized,
# whereas the norm for VLBI is circular polarization.  This topic needs
# to be thoroughly studied and recommendations made for (a) observations
# that could be made before, after or during the VBLI session to assist in
# the (b) additional analysis which much be carried out to fully analyze
# the data.
domain  = @POST
thing   = Polarization
desc    = issues associated with ALMA linear v VLBI circular polarization
nick    = Polar

tdefs   = polartask
path    = none
code    = none
days    = 7
who     = @MPIfR,@UCon,@NAOJ

task    = Polarization Strategy
@polartask
desc    = study the polarization issue, considering things that can be
            done in the observation phase as well as the analysis phase
            and summarize the results in a white paper
nick    = Polar-strategy
needs   = F2F1
allows  = Polar-data,HOPS-design

task    = Beacon Design Input
@polartask
desc    = if the beacon project can accept input, or if we can build our
    own beacon, this is the place to work on it
nick    = Polar-beacon
needs   = Polar-strategy
allows  = DONE

task    = Polarization Observational Data
@polartask
desc    = depending on the polarization study results, this task expands to
            cover the work needed to support special polarization observations
            or calibration activites that are needed during observations
nick    = Polar-data
allows  = Polar-analysis

task    = Polarization Analysis
@polartask
desc    = depending on the polarization study results this task expands to
            those tasks which need to be completed by the phasing team which
            pertain to analyzing the polarization that may be taken.
nick    = Polar-analysis
allows  = OBS2


TAIL = stop reading here

#
# eof
#
