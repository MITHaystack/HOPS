file   = MHO_task_0400.txt
domain = @DOCS

thing  = @ProjPlan
task   = Write the pre-award project plan for SAO and NSF.
nick   = ProjPlan-preaward
@etask
desc   = Write and submit the initial pre-award plan.
         This document contained first-draft material for all of
         the subsequent documents, but left many decisions left open.
         We shall not follow the formal traceability (a bunch of useless
         arrows, but from this document flows the Requirements, the
         Coverage and Test plan, and the software development plan and
         the specifications (partial and completed).
#start  = @tEARLY
#stop   = @tSTART
needs  = Miles-early

task   = Capture initial project plan in the new repo
nick   = ProjPlan-capture
@gentask
desc   = The initial founding document and sources should be captured
         for posterity; probably as a tarball along with the fourfit
         manual that Roger Cappallo wrote and the first thoughts on
         the specifications for a new HOPS.
allows = Manuals-fourfit

thing  = @ReqsDoc
task   = Create first draft of @ReqsDoc
nick   = ReqsDoc-draft
@etask
desc   = Draft the requirements document
#start  = @tDSTRT
#days  = 365
needs  = Meetings-refining

task   = Submit first draft of @ReqsDoc to the ngEHT
nick   = ReqsDoc-submit
@etask
desc   = Submit draft to ngEHT for feedback
needs  = ReqsDoc-draft
#allows = Meetings-review

task   = Revise first draft of @ReqsDoc
nick   = ReqsDoc-revise
@etask
desc   = Respond to review and finalize requirements
needs  = Meetings-review


thing  = @CoTestDoc

task   = Create first draft of @CoTestDoc
nick   = CoTestDoc-draft
@etask
desc   = Begin drafting the coverage and testing document
needs  = ReqsDoc-draft

task   = Submit first draft of @CoTestDoc
nick   = CoTestDoc-submit
desc   = Submit the first revision to the ngEHT
needs  = CoTestDoc-draft
#allows = Meetings-review

task   = Revise the first draft of @CoTestDoc
nick   = CoTestDoc-revise
desc   = Revise the testing document based on feedback at the
         review (none, essentially) and the maturity of other
         documents and the state of the repository
needs  = CoTestDoc-submit,SDPlanDoc-draft

task   = Finalize @CoTestDoc
nick   = CoTestDoc-final
desc   = Final steps to complete the document and call it done.
         The remainder of coverage and test information is in
         the automatically built reports.
needs  = CoTestDoc-revise
#allows = Miles-docsfinal


thing  = @SpecsDoc

task   = Create first draft of @SpecsDoc
nick   = SpecsDoc-draft
@etask
desc   = Start writing the specifications document.  The first
         part was to gather up the information from the original
         plan and the original specification draft and get it into
         the standard template used by the other docs.
needs  = Meetings-review

task   = Update draft of @SpecsDoc
nick   = SpecsDoc-update
desc   = Update the @SpecsDoc.  The updates flow from the prototyping
         exercises as well as the steps of building up the infrastructure,
         build machinery, &c.  More detail here... and perhaps more tasks
         listing what is still to be done with it....
needs  = SpecsDoc-draft

task   = Maturize the @SpecsDoc
nick   = SpecsDoc-mature
desc   = Maturize the @SpecsDoc.  This means going through the document
         and identifying the remaining specifications that are still,
         well, unspecified.
needs  = SpecsDoc-update
#allows = Miles-docsfinal

task   = Finalize the @SpecsDoc
nick   = SpecsDoc-final
desc   = This marks the completion of @SpecsDoc.  After this documentation
         is done except for the final set (user manuals, &c).
needs  = SpecsDoc-mature

thing  = @SDPlanDoc

task   = Create first draft of @SDPlanDoc
nick   = SDPlanDoc-draft
@etask
desc   = Write @SDPlanDoc
needs  = Meetings-review

task   = Update first draft of @SDPlanDoc
nick   = SDPlanDoc-update
@etask
desc   = This was not submitted for review, but the document should
         be updated and finalized with a goal towards finishing a plan.
         Once the tasking system is able to build Gantt charts, then
         such may be included in @SDPlan to close out the plan.
needs  = SDPlanDoc-draft,Tasking-gantt

task   = Finalize @SDPlanDoc
nick   = SDPlanDoc-final
@etask
desc   = Finalize the @SDPlanDoc
needs  = SDPlanDoc-update,Tasking-final
#allows = Miles-docsfinal


thing  = @Tasking

task   = Import APP bubble system and de-APPify it
nick   = Tasking-import
desc   = remember how the sw_task*pl scripts work and set up a framework
needs  = Meetings-review

task   = Populate with enough bubbles to get started
nick   = Tasking-populate
@gentask
desc   = This will end up as an on-going task, but we need to get the ball
         rolling downhill...and then we can just use the tool
needs  = Tasking-import

task   = Build PlantUML gantt charts from the things
nick   = Tasking-gantt
@pytask
desc   = Capture the timeline, and names and generate gantt charts
needs  = Tasking-populate

task   = Build a document capturing all of the graphics
nick   = Tasking-draftdoc
@shtask
desc   = This is a few words of tex and the the scripting to build the doc
         automatically.
needs  = Tasking-gantt

task   = Finalize @Tasking
nick   = Tasking-final
@etask
desc   = Final cleanup of the document.  At this point, the automated
         builds should keep it up to date into an "as built" record.
needs  = Tasking-draftdoc


thing  = @Manuals

task   = Fourfit User Manual
nick   = Manuals-fourfit
@etask
desc   = write a fourfit user manual
allows = Meetings-final

task   = Aedit User Manual
nick   = Manuals-aedit
desc   = write aedit user manual
allows = Meetings-final

# eof
