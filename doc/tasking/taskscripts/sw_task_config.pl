#!/usr/bin/perl
#
use warnings;           # turns on optional warnings
use diagnostics;        # and makes them not terse
use strict;             # makes unsafe constructs illegal
#
# Allows customization of things that are too detailed for the command line.
# This file sets the defaults for everything.  You can make a copy and then
# (within reason make the changes you like).
#

# these default to 1995-10-10 and 2050-07-13 which are round numbers for MJD
our ($gBegin,$gEnd) = (50000,70000);

# this shows up in labels, but logic depends on it.
our $depends = '--depends--';

# TB: top-to-bottom or LR: left-to right ranking
our $graph_rankdir = 'TB';

# it is convenient to collectt the orientations in a list
our @orientation;
# orientation dot commands for 'portrait'
$orientation[0] = "rotate=0\nsize=\"45,60\"\n";
# orientation dot commands for 'landscape'
$orientation[1] = "rotate=90\nsize=\"60,45\"\n";
# orientation of legend ('portrait' or 'landscape')
$orientation[2] = 'portrait';
# orientation of ALL plot
$orientation[3] = 'portrait';

# controls to run dot or not (sw_tasks.pl).
our $rundot = 1;

# controls whether a legend figure is made (sw_tasks.pl)
our $makelegend = 1;

# control node labels (sw_task_graph.pl): 1 for full names 0 for nicknames
our $fullnames = 0;

# skip generated needs/allows (sw_task_graph.pl)
our $skipneedsallows = 0;
our $concentrate;           # dot will combine needs and allows arrows or not
our $edge_needs_clr;        # color for 'needs' edge
our $edge_allows_clr;       # color for 'allows' edge
if ($skipneedsallows) {
    $concentrate = 'false';
    $edge_needs_clr = 'red';
    $edge_allows_clr = 'blue';
} else {
    $concentrate = 'true';
    $edge_needs_clr = 'black';
    $edge_allows_clr = 'black';
}

# this will turn on some MJD data calculation debugging if nonzero
our $debugmjdupdates = 1;

# these controls then maximum number of iterations to adjust dates
our $maxtimelinepasses = 30;
our $maxtimelineestimates = 4;

# automatically update done %-age if nonzero, otherwise use input values
# updates are only applied to done values that are 0, -> 100% if in the
# past, and are calculated if the current date is within start/stop
our $allowautodone = 1;

# change shapes based on errors, flex and done
our $heuristicshapes = 1;

# latex support.  UML gantt is generated by a subsequent script
our $latexfigures = 1;          # generate the figures
our $latextables = 1;           # generate the tables
our $latexflowcharts = 1;       # generate flowcharts (Gantt)
our $latexinputs = 1;           # generate the input files
our $latexfile = 'taskage.tex'; # something to include in a latex document

# if $latexgantage is enabled, our $flowcharter is used to generate gantt
# charts (or whatever you want the figure to be -- infinite complexity here)
# as long as it produces one figure.  The script likely has arguments
our $flowcharterargs = '-p OUTPUT -n NICK -s flo -d DOTDEV';
# and does the obvious substitutions in this string.

# this is a library module, so it needs to return TRUE.
1;
#
# eof
#
