#!/bin/bash
#
# for the automake preparations
#
[ -f README.md ] || {
    echo this script must be executed in the git source directory
    echo or in the directory created created by tar
    exit 1
}
nuke=${1-'false'}
halt=${2-'false'}
chkn=${3-'false'}
vers=${4-'none'}
mopt=${5-''}
[ "$nuke" = "--version" ] && echo &&
    echo '  'this script is version-less... && nuke=help
[ "$nuke" = 'help' -o "$nuke" = '--help' ] && cat <<\EOF

    Usage: autogen.sh [false|true] [false|true] [false|true] [version] [-k]

    If true, the first boolean (nuke?) will remove previous built files.
    If true, the second boolean (halt?) will then stop the script.
    If true, the third boolean (chkn?) only tells you how to proceed.
    If a fourth, "version" argument, is supplied a full build follows.
    If you have all that, you can add a final make option argument.

    For a more complete explanation, do

        ./autogen.sh details
        ./autogen.sh data

EOF
[ "$nuke" = 'data' ] && cat <<\EOF

    To access data for some of the tests, you need to set several
    environment variables as described in data/README.txt:

    export MHO_REGRESSION_DATA=path-to-data
    export MHO_REGRESSION_EXTRACT=true|false
    export MHO_REGRESSION_TIDY=true|false

    Normally you will want to rsync/wget MHO_REGRESSION_DATA from
    Haystack and set MHO_REGRESSION_EXTRACT=true (unpack tarballs
    as needed) and MHO_REGRESSION_TIDY=false (leave them available).
EOF
[ "$nuke" = 'details' ] && cat <<\EOF

    By default the script (re)configures the autotools in the source
    directory.  After running this script you may change to some build
    directory, configure, make all, make check and make install as normally.
    A final make installcheck can be used to verify the installation.

    To do it all (building in ../ambld-<version>-lazy) from git src:

        git clone https://github.mit.edu/barrettj/hops-git.git
        cd hops-git
        ./autogen.sh true  false false lazy
    
    or from the tarball (* = the version):

        tar zxf mhops-*.tar.gz
        cd mhops-*
        ./autogen.sh false false true  std

    export HOPS_CONFIGURE_ARGS='...' to pass arguments to configure.

    For example, with older g++ CXXFLAGS=-std=c++11 is required, so

        HOPS_CONFIGURE_ARGS='CXXFLAGS=-std=c++11 ...' ./autogen.sh ...

    (Actual environment variables can also just be set, but this
    allows setting --enable-* --disable-* type configure arguments.)

    If the version argument includes 'dist' then a tarball is
    created, checked with make distcheck, and saved, after which
    the build directory is removed as you don't need it.

    If a build was requested, a short summary report of errors is
    provided with:

        m4/nightlyerr.pl ../ambld-4.00-$vers/make.log 

    Other files to look at for errors are:

        config.summary      a summary from configuration
        configure.log       output of configure
        config.log          configure's detailed log
        make.log            output from make

    If there is a fifth argument, it is passed as an option to 'make'.

EOF
[ "$nuke" = help -o "$nuke" = '--help' ] && exit 0
[ "$nuke" = details ] && exit 0

# check the rest of the arguments
[ "$nuke" = "true" -o "$nuke" = "false" ] ||
    { echo nuke must be true or false; exit 2; }
[ "$halt" = "true" -o "$halt" = "false" ] ||
    { echo halt must be true or false; exit 3; }
[ "$chkn" = "true" -o "$chkn" = "false" ] ||
    { echo chkn must be true or false; exit 4; }
[ "$vers" = 'none' ] && doit=false || doit=true

# things found by find that should not be removed
savethem="hops_config.h.in
          doc/reference/hops.doxygen.in
          source/bash_src/hops.bash.in
          source/python_src/scripts/test.py.in
          source/python_src/setup.py.in
"

# process nuke
echo
$nuke && echo removing autogenerated source targets
$nuke && rm -rf autom4te.cache configure \
        aclocal.m4 config.guess config.sub \
        compile depcomp install-sh ltmain.sh missing \
        autoscan.log configure.scan mho_config.h.in~ \
        py-compile test-driver \
        m4/lt~obsolete.m4 m4/ltoptions.m4 \
        m4/ltsugar.m4 m4/ltversion.m4 m4/libtool.m4
$nuke && for it in $savethem ; do mv $it $it.save ; done
$nuke && for it in `find . -name \*.in` ; do rm -f $it ; done
$nuke && for it in $savethem ; do mv $it.save $it ; done
$halt && exit 0

# talk about or run autotools
$chkn && eko='echo' || eko='eval'
$chkn && {
    echo
    echo \# Echo mode: the following commands configure the source
    echo \# directory to enable building in some other directory.
    echo \# You should not need to do these from the tarball distribution
}
echo
force='--force'
forcemissing='--force-missing'
$eko libtoolize $force
$eko aclocal $force -I m4
$eko autoconf $force
$eko autoheader $force
$eko automake --add-missing $forcemissing
$chkn && {
    echo \# Echo mode: the following help is only useful after
    echo \# actually executing this script in evaluation mode,
    echo \# or if you have unpacked the tarball distribution.
}

# generate a local version string
VERSION=`grep AC_INIT configure.ac | tr -d '][,' | cut -d' ' -f2`
[ x"$vers" = xnone -o -z "$vers" ] && version=$VERSION ||
    version=$VERSION-$vers

# finally talk about, or actually build, and a distro too?
echo
$doit && [ `expr "x$vers" : "x.*dist.*"` -gt 1 ] && dist=true || dist=false
$doit && [ `expr "x$vers" : "x.*dist.*"` -gt 1 ] && dist=true || dist=false
$dist && echo making a distribution with $version

$doit || cat <<EOF
  Now continue in a build directory, canonically:

    version=$version
    configure=`pwd`/configure
    mkdir ../ambld-\$version
    cd ../ambld-\$version
    \$configure \$HOPS_CONFIGURE_ARGS
    make $mopt all check install installcheck

  for help with configuration use:

    \$configure --help=short
EOF
$doit && rm -rf ../ambld-$version
$doit && {
    $chkn && echo \# this is what we would do if we were not chicken ||
    echo proceeding to configure and build in ../ambld-$version
    cwd=`pwd`
    $eko configure=\`pwd\`/configure
    $eko rm -rf ../ambld-$version
    $eko mkdir ../ambld-$version
    $eko cd ../ambld-$version
    $eko $configure $HOPS_CONFIGURE_ARGS \> configure.log  2\>\&1 
    $eko 
    $ckkn ||
    echo make $mopt all check install installcheck \> make.log
    $eko make $mopt all check install installcheck \> make.log  2\>\&1 
    $dist && {
        rm -f mhops-$VERSION.tar.gz
        logs="configure.log make.log distcheck.log"
        $eko make distcheck \> distcheck.log  2\>\&1 
        tarball=`ls *.tar.gz`
        [ -f "$tarball" ] &&
            echo distcheck created "'$tarball'" &&
            for l in $logs $tarball ; do mv $l $cwd ; done &&
            echo removing the build directory ../ambld-$version &&
            cd $cwd && rm -rf ../ambld-$version &&
            echo done.
    } || {
        echo Summary from configure is in ../ambld-$version/config.summary
        echo Log from the build is in ../ambld-$version/make.log
        echo =============================================================
        echo Summary from build log:
        $eko $cwd/m4/nightlyerr.pl make.log
        echo =============================================================
    }
    $eko
}
#
# eof
#
