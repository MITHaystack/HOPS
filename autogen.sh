#!/bin/bash
#
# for the automake preparations
#
[ -f README.md ] || {
    echo this script must be executed in the git source directory
    echo or in the directory created created by tar
    exit 1
}
nuke=${1-'false'}
halt=${2-'false'}
chkn=${3-'false'}
vers=${4-'none'}
[ "$nuke" = "--version" ] && echo &&
    echo '  'this script is version-less... && nuke=help
[ "$nuke" = 'help' -o "$nuke" = '--help' ] && cat <<\EOF

    Usage: autogen.sh [false|true] [false|true] [false|true] [version]

    If true, the first boolean (nuke?) will remove previous built files
    If true, the second boolean (halt?) will then stop the script
    If true, the third boolean (chkn?) only tells you how to proceed.
    If a fourth, "version" argument, is supplied a full build follows.

    By default the script (re)configures the autotools in the source
    directory.  After running this script you may change to some build
    directory, configure, make all, make check and make install as normally.
    A final make installcheck can be used to verify the installation.

    To do it all (building in ../ambld-<version>-lazy) from git src:

        git clone https://github.mit.edu/barrettj/hops-git.git
        cd hops-git
        ./autogen.sh true  false false lazy
    
    or from the tarball (* = the version):

        tar zxf mhops-*.tar.gz
        cd mhops-*
        ./autogen.sh false false true  std

    export HOPS_CONFIGURE_ARGS='...' to pass arguments to configure.

    If the version argument includes 'dist' then a tarball is
    created, checked with make distcheck, and saved, after which
    the build directory is removed as you don't need it.

EOF
[ "$nuke" = help -o "$nuke" = '--help' ] && exit 0

# check the rest of the arguments
[ "$nuke" = "true" -o "$nuke" = "false" ] ||
    { echo nuke must be true or false; exit 2; }
[ "$halt" = "true" -o "$halt" = "false" ] ||
    { echo halt must be true or false; exit 3; }
[ "$chkn" = "true" -o "$chkn" = "false" ] ||
    { echo chkn must be true or false; exit 4; }
[ "$vers" = 'none' ] && doit=false || doit=true

# process nuke
$nuke && echo removing autogenerated source targets
$nuke && rm -rf autom4te.cache configure \
        aclocal.m4 config.guess config.sub \
        compile depcomp install-sh ltmain.sh missing \
        autoscan.log configure.scan mho_config.h.in~ \
        m4/lt~obsolete.m4 m4/ltoptions.m4 \
        m4/ltsugar.m4 m4/ltversion.m4 m4/libtool.m4
$halt && exit 0

# talk about or run autotools
$chkn && eko='echo' || eko='eval'
$chkn && {
    echo
    echo \# Echo mode: the following commands configure the source
    echo \# directory to enable building in some other directory.
    echo \# You should not need to do these from the tarball distribution
}
force='--force'
forcemissing='--force-missing'
$eko libtoolize $force
$eko aclocal $force -I m4
$eko autoconf $force
$eko autoheader $force
$eko automake --add-missing $forcemissing
$chkn && {
    echo \# Echo mode: the following help is only useful after
    echo \# actually executing this script in evaluation mode,
    echo \# or if you have unpacked the tarball distribution.
}

# generate a local version string
VERSION=`grep AC_INIT configure.ac | tr -d '][,' | cut -d' ' -f2`
[ x"$vers" = xnone ] || version=$VERSION-$vers

# finally talk about, or actually build, and a distro too?
$doit && [ `expr "x$vers" : "x.*dist.*"` -gt 1 ] && dist=true || dist=false
$doit && [ `expr "x$vers" : "x.*dist.*"` -gt 1 ] && dist=true || dist=false
$dist && echo making a distribution

$doit || cat <<EOF

    Now continue in a build directory, canonically:

    version=$version

    configure=`pwd`/configure
    mkdir ../ambld-\$version
    cd ../ambld-\$version
    \$configure \$HOPS_CONFIGURE_ARGS

    make all check install installcheck

    for help with configuration use:

    \$configure --help=short
EOF
$doit && rm -rf ../ambld-$version
$doit && {
    $chkn && echo \# this is what we would do if we were not chicken ||
    echo proceeding to configure and build
    cwd=`pwd`
    $eko configure=\`pwd\`/configure
    $eko mkdir ../ambld-$version
    $eko cd ../ambld-$version
    $eko $configure $HOPS_CONFIGURE_ARGS \> configure.log  2\>\&1 
    $eko 
    $eko make all check install installcheck \> make.log  2\>\&1 
    $eko 
    $dist && {
        rm -f mhops-$VERSION.tar.gz
        logs="configure.log make.log distcheck.log"
        $eko make distcheck \> distcheck.log  2\>\&1 
        tarball=`ls *.tar.gz`
        [ -f "$tarball" ] &&
            echo distcheck created "'$tarball'" &&
            for l in $logs $tarball ; do mv $l $cwd ; done &&
            echo removing the build directory ../ambld-$version &&
            cd $cwd && rm -rf ../ambld-$version &&
            echo done.
    }
    $eko
}
#
# eof
#
