#!/bin/bash
#
# for the automake preparations
#
[ -f README.md ] || {
    echo this script must be executed in the git source directory
    exit 1
}
nuke=${1-'false'}
halt=${2-'false'}
chkn=${3-'false'}
$chkn && eko='echo' || eko=''

[ "$nuke" = 'help' -o "$nuke" = '--help' ] && cat <<\EOF

    Usage: autogen.sh [false|true] [false|true] [false|true]

    if true, the first boolean (nuke?) will remove previous built files
    if true, the second boolean (halt?) will stop the script
    if true, the third boolean echoes, rather evaluates the commands

    by default the script (re)configures the autotools in the source
    directory.  After running this script change to a build directory,
    configure, make, make check and make install as normally.

EOF
[ "$nuke" = help -o "$nuke" = '--help' ] && exit 0

$nuke && echo removing autogenerated source targets
$nuke && rm -rf autom4te.cache configure \
        aclocal.m4 config.guess config.sub \
        compile depcomp install-sh ltmain.sh missing \
        autoscan.log configure.scan mho_config.h.in~ \
        m4/lt~obsolete.m4 m4/ltoptions.m4 \
        m4/ltsugar.m4 m4/ltversion.m4 m4/libtool.m4
$halt && exit 0

$chkn && {
    echo
    echo \# echo mode: the following commands configure the source
    echo \# directory to enable building in some other directory
}
force='--force'
forcemissing='--force-missing'
$eko libtoolize $force
$eko aclocal $force -I m4
$eko autoconf $force
$eko autoheader $force
$eko automake --add-missing $forcemissing
$chkn && {
    echo \# echo mode: the following help is only useful after
    echo \# actually executing this script in evaluation mode
    echo
}

VERSION=`grep AC_INIT configure.ac | tr -d '][,' | cut -d' ' -f2`
cat <<EOF

    Now continue in a build directory, canonically:

    VERSION=$VERSION

    mkdir ../ambld-\$VERSION
    cd ../ambld-\$VERSION
    `pwd`/configure

    make all check install

    for help with configuration use:

    ../configure --help=short
EOF
#
# eof
#
