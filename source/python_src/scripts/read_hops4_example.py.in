#!@PY_EXE@
#
# demo for HOPS4 object retrieval using python interface
#
import pyMHO_Containers
import os
import sys
import argparse

def dump_data(file_data):
    if file_data != None:
        n_obj = file_data.get_nobjects()
        obj_info = file_data.get_object_id_list()
        print("object info is:", obj_info)
        uuid = ""
        for object_record in obj_info:
            if "shortname" in object_record:
                sname = object_record["shortname"]
                #if it is not a 'tags' object it is going to be a table container of some sort
                if sname != "tags": 
                    print("----------------------------------------------------")
                    print("located a table container object with shortname: ", sname)
                    uuid = object_record["object_uuid"]
                    if uuid != "":
                        table_data = file_data.get_object(object_record["object_uuid"] )
                        if table_data != None:
                            class_name = table_data.get_classname()
                            print("retrieved table object: ", uuid, "of type: \n", class_name)
                            rank = table_data.get_rank()
                            print("table data object array has rank: ", rank)
                            table_meta = table_data.get_metadata()
                            print("table meta data: \n", table_meta)
                            table_data_arr = table_data.get_numpy_array()
                            print("table data array has dtype: ", table_data_arr.dtype)
                            print("table data array has shape: ", table_data_arr.shape)
                            print("table data array has strides: ", table_data_arr.strides)
                            for i in range(0,rank):
                                dim = table_data.get_dimension(i)
                                print("dimension: ", i, " has size: ", dim)
                                axis = table_data.get_axis(i)
                                print("coordinate axis: ", i, " = ", axis)
                                axis_meta = table_data.get_axis_metadata(i)
                                print("axis meta data: \n", axis_meta)
                if sname == "tags":
                    print("located a tags object")
                    uuid = object_record["object_uuid"]
                    if uuid != "":
                        tags_data = file_data.get_object(object_record["object_uuid"] )
                        print("tags object data: \n", tags_data)


def read_station_file(scan_store, name):
    scan_store.load_station(name)
    file_data = scan_store.get_station_data(name)
    dump_data(file_data)

def read_baseline_file(scan_store, name):
    scan_store.load_fringe(name)
    file_data = scan_store.get_fringe_data(name)
    dump_data(file_data)

def read_fringe_file(scan_store, name):
    scan_store.load_fringe(name)
    file_data = scan_store.get_fringe_data(name)
    dump_data(file_data)
    
    
def main():

    parser = argparse.ArgumentParser(
        prog='read_hops4_example.py', \
        description='''example utility demo on how to read a hops4 file (file must be part of a scan)''' \
        )

    parser.add_argument("filename", type=str, default="", help='the file to be opened')
    args = parser.parse_args()

    ffile = os.path.abspath(args.filename)

    #figure out the corresponding scan directory 
    scan_dir, basename = os.path.split(ffile);
    print("Exploring the directory: ", scan_dir)

    scan_store = pyMHO_Containers.MHO_PyScanStoreInterface()
    scan_store.set_directory(scan_dir)
    scan_store.initialize()

    if scan_store.is_valid():
        stations = scan_store.get_station_list()
        baselines = scan_store.get_baseline_list()
        fringes = scan_store.get_fringe_list()
        print("The number of station files = ", len(stations))
        print("The number of baseline files = ", len(baselines))
        print("The number of fringe files = ", len(fringes))
    else:
        print("The directory", scan_dir, "does not appear to be a valid HOPS4 scan directory")
        return 1
    
    #figure out if we are pointed at a station, baseline (corel), or fringe file
    #loop over fringe data here
    for st in stations:
        if st == basename:
            read_station_file(scan_store, basename)
            return 0
    
    for fr in fringes:
        if fr == basename:
            read_fringe_file(scan_store, basename)
            return 0
            
    for bl in baselines:
        if bl == basename:
            read_baseline_file(scan_store, basename)
            return 0

if __name__ == '__main__':
    main()
    sys.exit(0)

#
# eof
#
