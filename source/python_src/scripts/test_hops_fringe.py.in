#!@PY_EXE@
#
# test executable
#
import pyMHO_Containers
import os
import sys
import argparse

def main():

    parser = argparse.ArgumentParser(
        prog='test_hops_fringe.py', \
        description='''test utility to read a hops4 fringe file''' \
        )

    parser.add_argument('-f', '--fringe-file', dest='file', help='the file file read')
    args = parser.parse_args()
    ffile = os.path.abspath(args.file)

    #figure out the corresponding scan directory 
    scan_dir, basename = os.path.split(ffile);
    print("the scan directory = ", scan_dir)

    scan_store = pyMHO_Containers.MHO_PyScanStoreInterface()
    scan_store.set_directory(scan_dir)
    scan_store.initialize()

    if scan_store.is_valid():
        stations = scan_store.get_station_list()
        baselines = scan_store.get_baseline_list()
        fringes = scan_store.get_fringe_list()
        print("The number of stations = ", len(stations))
        print("The number of baselines = ", len(baselines))
        print("The number of fringes = ", len(fringes))
    else:
        print("The scan directory is not valid")
        return 1

    #loop over fringe data here
    fr_data = dict()
    for fr in fringes:
        if fr == basename:
            print(fr)
            scan_store.load_fringe(fr)
            frd = scan_store.get_fringe_data(fr)
            fr_data[fr] = frd
            if frd != None:
                n_obj = frd.get_nobjects()
                obj_info = frd.get_object_id_list()
                print(obj_info)
                uuid = ""
                for oid in obj_info:
                    if oid["shortname"] == "cvis":
                        uuid = oid["object_uuid"]
                        if uuid != "":
                            cvis = frd.get_object(uuid)
                            if cvis != None:
                                print("retrieved object: ", uuid, " as corrected visibilities")
                                class_name = cvis.get_classname()
                                rank = cvis.get_rank()
                                print("corrected visibility object has rank: ", rank, " and is a ", class_name)
                                table_meta = cvis.get_metadata()
                                print("meta data is: ", table_meta)
                                cvis_arr = cvis.get_numpy_array()
                                print("cvis array shape = ", cvis_arr.shape)
                                print("cvis array strides = ", cvis_arr.strides)
                                for i in range(0,rank):
                                    dim = cvis.get_dimension(i)
                                    print("dimension: ", i, " has size: ", dim)
                                    axis = cvis.get_axis(i)
                                    print("axis: ", i, " = ", axis)
                                    axis_meta = cvis.get_axis_metadata(i)
                                    print("axis meta data = ", axis_meta)




if __name__ == '__main__':
    main()
    sys.exit(0)

#
# eof
#
