<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="MHO__NDArrayWrapper_8hh" kind="file" language="C++">
    <compoundname>MHO_NDArrayWrapper.hh</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">array</includes>
    <includes local="no">cinttypes</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">cstring</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes refid="MHO__BidirectionalIterator_8hh" local="yes">MHO_BidirectionalIterator.hh</includes>
    <includes refid="MHO__BidirectionalStrideIterator_8hh" local="yes">MHO_BidirectionalStrideIterator.hh</includes>
    <includes refid="MHO__ExtensibleElement_8hh" local="yes">MHO_ExtensibleElement.hh</includes>
    <includes refid="MHO__Message_8hh" local="yes">MHO_Message.hh</includes>
    <includes refid="MHO__Meta_8hh" local="yes">MHO_Meta.hh</includes>
    <includes refid="MHO__NDArrayMath_8hh" local="yes">MHO_NDArrayMath.hh</includes>
    <includes refid="MHO__NDArrayView_8hh" local="yes">MHO_NDArrayView.hh</includes>
    <includes refid="MHO__NDArrayWrapper__0_8hh" local="yes">MHO_NDArrayWrapper_0.hh</includes>
    <includes refid="MHO__NDArrayWrapper__1_8hh" local="yes">MHO_NDArrayWrapper_1.hh</includes>
    <includedby refid="MHO__VisibilityChannelizer_8hh" local="yes">MHO_VisibilityChannelizer.hh</includedby>
    <includedby refid="MHO__WeightChannelizer_8hh" local="yes">MHO_WeightChannelizer.hh</includedby>
    <includedby refid="MHO__NDArrayTypeCastFunctor_8hh" local="yes">MHO_NDArrayTypeCastFunctor.hh</includedby>
    <includedby refid="MHO__ScalarContainer_8hh" local="yes">MHO_ScalarContainer.hh</includedby>
    <includedby refid="MHO__TableContainer_8hh" local="yes">MHO_TableContainer.hh</includedby>
    <includedby refid="MHO__VectorContainer_8hh" local="yes">MHO_VectorContainer.hh</includedby>
    <includedby refid="MHO__CyclicRotator_8hh" local="yes">MHO_CyclicRotator.hh</includedby>
    <includedby refid="MHO__ElementTypeCaster_8hh" local="yes">MHO_ElementTypeCaster.hh</includedby>
    <includedby refid="MHO__EndZeroPadder_8hh" local="yes">MHO_EndZeroPadder.hh</includedby>
    <includedby refid="MHO__ExtremaSearch_8hh" local="yes">MHO_ExtremaSearch.hh</includedby>
    <includedby refid="MHO__FastFourierTransform_8hh" local="yes">MHO_FastFourierTransform.hh</includedby>
    <includedby refid="MHO__FunctorBroadcaster_8hh" local="yes">MHO_FunctorBroadcaster.hh</includedby>
    <includedby refid="MHO__MultidimensionalFastFourierTransform_8hh" local="yes">MHO_MultidimensionalFastFourierTransform.hh</includedby>
    <includedby refid="MHO__MultidimensionalFastFourierTransformFFTW_8hh" local="yes">MHO_MultidimensionalFastFourierTransformFFTW.hh</includedby>
    <includedby refid="MHO__Reducer_8hh" local="yes">MHO_Reducer.hh</includedby>
    <includedby refid="MHO__SelectRepack_8hh" local="yes">MHO_SelectRepack.hh</includedby>
    <includedby refid="MHO__SubSample_8hh" local="yes">MHO_SubSample.hh</includedby>
    <includedby refid="MHO__UnaryFunctor_8hh" local="yes">MHO_UnaryFunctor.hh</includedby>
    <includedby refid="MHO__ComplexPointwiseMultiply_8hh" local="yes">MHO_ComplexPointwiseMultiply.hh</includedby>
    <includedby refid="MHO__OpenCLBatchedMultidimensionalFastFourierTransform_8hh" local="yes">MHO_OpenCLBatchedMultidimensionalFastFourierTransform.hh</includedby>
    <includedby refid="MHO__OpenCLFastFourierTransformRadix2Stage_8hh" local="yes">MHO_OpenCLFastFourierTransformRadix2Stage.hh</includedby>
    <includedby refid="MHO__OpenCLMultidimensionalFastFourierTransform_8hh" local="yes">MHO_OpenCLMultidimensionalFastFourierTransform.hh</includedby>
    <includedby refid="MHO__OpenCLScalarMultiply_8hh" local="yes">MHO_OpenCLScalarMultiply.hh</includedby>
    <includedby refid="MHO__PyTableContainer_8hh" local="yes">MHO_PyTableContainer.hh</includedby>
    <incdepgraph>
      <node id="25">
        <label>atomic</label>
      </node>
      <node id="12">
        <label>iterator</label>
      </node>
      <node id="38">
        <label>MHO_NDArrayView.hh</label>
        <link refid="MHO__NDArrayView_8hh"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>cstdint</label>
      </node>
      <node id="31">
        <label>MHO_Meta.hh</label>
        <link refid="MHO__Meta_8hh"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cmath</label>
      </node>
      <node id="8">
        <label>stdexcept</label>
      </node>
      <node id="28">
        <label>MHO_Profiler.hh</label>
        <link refid="MHO__Profiler_8hh"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="33">
        <label>map</label>
      </node>
      <node id="4">
        <label>cinttypes</label>
      </node>
      <node id="16">
        <label>MHO_Message.hh</label>
        <link refid="MHO__Message_8hh"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stddef.h</label>
      </node>
      <node id="36">
        <label>MHO_NDArrayMath.hh</label>
        <link refid="MHO__NDArrayMath_8hh"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>ostream</label>
      </node>
      <node id="40">
        <label>MHO_NDArrayWrapper_0.hh</label>
        <link refid="MHO__NDArrayWrapper__0_8hh"/>
      </node>
      <node id="41">
        <label>MHO_NDArrayWrapper_1.hh</label>
        <link refid="MHO__NDArrayWrapper__1_8hh"/>
      </node>
      <node id="27">
        <label>MHO_TestAssertions.hh</label>
        <link refid="MHO__TestAssertions_8hh"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>MHO_BidirectionalIterator.hh</label>
        <link refid="MHO__BidirectionalIterator_8hh"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>tuple</label>
      </node>
      <node id="30">
        <label>ctime</label>
      </node>
      <node id="29">
        <label>MHO_Timer.hh</label>
        <link refid="MHO__Timer_8hh"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
      <node id="39">
        <label>MHO_BidirectionalIndexedIterator.hh</label>
        <link refid="MHO__BidirectionalIndexedIterator_8hh"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>array</label>
      </node>
      <node id="22">
        <label>sstream</label>
      </node>
      <node id="24">
        <label>MHO_SelfName.hh</label>
        <link refid="MHO__SelfName_8hh"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>MHO_BidirectionalStrideIterator.hh</label>
        <link refid="MHO__BidirectionalStrideIterator_8hh"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>MHO_NDArrayWrapper.hh</label>
        <link refid="MHO__NDArrayWrapper_8hh"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cstdlib</label>
      </node>
      <node id="18">
        <label>iostream</label>
      </node>
      <node id="37">
        <label>cstddef</label>
      </node>
      <node id="19">
        <label>mutex</label>
      </node>
      <node id="26">
        <label>thread</label>
      </node>
      <node id="35">
        <label>type_traits</label>
      </node>
      <node id="21">
        <label>set</label>
      </node>
      <node id="32">
        <label>complex</label>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="23">
        <label>stdio.h</label>
      </node>
      <node id="15">
        <label>MHO_ExtensibleElement.hh</label>
        <link refid="MHO__ExtensibleElement_8hh"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="99">
        <label>MHO_FringePlotInfo.hh</label>
        <link refid="MHO__FringePlotInfo_8hh"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>MHO_ChannelLabelerBuilder.cc</label>
        <link refid="MHO__ChannelLabelerBuilder_8cc"/>
      </node>
      <node id="27">
        <label>MHO_IonosphericFringeFitter.cc</label>
        <link refid="MHO__IonosphericFringeFitter_8cc"/>
      </node>
      <node id="152">
        <label>MHO_MinWeight.cc</label>
        <link refid="MHO__MinWeight_8cc"/>
      </node>
      <node id="90">
        <label>hops2hdf5.cc</label>
        <link refid="hops2hdf5_8cc"/>
      </node>
      <node id="136">
        <label>MHO_EstimatePCManual.cc</label>
        <link refid="MHO__EstimatePCManual_8cc"/>
      </node>
      <node id="78">
        <label>MHO_PyFringeDataInterface.hh</label>
        <link refid="MHO__PyFringeDataInterface_8hh"/>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>MHO_BasicFringeFitter.cc</label>
        <link refid="MHO__BasicFringeFitter_8cc"/>
      </node>
      <node id="159">
        <label>MHO_NormFX.hh</label>
        <link refid="MHO__NormFX_8hh"/>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="133">
        <label>MHO_DoubleSidebandChannelLabeler.hh</label>
        <link refid="MHO__DoubleSidebandChannelLabeler_8hh"/>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>MHO_MK4FringeExport.cc</label>
        <link refid="MHO__MK4FringeExport_8cc"/>
      </node>
      <node id="21">
        <label>MHO_FringeData.cc</label>
        <link refid="MHO__FringeData_8cc"/>
      </node>
      <node id="200">
        <label>MHO_OpenCLFastFourierTransformPlan.cc</label>
        <link refid="MHO__OpenCLFastFourierTransformPlan_8cc"/>
      </node>
      <node id="192">
        <label>MHO_SelectRepack.hh</label>
        <link refid="MHO__SelectRepack_8hh"/>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>MHO_MK4FringeExport.hh</label>
        <link refid="MHO__MK4FringeExport_8hh"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="197">
        <label>MHO_MultidimensionalFastFourierTransformFFTW.hh</label>
        <link refid="MHO__MultidimensionalFastFourierTransformFFTW_8hh"/>
      </node>
      <node id="100">
        <label>MHO_InitialFringeInfo.hh</label>
        <link refid="MHO__InitialFringeInfo_8hh"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>TestVexStripper.cc</label>
        <link refid="TestVexStripper_8cc"/>
      </node>
      <node id="219">
        <label>MHO_OpenCLBatchedMultidimensionalFastFourierTransform.hh</label>
        <link refid="MHO__OpenCLBatchedMultidimensionalFastFourierTransform_8hh"/>
      </node>
      <node id="94">
        <label>MHO_ContainerStore.cc</label>
        <link refid="MHO__ContainerStore_8cc"/>
      </node>
      <node id="190">
        <label>MHO_MK4StationInterface.cc</label>
        <link refid="MHO__MK4StationInterface_8cc"/>
      </node>
      <node id="220">
        <label>MHO_OpenCLScalarMultiply.hh</label>
        <link refid="MHO__OpenCLScalarMultiply_8hh"/>
      </node>
      <node id="44">
        <label>MHO_LinearDParCorrectionBuilder.cc</label>
        <link refid="MHO__LinearDParCorrectionBuilder_8cc"/>
      </node>
      <node id="212">
        <label>MHO_FastFourierTransform.hh</label>
        <link refid="MHO__FastFourierTransform_8hh"/>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="199" relation="include">
        </childnode>
        <childnode refid="201" relation="include">
        </childnode>
        <childnode refid="202" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>MHO_WeightChannelizer.cc</label>
        <link refid="MHO__WeightChannelizer_8cc"/>
      </node>
      <node id="93">
        <label>MHO_ContainerStore.hh</label>
        <link refid="MHO__ContainerStore_8hh"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="154">
        <label>MHO_MixedPolYShift.cc</label>
        <link refid="MHO__MixedPolYShift_8cc"/>
      </node>
      <node id="161">
        <label>MHO_SingleSidebandNormFX.cc</label>
        <link refid="MHO__SingleSidebandNormFX_8cc"/>
      </node>
      <node id="32">
        <label>MHO_DefaultPythonPlotVisitor.cc</label>
        <link refid="MHO__DefaultPythonPlotVisitor_8cc"/>
      </node>
      <node id="106">
        <label>MHO_ClassIdentityMap.hh</label>
        <link refid="MHO__ClassIdentityMap_8hh"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>MHO_MixedPolYShiftBuilder.hh</label>
        <link refid="MHO__MixedPolYShiftBuilder_8hh"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>MHO_PyGenericOperator.hh</label>
        <link refid="MHO__PyGenericOperator_8hh"/>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="189">
        <label>MHO_MK4StationInterface.hh</label>
        <link refid="MHO__MK4StationInterface_8hh"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="190" relation="include">
        </childnode>
      </node>
      <node id="116">
        <label>MHO_HDF5Attributes.hh</label>
        <link refid="MHO__HDF5Attributes_8hh"/>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>MHO_ManualPolDelayCorrectionBuilder.cc</label>
        <link refid="MHO__ManualPolDelayCorrectionBuilder_8cc"/>
      </node>
      <node id="149">
        <label>MHO_ManualPolPhaseCorrection.hh</label>
        <link refid="MHO__ManualPolPhaseCorrection_8hh"/>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="118">
        <label>MHO_HDF5Datasets.hh</label>
        <link refid="MHO__HDF5Datasets_8hh"/>
        <childnode refid="117" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>MHO_LinearDParCorrectionBuilder.hh</label>
        <link refid="MHO__LinearDParCorrectionBuilder_8hh"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>MHO_AFileInfoExtractor.cc</label>
        <link refid="MHO__AFileInfoExtractor_8cc"/>
      </node>
      <node id="81">
        <label>MHO_ScanDataStore.cc</label>
        <link refid="MHO__ScanDataStore_8cc"/>
      </node>
      <node id="181">
        <label>MHO_InterpolateFringePeak.cc</label>
        <link refid="MHO__InterpolateFringePeak_8cc"/>
      </node>
      <node id="175">
        <label>MHO_StationModel.hh</label>
        <link refid="MHO__StationModel_8hh"/>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
      </node>
      <node id="122">
        <label>MHO_CircularFieldRotationCorrection.cc</label>
        <link refid="MHO__CircularFieldRotationCorrection_8cc"/>
      </node>
      <node id="140">
        <label>MHO_LinearDParCorrection.cc</label>
        <link refid="MHO__LinearDParCorrection_8cc"/>
      </node>
      <node id="29">
        <label>MHO_FringeFitterFactory.hh</label>
        <link refid="MHO__FringeFitterFactory_8hh"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="127">
        <label>MHO_DelayRate.hh</label>
        <link refid="MHO__DelayRate_8hh"/>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
      </node>
      <node id="183">
        <label>MHO_DiFXVisibilityProcessor.hh</label>
        <link refid="MHO__DiFXVisibilityProcessor_8hh"/>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="184" relation="include">
        </childnode>
      </node>
      <node id="120">
        <label>MHO_ChannelLabeler.hh</label>
        <link refid="MHO__ChannelLabeler_8hh"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="206">
        <label>MHO_PyTableContainer.hh</label>
        <link refid="MHO__PyTableContainer_8hh"/>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
      </node>
      <node id="174">
        <label>MHO_StationDelayCorrection.cc</label>
        <link refid="MHO__StationDelayCorrection_8cc"/>
      </node>
      <node id="112">
        <label>MHO_DiFXScanProcessor.cc</label>
        <link refid="MHO__DiFXScanProcessor_8cc"/>
      </node>
      <node id="198">
        <label>MHO_MultidimensionalFastFourierTransformInterface.hh</label>
        <link refid="MHO__MultidimensionalFastFourierTransformInterface_8hh"/>
        <childnode refid="196" relation="include">
        </childnode>
        <childnode refid="197" relation="include">
        </childnode>
        <childnode refid="199" relation="include">
        </childnode>
        <childnode refid="201" relation="include">
        </childnode>
        <childnode refid="202" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>MHO_ComputePlotData.hh</label>
        <link refid="MHO__ComputePlotData_8hh"/>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
      </node>
      <node id="141">
        <label>MHO_LSBOffset.hh</label>
        <link refid="MHO__LSBOffset_8hh"/>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>MHO_ManualPolPhaseCorrectionBuilder.hh</label>
        <link refid="MHO__ManualPolPhaseCorrectionBuilder_8hh"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="113">
        <label>MHO_ContainerHDF5Converter.hh</label>
        <link refid="MHO__ContainerHDF5Converter_8hh"/>
        <childnode refid="114" relation="include">
        </childnode>
      </node>
      <node id="179">
        <label>TestSignalFFT.cc</label>
        <link refid="TestSignalFFT_8cc"/>
      </node>
      <node id="2">
        <label>MHO_VisibilityChannelizer.hh</label>
        <link refid="MHO__VisibilityChannelizer_8hh"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>MHO_NDArrayTypeCastFunctor.hh</label>
        <link refid="MHO__NDArrayTypeCastFunctor_8hh"/>
      </node>
      <node id="87">
        <label>MHO_BasicFringeUtilities.cc</label>
        <link refid="MHO__BasicFringeUtilities_8cc"/>
      </node>
      <node id="42">
        <label>MHO_DCBlockBuilder.cc</label>
        <link refid="MHO__DCBlockBuilder_8cc"/>
      </node>
      <node id="84">
        <label>MHO_PyScanStoreInterface.hh</label>
        <link refid="MHO__PyScanStoreInterface_8hh"/>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>MHO_PassbandBuilder.cc</label>
        <link refid="MHO__PassbandBuilder_8cc"/>
      </node>
      <node id="153">
        <label>MHO_MixedPolYShift.hh</label>
        <link refid="MHO__MixedPolYShift_8hh"/>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="169">
        <label>MHO_PolProductSummation.cc</label>
        <link refid="MHO__PolProductSummation_8cc"/>
      </node>
      <node id="45">
        <label>MHO_LSBOffsetBuilder.hh</label>
        <link refid="MHO__LSBOffsetBuilder_8hh"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>MHO_ContainerJSONConverter.hh</label>
        <link refid="MHO__ContainerJSONConverter_8hh"/>
        <childnode refid="106" relation="include">
        </childnode>
      </node>
      <node id="196">
        <label>MHO_MultidimensionalFastFourierTransform.hh</label>
        <link refid="MHO__MultidimensionalFastFourierTransform_8hh"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
      </node>
      <node id="103">
        <label>MHO_PyFringeFitterInstance.hh</label>
        <link refid="MHO__PyFringeFitterInstance_8hh"/>
      </node>
      <node id="208">
        <label>MHO_PyUnaryTableOperator.hh</label>
        <link refid="MHO__PyUnaryTableOperator_8hh"/>
      </node>
      <node id="125">
        <label>MHO_DelayModel.hh</label>
        <link refid="MHO__DelayModel_8hh"/>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
      </node>
      <node id="157">
        <label>MHO_MultitonePhaseCorrection.hh</label>
        <link refid="MHO__MultitonePhaseCorrection_8hh"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="203">
        <label>MHO_Reducer.hh</label>
        <link refid="MHO__Reducer_8hh"/>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>MHO_MinWeightBuilder.hh</label>
        <link refid="MHO__MinWeightBuilder_8hh"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>MHO_ContainerFileInterface.hh</label>
        <link refid="MHO__ContainerFileInterface_8hh"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
      </node>
      <node id="167">
        <label>MHO_PhaseCalibrationTrim.cc</label>
        <link refid="MHO__PhaseCalibrationTrim_8cc"/>
      </node>
      <node id="144">
        <label>MHO_ManualChannelDelayCorrection.cc</label>
        <link refid="MHO__ManualChannelDelayCorrection_8cc"/>
      </node>
      <node id="66">
        <label>MHO_BasicFringeDataConfiguration.cc</label>
        <link refid="MHO__BasicFringeDataConfiguration_8cc"/>
      </node>
      <node id="155">
        <label>MHO_MixedSidebandNormFX.hh</label>
        <link refid="MHO__MixedSidebandNormFX_8hh"/>
        <childnode refid="156" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="148">
        <label>MHO_ManualPolDelayCorrection.cc</label>
        <link refid="MHO__ManualPolDelayCorrection_8cc"/>
      </node>
      <node id="215">
        <label>MHO_AbsoluteValue.hh</label>
        <link refid="MHO__AbsoluteValue_8hh"/>
      </node>
      <node id="115">
        <label>MHO_HDF5ConverterDictionary.cc</label>
        <link refid="MHO__HDF5ConverterDictionary_8cc"/>
      </node>
      <node id="50">
        <label>MHO_ManualChannelPhaseCorrectionBuilder.cc</label>
        <link refid="MHO__ManualChannelPhaseCorrectionBuilder_8cc"/>
      </node>
      <node id="135">
        <label>MHO_EstimatePCManual.hh</label>
        <link refid="MHO__EstimatePCManual_8hh"/>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>MHO_IonosphericFringeFitter.hh</label>
        <link refid="MHO__IonosphericFringeFitter_8hh"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="164">
        <label>MHO_Passband.hh</label>
        <link refid="MHO__Passband_8hh"/>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>MHO_OperatorBuilderManager.cc</label>
        <link refid="MHO__OperatorBuilderManager_8cc"/>
      </node>
      <node id="77">
        <label>MHO_PythonOperatorBuilder.hh</label>
        <link refid="MHO__PythonOperatorBuilder_8hh"/>
      </node>
      <node id="65">
        <label>fplot4.cc</label>
        <link refid="fplot4_8cc"/>
      </node>
      <node id="72">
        <label>MHO_PolProductSummationBuilder.cc</label>
        <link refid="MHO__PolProductSummationBuilder_8cc"/>
      </node>
      <node id="180">
        <label>MHO_InterpolateFringePeak.hh</label>
        <link refid="MHO__InterpolateFringePeak_8hh"/>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="109">
        <label>MHO_DiFXInterface.hh</label>
        <link refid="MHO__DiFXInterface_8hh"/>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="170">
        <label>MHO_SamplerLabeler.hh</label>
        <link refid="MHO__SamplerLabeler_8hh"/>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="184">
        <label>MHO_DiFXVisibilityProcessor.cc</label>
        <link refid="MHO__DiFXVisibilityProcessor_8cc"/>
      </node>
      <node id="178">
        <label>alist4.cc</label>
        <link refid="alist4_8cc"/>
      </node>
      <node id="10">
        <label>MHO_ScalarContainer.hh</label>
        <link refid="MHO__ScalarContainer_8hh"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
      </node>
      <node id="145">
        <label>MHO_ManualChannelPhaseCorrection.hh</label>
        <link refid="MHO__ManualChannelPhaseCorrection_8hh"/>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="201">
        <label>MHO_OpenCLFastFourierTransformRadix2Stage.hh</label>
        <link refid="MHO__OpenCLFastFourierTransformRadix2Stage_8hh"/>
      </node>
      <node id="74">
        <label>MHO_SamplerLabelerBuilder.cc</label>
        <link refid="MHO__SamplerLabelerBuilder_8cc"/>
      </node>
      <node id="95">
        <label>MHO_BasicFringeUtilities.hh</label>
        <link refid="MHO__BasicFringeUtilities_8hh"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>MHO_ManualChannelDelayCorrectionBuilder.cc</label>
        <link refid="MHO__ManualChannelDelayCorrectionBuilder_8cc"/>
      </node>
      <node id="209">
        <label>MHO_VectorContainer.hh</label>
        <link refid="MHO__VectorContainer_8hh"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="210" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>MHO_BasicFringeDataConfiguration.hh</label>
        <link refid="MHO__BasicFringeDataConfiguration_8hh"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="162">
        <label>MHO_Notches.hh</label>
        <link refid="MHO__Notches_8hh"/>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>MHO_PyContainersModuleDefinition.cc</label>
        <link refid="MHO__PyContainersModuleDefinition_8cc"/>
      </node>
      <node id="210">
        <label>MHO_Axis.hh</label>
        <link refid="MHO__Axis_8hh"/>
        <childnode refid="211" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
      </node>
      <node id="168">
        <label>MHO_PolProductSummation.hh</label>
        <link refid="MHO__PolProductSummation_8hh"/>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="126">
        <label>MHO_DelayModel.cc</label>
        <link refid="MHO__DelayModel_8cc"/>
      </node>
      <node id="129">
        <label>MHO_MBDelaySearch.cc</label>
        <link refid="MHO__MBDelaySearch_8cc"/>
      </node>
      <node id="176">
        <label>MHO_StationModel.cc</label>
        <link refid="MHO__StationModel_8cc"/>
      </node>
      <node id="211">
        <label>MHO_AxisPack.hh</label>
        <link refid="MHO__AxisPack_8hh"/>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
      </node>
      <node id="187">
        <label>MHO_MK4CorelInterface.hh</label>
        <link refid="MHO__MK4CorelInterface_8hh"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="188" relation="include">
        </childnode>
      </node>
      <node id="160">
        <label>MHO_SingleSidebandNormFX.hh</label>
        <link refid="MHO__SingleSidebandNormFX_8hh"/>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="165">
        <label>MHO_Passband.cc</label>
        <link refid="MHO__Passband_8cc"/>
      </node>
      <node id="216">
        <label>MHO_ComplexConjugator.hh</label>
        <link refid="MHO__ComplexConjugator_8hh"/>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>MHO_NotchesBuilder.hh</label>
        <link refid="MHO__NotchesBuilder_8hh"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>MHO_FringeFitterFactory.cc</label>
        <link refid="MHO__FringeFitterFactory_8cc"/>
      </node>
      <node id="34">
        <label>MHO_ChannelLabelerBuilder.hh</label>
        <link refid="MHO__ChannelLabelerBuilder_8hh"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="185">
        <label>MHO_DiFXPCalProcessor.hh</label>
        <link refid="MHO__DiFXPCalProcessor_8hh"/>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="186" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>mark42hops.cc</label>
        <link refid="mark42hops_8cc"/>
      </node>
      <node id="12">
        <label>MHO_ContainerDictionary.hh</label>
        <link refid="MHO__ContainerDictionary_8hh"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>MHO_MK4ScanConverter.cc</label>
        <link refid="MHO__MK4ScanConverter_8cc"/>
      </node>
      <node id="130">
        <label>MHO_MBDelaySearchCUDA.hh</label>
        <link refid="MHO__MBDelaySearchCUDA_8hh"/>
        <childnode refid="131" relation="include">
        </childnode>
      </node>
      <node id="147">
        <label>MHO_ManualPolDelayCorrection.hh</label>
        <link refid="MHO__ManualPolDelayCorrection_8hh"/>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="214">
        <label>MHO_UnaryFunctor.hh</label>
        <link refid="MHO__UnaryFunctor_8hh"/>
        <childnode refid="215" relation="include">
        </childnode>
        <childnode refid="216" relation="include">
        </childnode>
        <childnode refid="217" relation="include">
        </childnode>
      </node>
      <node id="204">
        <label>MHO_SubSample.hh</label>
        <link refid="MHO__SubSample_8hh"/>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
      </node>
      <node id="194">
        <label>MHO_EndZeroPadder.hh</label>
        <link refid="MHO__EndZeroPadder_8hh"/>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
      </node>
      <node id="132">
        <label>MHO_DelayRate.cc</label>
        <link refid="MHO__DelayRate_8cc"/>
      </node>
      <node id="67">
        <label>MHO_FringeControlInitialization.hh</label>
        <link refid="MHO__FringeControlInitialization_8hh"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>MHO_ScanDataStore.hh</label>
        <link refid="MHO__ScanDataStore_8hh"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>MHO_NotchesBuilder.cc</label>
        <link refid="MHO__NotchesBuilder_8cc"/>
      </node>
      <node id="24">
        <label>MHO_BasicFringeFitter.hh</label>
        <link refid="MHO__BasicFringeFitter_8hh"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="188">
        <label>MHO_MK4CorelInterface.cc</label>
        <link refid="MHO__MK4CorelInterface_8cc"/>
      </node>
      <node id="102">
        <label>MHO_PyContainerStoreInterface.hh</label>
        <link refid="MHO__PyContainerStoreInterface_8hh"/>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>MHO_LSBOffsetBuilder.cc</label>
        <link refid="MHO__LSBOffsetBuilder_8cc"/>
      </node>
      <node id="156">
        <label>MHO_MixedSidebandNormFX.cc</label>
        <link refid="MHO__MixedSidebandNormFX_8cc"/>
      </node>
      <node id="199">
        <label>MHO_OpenCLFastFourierTransformPlan.hh</label>
        <link refid="MHO__OpenCLFastFourierTransformPlan_8hh"/>
        <childnode refid="200" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>MHO_MultitonePhaseCorrectionBuilder.hh</label>
        <link refid="MHO__MultitonePhaseCorrectionBuilder_8hh"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="121">
        <label>MHO_CircularFieldRotationCorrection.hh</label>
        <link refid="MHO__CircularFieldRotationCorrection_8hh"/>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>MHO_ContainerFileInterface.cc</label>
        <link refid="MHO__ContainerFileInterface_8cc"/>
      </node>
      <node id="191">
        <label>MHO_ElementTypeCaster.hh</label>
        <link refid="MHO__ElementTypeCaster_8hh"/>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="193">
        <label>MHO_CyclicRotator.hh</label>
        <link refid="MHO__CyclicRotator_8hh"/>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>MHO_DCBlockBuilder.hh</label>
        <link refid="MHO__DCBlockBuilder_8hh"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="143">
        <label>MHO_ManualChannelDelayCorrection.hh</label>
        <link refid="MHO__ManualChannelDelayCorrection_8hh"/>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>TestPCalExtraction.cc</label>
        <link refid="TestPCalExtraction_8cc"/>
      </node>
      <node id="173">
        <label>MHO_StationDelayCorrection.hh</label>
        <link refid="MHO__StationDelayCorrection_8hh"/>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>MHO_FringeFitter.hh</label>
        <link refid="MHO__FringeFitter_8hh"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>MHO_CircularFieldRotationBuilder.cc</label>
        <link refid="MHO__CircularFieldRotationBuilder_8cc"/>
      </node>
      <node id="69">
        <label>MHO_PassbandBuilder.hh</label>
        <link refid="MHO__PassbandBuilder_8hh"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ComparePcal.cc</label>
        <link refid="ComparePcal_8cc"/>
      </node>
      <node id="16">
        <label>hops2keys.cc</label>
        <link refid="hops2keys_8cc"/>
      </node>
      <node id="151">
        <label>MHO_MinWeight.hh</label>
        <link refid="MHO__MinWeight_8hh"/>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>MHO_ManualChannelPhaseCorrectionBuilder.hh</label>
        <link refid="MHO__ManualChannelPhaseCorrectionBuilder_8hh"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>MHO_FringePlotInfo.cc</label>
        <link refid="MHO__FringePlotInfo_8cc"/>
      </node>
      <node id="30">
        <label>MHO_FringePlotVisitor.hh</label>
        <link refid="MHO__FringePlotVisitor_8hh"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>MHO_NDArrayWrapper.hh</label>
        <link refid="MHO__NDArrayWrapper_8hh"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="209" relation="include">
        </childnode>
        <childnode refid="193" relation="include">
        </childnode>
        <childnode refid="191" relation="include">
        </childnode>
        <childnode refid="194" relation="include">
        </childnode>
        <childnode refid="195" relation="include">
        </childnode>
        <childnode refid="212" relation="include">
        </childnode>
        <childnode refid="213" relation="include">
        </childnode>
        <childnode refid="196" relation="include">
        </childnode>
        <childnode refid="197" relation="include">
        </childnode>
        <childnode refid="203" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
        <childnode refid="204" relation="include">
        </childnode>
        <childnode refid="214" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="219" relation="include">
        </childnode>
        <childnode refid="201" relation="include">
        </childnode>
        <childnode refid="202" relation="include">
        </childnode>
        <childnode refid="220" relation="include">
        </childnode>
        <childnode refid="206" relation="include">
        </childnode>
      </node>
      <node id="107">
        <label>difx2hops.cc</label>
        <link refid="difx2hops_8cc"/>
      </node>
      <node id="92">
        <label>MHO_HDF5ContainerFileInterface.cc</label>
        <link refid="MHO__HDF5ContainerFileInterface_8cc"/>
      </node>
      <node id="97">
        <label>MHO_ComputePlotData.cc</label>
        <link refid="MHO__ComputePlotData_8cc"/>
      </node>
      <node id="166">
        <label>MHO_PhaseCalibrationTrim.hh</label>
        <link refid="MHO__PhaseCalibrationTrim_8hh"/>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>MHO_DataSelectionBuilder.hh</label>
        <link refid="MHO__DataSelectionBuilder_8hh"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="218">
        <label>MHO_ComplexPointwiseMultiply.hh</label>
        <link refid="MHO__ComplexPointwiseMultiply_8hh"/>
      </node>
      <node id="205">
        <label>MHO_TableContainerBufferBuilder.hh</label>
        <link refid="MHO__TableContainerBufferBuilder_8hh"/>
      </node>
      <node id="58">
        <label>MHO_MixedPolYShiftBuilder.cc</label>
        <link refid="MHO__MixedPolYShiftBuilder_8cc"/>
      </node>
      <node id="171">
        <label>MHO_SBDTableGenerator.hh</label>
        <link refid="MHO__SBDTableGenerator_8hh"/>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>MHO_OperatorBuilder.hh</label>
        <link refid="MHO__OperatorBuilder_8hh"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="207">
        <label>MHO_PyUnaryOperator.hh</label>
        <link refid="MHO__PyUnaryOperator_8hh"/>
      </node>
      <node id="128">
        <label>MHO_MBDelaySearch.hh</label>
        <link refid="MHO__MBDelaySearch_8hh"/>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
      </node>
      <node id="186">
        <label>MHO_DiFXPCalProcessor.cc</label>
        <link refid="MHO__DiFXPCalProcessor_8cc"/>
      </node>
      <node id="139">
        <label>MHO_LinearDParCorrection.hh</label>
        <link refid="MHO__LinearDParCorrection_8hh"/>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>hops2flat.cc</label>
        <link refid="hops2flat_8cc"/>
      </node>
      <node id="91">
        <label>MHO_HDF5ContainerFileInterface.hh</label>
        <link refid="MHO__HDF5ContainerFileInterface_8hh"/>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
      </node>
      <node id="131">
        <label>MHO_MBDelaySearchCUDA.cc</label>
        <link refid="MHO__MBDelaySearchCUDA_8cc"/>
      </node>
      <node id="146">
        <label>MHO_ManualChannelPhaseCorrection.cc</label>
        <link refid="MHO__ManualChannelPhaseCorrection_8cc"/>
      </node>
      <node id="137">
        <label>MHO_IonosphericPhaseCorrection.hh</label>
        <link refid="MHO__IonosphericPhaseCorrection_8hh"/>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>MHO_FringeControlInitialization.cc</label>
        <link refid="MHO__FringeControlInitialization_8cc"/>
      </node>
      <node id="63">
        <label>MHO_OperatorBuilderManager.hh</label>
        <link refid="MHO__OperatorBuilderManager_8hh"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>MHO_CircularFieldRotationBuilder.hh</label>
        <link refid="MHO__CircularFieldRotationBuilder_8hh"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="123">
        <label>MHO_DCBlock.hh</label>
        <link refid="MHO__DCBlock_8hh"/>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>MHO_ManualPolPhaseCorrectionBuilder.cc</label>
        <link refid="MHO__ManualPolPhaseCorrectionBuilder_8cc"/>
      </node>
      <node id="56">
        <label>MHO_MinWeightBuilder.cc</label>
        <link refid="MHO__MinWeightBuilder_8cc"/>
      </node>
      <node id="138">
        <label>MHO_IonosphericPhaseCorrection.cc</label>
        <link refid="MHO__IonosphericPhaseCorrection_8cc"/>
      </node>
      <node id="114">
        <label>MHO_HDF5ConverterDictionary.hh</label>
        <link refid="MHO__HDF5ConverterDictionary_8hh"/>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>MHO_DefaultPythonPlotVisitor.hh</label>
        <link refid="MHO__DefaultPythonPlotVisitor_8hh"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>MHO_FringeData.hh</label>
        <link refid="MHO__FringeData_8hh"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="182">
        <label>MHO_DiFXBaselineProcessor.hh</label>
        <link refid="MHO__DiFXBaselineProcessor_8hh"/>
        <childnode refid="183" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>MHO_DataSelectionBuilder.cc</label>
        <link refid="MHO__DataSelectionBuilder_8cc"/>
      </node>
      <node id="163">
        <label>MHO_Notches.cc</label>
        <link refid="MHO__Notches_8cc"/>
      </node>
      <node id="75">
        <label>MHO_StationDelayCorrectionBuilder.hh</label>
        <link refid="MHO__StationDelayCorrectionBuilder_8hh"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>TestMultiObjectStreaming.cc</label>
        <link refid="TestMultiObjectStreaming_8cc"/>
      </node>
      <node id="217">
        <label>MHO_NaNMasker.hh</label>
        <link refid="MHO__NaNMasker_8hh"/>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>fourfit4.cc</label>
        <link refid="fourfit4_8cc"/>
      </node>
      <node id="108">
        <label>MHO_DiFXScanProcessor.hh</label>
        <link refid="MHO__DiFXScanProcessor_8hh"/>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
      </node>
      <node id="177">
        <label>MHO_ContainerDefinitions.hh</label>
        <link refid="MHO__ContainerDefinitions_8hh"/>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="185" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="187" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="189" relation="include">
        </childnode>
        <childnode refid="191" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>MHO_Snapshot.hh</label>
        <link refid="MHO__Snapshot_8hh"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>MHO_ManualChannelDelayCorrectionBuilder.hh</label>
        <link refid="MHO__ManualChannelDelayCorrectionBuilder_8hh"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>MHO_PolProductSummationBuilder.hh</label>
        <link refid="MHO__PolProductSummationBuilder_8hh"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>MHO_WeightChannelizer.hh</label>
        <link refid="MHO__WeightChannelizer_8hh"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="124">
        <label>MHO_DCBlock.cc</label>
        <link refid="MHO__DCBlock_8cc"/>
      </node>
      <node id="134">
        <label>MHO_DiFXBaselineProcessor.cc</label>
        <link refid="MHO__DiFXBaselineProcessor_8cc"/>
      </node>
      <node id="195">
        <label>MHO_ExtremaSearch.hh</label>
        <link refid="MHO__ExtremaSearch_8hh"/>
        <childnode refid="128" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>MHO_ContainerDictionary.cc</label>
        <link refid="MHO__ContainerDictionary_8cc"/>
      </node>
      <node id="86">
        <label>MHO_Snapshot.cc</label>
        <link refid="MHO__Snapshot_8cc"/>
      </node>
      <node id="158">
        <label>MHO_MultitonePhaseCorrection.cc</label>
        <link refid="MHO__MultitonePhaseCorrection_8cc"/>
      </node>
      <node id="172">
        <label>MHO_SBDTableGenerator.cc</label>
        <link refid="MHO__SBDTableGenerator_8cc"/>
      </node>
      <node id="51">
        <label>MHO_ManualPolDelayCorrectionBuilder.hh</label>
        <link refid="MHO__ManualPolDelayCorrectionBuilder_8hh"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>MHO_VisibilityChannelizer.cc</label>
        <link refid="MHO__VisibilityChannelizer_8cc"/>
      </node>
      <node id="60">
        <label>MHO_MultitonePhaseCorrectionBuilder.cc</label>
        <link refid="MHO__MultitonePhaseCorrectionBuilder_8cc"/>
      </node>
      <node id="202">
        <label>MHO_OpenCLMultidimensionalFastFourierTransform.hh</label>
        <link refid="MHO__OpenCLMultidimensionalFastFourierTransform_8hh"/>
      </node>
      <node id="111">
        <label>MHO_DiFXInterface.cc</label>
        <link refid="MHO__DiFXInterface_8cc"/>
      </node>
      <node id="13">
        <label>CompareCorFiles.cc</label>
        <link refid="CompareCorFiles_8cc"/>
      </node>
      <node id="4">
        <label>MHO_MK4ScanConverter.hh</label>
        <link refid="MHO__MK4ScanConverter_8hh"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="150">
        <label>MHO_ManualPolPhaseCorrection.cc</label>
        <link refid="MHO__ManualPolPhaseCorrection_8cc"/>
      </node>
      <node id="76">
        <label>MHO_StationDelayCorrectionBuilder.cc</label>
        <link refid="MHO__StationDelayCorrectionBuilder_8cc"/>
      </node>
      <node id="117">
        <label>MHO_HDF5ConversionHelpers.hh</label>
        <link refid="MHO__HDF5ConversionHelpers_8hh"/>
        <childnode refid="113" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>MHO_InitialFringeInfo.cc</label>
        <link refid="MHO__InitialFringeInfo_8cc"/>
      </node>
      <node id="142">
        <label>MHO_LSBOffset.cc</label>
        <link refid="MHO__LSBOffset_8cc"/>
      </node>
      <node id="119">
        <label>MHO_TableContainer.hh</label>
        <link refid="MHO__TableContainer_8hh"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="193" relation="include">
        </childnode>
        <childnode refid="194" relation="include">
        </childnode>
        <childnode refid="195" relation="include">
        </childnode>
        <childnode refid="196" relation="include">
        </childnode>
        <childnode refid="197" relation="include">
        </childnode>
        <childnode refid="198" relation="include">
        </childnode>
        <childnode refid="203" relation="include">
        </childnode>
        <childnode refid="204" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="205" relation="include">
        </childnode>
        <childnode refid="201" relation="include">
        </childnode>
        <childnode refid="202" relation="include">
        </childnode>
        <childnode refid="206" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>MHO_SamplerLabelerBuilder.hh</label>
        <link refid="MHO__SamplerLabelerBuilder_8hh"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="213">
        <label>MHO_FunctorBroadcaster.hh</label>
        <link refid="MHO__FunctorBroadcaster_8hh"/>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classhops_1_1MHO__NDArrayWrapper" prot="public">hops::MHO_NDArrayWrapper</innerclass>
    <innernamespace refid="namespacehops">hops</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>MHO_NDArrayWrapper_HH__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MHO_NDArrayWrapper_HH__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cinttypes&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//for<sp/>memset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__BidirectionalIterator_8hh" kindref="compound">MHO_BidirectionalIterator.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__BidirectionalStrideIterator_8hh" kindref="compound">MHO_BidirectionalStrideIterator.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__ExtensibleElement_8hh" kindref="compound">MHO_ExtensibleElement.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__Message_8hh" kindref="compound">MHO_Message.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__Meta_8hh" kindref="compound">MHO_Meta.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__NDArrayMath_8hh" kindref="compound">MHO_NDArrayMath.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__NDArrayView_8hh" kindref="compound">MHO_NDArrayView.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehops" kindref="compound">hops</ref></highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>XValueType,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>RANK<sp/>&gt;</highlight></codeline>
<codeline lineno="40" refid="classhops_1_1MHO__NDArrayWrapper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhops_1_1MHO__NDArrayWrapper" kindref="compound">MHO_NDArrayWrapper</ref></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__ExtensibleElement" kindref="compound">MHO_ExtensibleElement</ref><sp/></highlight><highlight class="comment">//any<sp/>and<sp/>all<sp/>extensions<sp/>are<sp/>purely<sp/>a<sp/>runtime<sp/>concept<sp/>and<sp/>do<sp/>NOT<sp/>get<sp/>streamed<sp/>for<sp/>I/O</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="44" refid="classhops_1_1MHO__NDArrayWrapper_1a56edb371b3b550d1ed4ac66f350d0570" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a56edb371b3b550d1ed4ac66f350d0570" kindref="member">value_type</ref><sp/>=<sp/>XValueType;</highlight></codeline>
<codeline lineno="45" refid="classhops_1_1MHO__NDArrayWrapper_1affefe47ce5c642526603332ab58c5f69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1affefe47ce5c642526603332ab58c5f69" kindref="member">index_type</ref><sp/>=<sp/>std::array&lt;<sp/>std::size_t,<sp/>RANK<sp/>&gt;;</highlight></codeline>
<codeline lineno="46" refid="classhops_1_1MHO__NDArrayWrapper_1a141382b44659721f53439ab6f5f090b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::integral_constant&lt;<sp/>std::size_t,<sp/>RANK<sp/>&gt;<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a141382b44659721f53439ab6f5f090b7" kindref="member">rank</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//constructors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//empty<sp/>constructor,<sp/>to<sp/>be<sp/>configured<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classhops_1_1MHO__NDArrayWrapper_1a10c4d9ae788a0da022e078bcc5131655" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a10c4d9ae788a0da022e078bcc5131655" kindref="member">MHO_NDArrayWrapper</ref>()<sp/>{<sp/>Construct(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/>};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//data<sp/>is<sp/>internally<sp/>allocated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="classhops_1_1MHO__NDArrayWrapper_1ae09476aea6805570b9cbe77119b680e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1ae09476aea6805570b9cbe77119b680e1" kindref="member">MHO_NDArrayWrapper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/>dim)<sp/>{<sp/>Construct(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>dim);<sp/>};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//data<sp/>is<sp/>interally<sp/>allocated,<sp/>but<sp/>copied<sp/>in<sp/>from<sp/>an<sp/>external<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="classhops_1_1MHO__NDArrayWrapper_1ab2158a0b07c120c2b59e6fc0948264c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1ab2158a0b07c120c2b59e6fc0948264c4" kindref="member">MHO_NDArrayWrapper</ref>(XValueType*<sp/>ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/>dim)<sp/>{<sp/>Construct(ptr,<sp/>dim);<sp/>};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="classhops_1_1MHO__NDArrayWrapper_1a9722a0044a9e00d23cc8b3b605788ac8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a9722a0044a9e00d23cc8b3b605788ac8" kindref="member">MHO_NDArrayWrapper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper" kindref="compound">MHO_NDArrayWrapper</ref>&amp;<sp/>obj)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Construct(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;(obj.fDims[0]));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(obj.fData.begin(),<sp/>obj.fData.end(),<sp/>fData.begin());</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="classhops_1_1MHO__NDArrayWrapper_1aee9301fd354a61b9ee7e0397b123e8d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1aee9301fd354a61b9ee7e0397b123e8d6" kindref="member">~MHO_NDArrayWrapper</ref>(){};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="classhops_1_1MHO__NDArrayWrapper_1a31e8e4d499f86c9e0299057c20f4bb29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper" kindref="compound">MHO_NDArrayWrapper</ref>*<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a31e8e4d499f86c9e0299057c20f4bb29" kindref="member">Clone</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a10c4d9ae788a0da022e078bcc5131655" kindref="member">MHO_NDArrayWrapper</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//resize<sp/>function<sp/>--<sp/>destroys<sp/>contents</highlight></codeline>
<codeline lineno="83" refid="classhops_1_1MHO__NDArrayWrapper_1a94df84a1c5370b0f73404e8f1e0da570" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a94df84a1c5370b0f73404e8f1e0da570" kindref="member">Resize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/>dim)<sp/>{<sp/>Construct(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>dim);<sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>XDimSizeTypeS<sp/>&gt;</highlight></codeline>
<codeline lineno="93" refid="classhops_1_1MHO__NDArrayWrapper_1aa8d20352642f23564ae9c5e2c0fa6ce0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(XDimSizeTypeS)<sp/>==<sp/>RANK),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>&gt;::type<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1aa8d20352642f23564ae9c5e2c0fa6ce0" kindref="member">Resize</ref>(XDimSizeTypeS...<sp/>dim)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fTmp<sp/>=<sp/>{{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(dim)...}};<sp/></highlight><highlight class="comment">//convert<sp/>the<sp/>arguments<sp/>to<sp/>an<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a94df84a1c5370b0f73404e8f1e0da570" kindref="member">Resize</ref>(&amp;(fTmp[0]));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="classhops_1_1MHO__NDArrayWrapper_1af6af1398e46295e3b5df58d03b6eea24" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1af6af1398e46295e3b5df58d03b6eea24" kindref="member">SetExternalData</ref>(XValueType*<sp/>ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/>dim)<sp/>{<sp/>Construct(ptr,<sp/>dim);<sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="classhops_1_1MHO__NDArrayWrapper_1a026be1a2ce52d4a80ff04ed96aa19991" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a026be1a2ce52d4a80ff04ed96aa19991" kindref="member">GetRank</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RANK;<sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="classhops_1_1MHO__NDArrayWrapper_1a0074f7e71474cd03305a7201b02c98e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a0074f7e71474cd03305a7201b02c98e1" kindref="member">GetSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fData.size();<sp/>};</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="classhops_1_1MHO__NDArrayWrapper_1a62cfcd1745753c8ad8f910727e7355d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a62cfcd1745753c8ad8f910727e7355d6" kindref="member">GetDimensions</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(fDims[0]);<sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="classhops_1_1MHO__NDArrayWrapper_1a345838021c44594b3774f9c3190a0361" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a345838021c44594b3774f9c3190a0361" kindref="member">GetDimensions</ref>(std::size_t*<sp/>dim)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="134"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RANK;<sp/>i++)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim[i]<sp/>=<sp/>fDims[i];</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="classhops_1_1MHO__NDArrayWrapper_1ada0ccecfc1c12a4d94ce3abcb2114912" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1affefe47ce5c642526603332ab58c5f69" kindref="member">index_type</ref><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1ada0ccecfc1c12a4d94ce3abcb2114912" kindref="member">GetDimensionArray</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fDims;<sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(std::size_t<sp/>idx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="155"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(idx<sp/>&lt;<sp/>RANK)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fDims[idx];</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;MHO_NDArrayWrapper::GetDimension()<sp/>index<sp/>out<sp/>of<sp/>range.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="classhops_1_1MHO__NDArrayWrapper_1a98c9989309fb32106c8aa2dd08ecce3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a98c9989309fb32106c8aa2dd08ecce3c" kindref="member">GetStrides</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(fStrides[0]);<sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="classhops_1_1MHO__NDArrayWrapper_1a126c37428e5c7ba6d99e4f4672cc974d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a126c37428e5c7ba6d99e4f4672cc974d" kindref="member">GetStrides</ref>(std::size_t*<sp/>strd)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="179"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RANK;<sp/>i++)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strd[i]<sp/>=<sp/>fStrides[i];</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="classhops_1_1MHO__NDArrayWrapper_1a2648fbe1709d5cf3c589094ed16f570f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1affefe47ce5c642526603332ab58c5f69" kindref="member">index_type</ref><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a2648fbe1709d5cf3c589094ed16f570f" kindref="member">GetStrideArray</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fStrides;<sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="classhops_1_1MHO__NDArrayWrapper_1adf798630798e2a060eef0bd8388a612c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1adf798630798e2a060eef0bd8388a612c" kindref="member">GetStride</ref>(std::size_t<sp/>idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fStrides[idx];<sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>XIndexTypeS<sp/>&gt;</highlight></codeline>
<codeline lineno="197" refid="classhops_1_1MHO__NDArrayWrapper_1a1214865d6bfa04ed3ff53a1cafc2c26d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(XIndexTypeS)<sp/>==<sp/>RANK),<sp/>XValueType&amp;<sp/>&gt;::type<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a1214865d6bfa04ed3ff53a1cafc2c26d" kindref="member">operator()</ref>(XIndexTypeS...<sp/>idx)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fTmp<sp/>=<sp/>{{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(idx)...}};</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a96759a6fc3a3fb947fbadf05891bb5ce" kindref="member">ValueAt</ref>(fTmp);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>XIndexTypeS<sp/>&gt;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(XIndexTypeS)<sp/>==<sp/>RANK),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XValueType&amp;<sp/>&gt;::type</highlight></codeline>
<codeline lineno="211" refid="classhops_1_1MHO__NDArrayWrapper_1aab97957bf2e3d5ebd8c3d12ac8924710" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1aab97957bf2e3d5ebd8c3d12ac8924710" kindref="member">operator()</ref>(XIndexTypeS...<sp/>idx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="212"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fTmp<sp/>=<sp/>{{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(idx)...}};</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a96759a6fc3a3fb947fbadf05891bb5ce" kindref="member">ValueAt</ref>(fTmp);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>XIndexTypeS<sp/>&gt;</highlight></codeline>
<codeline lineno="224" refid="classhops_1_1MHO__NDArrayWrapper_1a86345bc1efef3142303161022e00a492" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(XIndexTypeS)<sp/>==<sp/>RANK),<sp/>XValueType&amp;<sp/>&gt;::type<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a86345bc1efef3142303161022e00a492" kindref="member">at</ref>(XIndexTypeS...<sp/>idx)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//make<sp/>sure<sp/>the<sp/>indices<sp/>are<sp/>valid<sp/>for<sp/>the<sp/>given<sp/>array<sp/>dimensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fTmp<sp/>=<sp/>{{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(idx)...}};</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classhops_1_1MHO__NDArrayWrapper_1a169c2e70750de3e520aeedf8c12567af" kindref="member">CheckIndexValidity</ref>(fTmp))</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a96759a6fc3a3fb947fbadf05891bb5ce" kindref="member">ValueAt</ref>(fTmp);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;MHO_NDArrayWrapper::at()<sp/>indices<sp/>out<sp/>of<sp/>range.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>XIndexTypeS<sp/>&gt;</highlight></codeline>
<codeline lineno="245" refid="classhops_1_1MHO__NDArrayWrapper_1ad4127abd78c85338cfe57b89c955e255" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(XIndexTypeS)<sp/>==<sp/>RANK),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XValueType&amp;<sp/>&gt;::type<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1ad4127abd78c85338cfe57b89c955e255" kindref="member">at</ref>(XIndexTypeS...<sp/>idx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="246"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//make<sp/>sure<sp/>the<sp/>indices<sp/>are<sp/>valid<sp/>for<sp/>the<sp/>given<sp/>array<sp/>dimensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fTmp<sp/>=<sp/>{{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(idx)...}};</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classhops_1_1MHO__NDArrayWrapper_1a169c2e70750de3e520aeedf8c12567af" kindref="member">CheckIndexValidity</ref>(fTmp))</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a96759a6fc3a3fb947fbadf05891bb5ce" kindref="member">ValueAt</ref>(fTmp);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;MHO_NDArrayWrapper::at()<sp/>indices<sp/>out<sp/>of<sp/>range.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="classhops_1_1MHO__NDArrayWrapper_1a39b2e463d5abc04ca39a1497ca85f06d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XValueType*<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a39b2e463d5abc04ca39a1497ca85f06d" kindref="member">GetData</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(fData[0]);<sp/>};</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="classhops_1_1MHO__NDArrayWrapper_1a58b9a574093a7850e1cbf776947a66e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XValueType*<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a58b9a574093a7850e1cbf776947a66e3" kindref="member">GetData</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(fData[0]);<sp/>};</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//fast<sp/>access<sp/>operator<sp/>by<sp/>1-dim<sp/>index<sp/>(absolute-position)<sp/>into<sp/>the<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>assumes<sp/>the<sp/>data<sp/>is<sp/>contiguous<sp/>in<sp/>memory,<sp/>which<sp/>may<sp/>not<sp/>be<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>array<sp/>wrapper<sp/>is<sp/>a<sp/>slice<sp/>of<sp/>a<sp/>larger<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269" refid="classhops_1_1MHO__NDArrayWrapper_1ae08ecbd9e766174fbbf64f6816754a17" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XValueType&amp;<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1ae08ecbd9e766174fbbf64f6816754a17" kindref="member">operator[]</ref>(std::size_t<sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fData[i];<sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="classhops_1_1MHO__NDArrayWrapper_1ae7743032f686b99d2036dec6023a1316" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XValueType&amp;<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1ae7743032f686b99d2036dec6023a1316" kindref="member">operator[]</ref>(std::size_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fData[i];<sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//assignment<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="classhops_1_1MHO__NDArrayWrapper_1a4a5403ca4bcf160b1cf26829b098258c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper" kindref="compound">MHO_NDArrayWrapper</ref>&amp;<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a4a5403ca4bcf160b1cf26829b098258c" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper" kindref="compound">MHO_NDArrayWrapper</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;rhs)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Construct(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;(rhs.fDims[0]));</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(rhs.fData.begin(),<sp/>rhs.fData.end(),<sp/>this-&gt;fData.begin());</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="classhops_1_1MHO__NDArrayWrapper_1a9c221f6c4b64086be626754eb2913d88" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a9c221f6c4b64086be626754eb2913d88" kindref="member">SetArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XValueType&amp;<sp/>obj)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>fData.begin();<sp/>it<sp/>!=<sp/>fData.end();<sp/>it++)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*it<sp/>=<sp/>obj;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="classhops_1_1MHO__NDArrayWrapper_1aa8c5dd06d0440052d4cbc8ceada33ef0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1aa8c5dd06d0440052d4cbc8ceada33ef0" kindref="member">ZeroArray</ref>()<sp/>{<sp/>std::memset(&amp;(fData[0]),<sp/>0,<sp/>(fData.size())<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(XValueType));<sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//copy,<sp/>effectively<sp/>the<sp/>same<sp/>as<sp/>assignment<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="classhops_1_1MHO__NDArrayWrapper_1ae07fb3f8a2f4b3e36cfdb8bbbed064ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1ae07fb3f8a2f4b3e36cfdb8bbbed064ee" kindref="member">Copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper" kindref="compound">MHO_NDArrayWrapper</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;rhs)</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Construct(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;(rhs.fDims[0]));</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(rhs.fData.begin(),<sp/>rhs.fData.end(),<sp/>this-&gt;fData.begin());</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//copy,<sp/>but<sp/>from<sp/>an<sp/>array<sp/>view<sp/>with<sp/>the<sp/>same<sp/>rank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="classhops_1_1MHO__NDArrayWrapper_1aa977a1dc4a490d4cd49583de27d06353" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1aa977a1dc4a490d4cd49583de27d06353" kindref="member">Copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayView" kindref="compound">MHO_NDArrayView&lt; XValueType, RANK &gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dims<sp/>=<sp/>rhs.<ref refid="classhops_1_1MHO__NDArrayView_1abe220bb1aa56d516c13200d38abdb3da" kindref="member">GetDimensionArray</ref>();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Construct(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;(dims[0]));</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(rhs.<ref refid="classhops_1_1MHO__NDArrayView_1af6a1461524c3f8f4ff932002f0209a7a" kindref="member">cbegin</ref>(),<sp/>rhs.<ref refid="classhops_1_1MHO__NDArrayView_1abe145c839a89fa3f63212a08640ca42e" kindref="member">cend</ref>(),<sp/>this-&gt;fData.begin());</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="classhops_1_1MHO__NDArrayWrapper_1ae37f0c04e981b6bd7f361252d3fc6917" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1ae37f0c04e981b6bd7f361252d3fc6917" kindref="member">GetOffsetForIndices</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/>index)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MHO_NDArrayMath::OffsetFromStrideIndex&lt;<sp/>RANK<sp/>&gt;(&amp;(fStrides[0]),<sp/>index);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="classhops_1_1MHO__NDArrayWrapper_1ae2bc7c227bd2de2ae6edc3e3d1c6bf29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1affefe47ce5c642526603332ab58c5f69" kindref="member">index_type</ref><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1ae2bc7c227bd2de2ae6edc3e3d1c6bf29" kindref="member">GetIndicesForOffset</ref>(std::size_t<sp/>offset)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1affefe47ce5c642526603332ab58c5f69" kindref="member">index_type</ref><sp/>index;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MHO_NDArrayMath::RowMajorIndexFromOffset&lt;<sp/>RANK<sp/>&gt;(offset,<sp/>&amp;(fDims[0]),<sp/>&amp;(index[0]));</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>XIndexTypeS<sp/>&gt;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(XIndexTypeS)<sp/>&lt;<sp/>RANK),</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayView" kindref="compound">MHO_NDArrayView</ref>&lt;<sp/>XValueType,<sp/>RANK<sp/>-<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(XIndexTypeS))<sp/>&gt;<sp/>&gt;::type</highlight></codeline>
<codeline lineno="347" refid="classhops_1_1MHO__NDArrayWrapper_1aed809d9fc71513abea9394d3d2bedcfb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1aed809d9fc71513abea9394d3d2bedcfb" kindref="member">SubView</ref>(XIndexTypeS...<sp/>idx)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::integral_constant&lt;<sp/>std::size_t,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(XIndexTypeS)<sp/>&gt;<sp/>nfixed_t;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;<sp/>std::size_t,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(XIndexTypeS)<sp/>&gt;<sp/>leading_idx<sp/>=<sp/>{{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(idx)...}};</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RANK;<sp/>i++)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fTmp[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>leading_idx.size();<sp/>i++)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fTmp[i]<sp/>=<sp/>leading_idx[i];</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>offset<sp/>=<sp/>MHO_NDArrayMath::OffsetFromStrideIndex&lt;<sp/>RANK<sp/>&gt;(&amp;(fStrides[0]),<sp/>&amp;(fTmp[0]));</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayView" kindref="compound">MHO_NDArrayView</ref>&lt;<sp/>XValueType,<sp/>RANK<sp/>-<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(XIndexTypeS))<sp/>&gt;(&amp;(fData[offset]),<sp/>&amp;(fDims[nfixed_t]),</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(fStrides[nfixed_t]));</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>XIndexTypeS<sp/>&gt;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(XIndexTypeS)<sp/>==<sp/>RANK),</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayView" kindref="compound">MHO_NDArrayView</ref>&lt;<sp/>XValueType,<sp/><ref refid="structhops_1_1count__instances__of__type" kindref="compound">count_instances_of_type</ref>&lt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(XIndexTypeS)<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XIndexTypeS...<sp/>&gt;::<ref refid="structvalue" kindref="compound">value</ref><sp/>&gt;<sp/>&gt;::type</highlight></codeline>
<codeline lineno="381" refid="classhops_1_1MHO__NDArrayWrapper_1acef2af404b1e035a34f100ea2fbd542d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1acef2af404b1e035a34f100ea2fbd542d" kindref="member">SliceView</ref>(XIndexTypeS...<sp/>idx)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::integral_constant&lt;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t,<sp/><ref refid="structhops_1_1count__instances__of__type" kindref="compound">count_instances_of_type</ref>&lt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(XIndexTypeS)<sp/>-<sp/>1,<sp/>XIndexTypeS...<sp/>&gt;::<ref refid="structvalue" kindref="compound">value</ref><sp/>&gt;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfree_t;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>index_filler</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_filler()</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RANK;<sp/>i++)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>full_idx[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fixed_idx.clear();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_idx.clear();</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~index_filler(){};</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;<sp/>std::size_t,<sp/>RANK<sp/>&gt;<sp/>full_idx;<sp/></highlight><highlight class="comment">//list<sp/>the<sp/>index<sp/>values<sp/>of<sp/>the<sp/>start<sp/>of<sp/>the<sp/>slice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::size_t<sp/>&gt;<sp/>fixed_idx;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//list<sp/>the<sp/>indexes<sp/>which<sp/>are<sp/>fixed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::size_t<sp/>&gt;<sp/>free_idx;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//list<sp/>the<sp/>indexs<sp/>which<sp/>are<sp/>free<sp/>to<sp/>vary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//placeholder<sp/>type<sp/>sets<sp/>index<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a1214865d6bfa04ed3ff53a1cafc2c26d" kindref="member">operator()</ref>(std::size_t<sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>full_idx[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_idx.push_back(i);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//index<sp/>types<sp/>pass<sp/>along<sp/>their<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a1214865d6bfa04ed3ff53a1cafc2c26d" kindref="member">operator()</ref>(std::size_t<sp/>i,<sp/>std::size_t<sp/><ref refid="structvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>full_idx[i]<sp/>=<sp/><ref refid="structvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fixed_idx.push_back(i);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//make<sp/>sure<sp/>the<sp/>indexes<sp/>are<sp/>listed<sp/>in<sp/>increasing<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reorder()</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(free_idx.begin(),<sp/>free_idx.end());</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(fixed_idx.begin(),<sp/>fixed_idx.end());<sp/></highlight><highlight class="comment">//make<sp/>sure<sp/>they<sp/>are<sp/>in<sp/>increasing<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_filler<sp/>filler;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tuple&lt;<sp/>XIndexTypeS...<sp/>&gt;<sp/>input_idx<sp/>=<sp/>std::make_tuple(idx...);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhops_1_1indexed__tuple__visit_1ae453a92329ed96d5225a618d322f5532" kindref="member">indexed_tuple_visit&lt; RANK &gt;::visit</ref>(input_idx,<sp/>filler);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filler.reorder();</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>offset<sp/>=<sp/>MHO_NDArrayMath::OffsetFromRowMajorIndex&lt;<sp/>RANK<sp/>&gt;(&amp;(fDims[0]),<sp/>&amp;(filler.full_idx[0]));</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;<sp/>std::size_t,<sp/>nfree_t<sp/>&gt;<sp/>dim;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;<sp/>std::size_t,<sp/>nfree_t<sp/>&gt;<sp/>strides;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim.size();<sp/>i++)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim[i]<sp/>=<sp/>fDims[filler.free_idx[i]];</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strides[i]<sp/>=<sp/>fStrides[filler.free_idx[i]];</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MHO_NDArrayView&lt;<sp/>XValueType,<sp/>nfree_t<sp/>&gt;(&amp;(fData[offset]),<sp/>&amp;(dim[0]),<sp/>&amp;(strides[0]));</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//simple<sp/>in-place<sp/>compound<sp/>assignment<sp/>operators<sp/>(mult/add/sub)//////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;<sp/>std::is_same&lt;<sp/>XValueType,<sp/>T<sp/>&gt;::value<sp/>or<sp/>std::is_integral&lt;<sp/>T<sp/>&gt;::value<sp/>or</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_floating_point&lt;<sp/>T<sp/>&gt;::value,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MHO_NDArrayWrapper&amp;<sp/>&gt;::type<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456" refid="classhops_1_1MHO__NDArrayWrapper_1ac97397a9b7bf11058fab28db8997ae73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1ac97397a9b7bf11058fab28db8997ae73" kindref="member">operator*=</ref>(T<sp/>aScalar)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>length<sp/>=<sp/>fData.size();</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fData[i]<sp/>*=<sp/>aScalar;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;<sp/>std::is_same&lt;<sp/>XValueType,<sp/>T<sp/>&gt;::value<sp/>or<sp/>std::is_integral&lt;<sp/>T<sp/>&gt;::value<sp/>or</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_floating_point&lt;<sp/>T<sp/>&gt;::value,</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper" kindref="compound">MHO_NDArrayWrapper</ref>&amp;<sp/>&gt;::type<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473" refid="classhops_1_1MHO__NDArrayWrapper_1a3182af011c55228158b30f259c018143" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a3182af011c55228158b30f259c018143" kindref="member">operator+=</ref>(T<sp/>aScalar)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>length<sp/>=<sp/>fData.size();</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fData[i]<sp/>+=<sp/>aScalar;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;<sp/>std::is_same&lt;<sp/>XValueType,<sp/>T<sp/>&gt;::value<sp/>or<sp/>std::is_integral&lt;<sp/>T<sp/>&gt;::value<sp/>or</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_floating_point&lt;<sp/>T<sp/>&gt;::value,</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper" kindref="compound">MHO_NDArrayWrapper</ref>&amp;<sp/>&gt;::type<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490" refid="classhops_1_1MHO__NDArrayWrapper_1a6f43188195639734e28613ce42a0d615" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a6f43188195639734e28613ce42a0d615" kindref="member">operator-=</ref>(T<sp/>aScalar)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>length<sp/>=<sp/>fData.size();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fData[i]<sp/>-=<sp/>aScalar;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="503" refid="classhops_1_1MHO__NDArrayWrapper_1ac2a845d7480eaf996823c1736327f1d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper" kindref="compound">MHO_NDArrayWrapper</ref>&amp;<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1ac2a845d7480eaf996823c1736327f1d4" kindref="member">operator*=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper" kindref="compound">MHO_NDArrayWrapper</ref>&amp;<sp/>anArray)</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!HaveSameNumberOfElements(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;anArray))</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;MHO_NDArrayWrapper::*=<sp/>size<sp/>mismatch.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>length<sp/>=<sp/>fData.size();</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fData[i]<sp/>*=<sp/>anArray.fData[i];</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="520" refid="classhops_1_1MHO__NDArrayWrapper_1acd0add8ffe16229e22988cb2d9fa18e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper" kindref="compound">MHO_NDArrayWrapper</ref>&amp;<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1acd0add8ffe16229e22988cb2d9fa18e0" kindref="member">operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper" kindref="compound">MHO_NDArrayWrapper</ref>&amp;<sp/>anArray)</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!HaveSameNumberOfElements(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;anArray))</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;MHO_NDArrayWrapper::+=<sp/>size<sp/>mismatch.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>length<sp/>=<sp/>fData.size();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fData[i]<sp/>+=<sp/>anArray.fData[i];</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="538" refid="classhops_1_1MHO__NDArrayWrapper_1a55d921915d40d2944a94b3932259b084" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper" kindref="compound">MHO_NDArrayWrapper</ref>&amp;<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a55d921915d40d2944a94b3932259b084" kindref="member">operator-=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper" kindref="compound">MHO_NDArrayWrapper</ref>&amp;<sp/>anArray)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!HaveSameNumberOfElements(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;anArray))</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;MHO_NDArrayWrapper::-=<sp/>size<sp/>mismatch.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>length<sp/>=<sp/>fData.size();</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fData[i]<sp/>-=<sp/>anArray.fData[i];</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552" refid="classhops_1_1MHO__NDArrayWrapper_1a169c2e70750de3e520aeedf8c12567af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a169c2e70750de3e520aeedf8c12567af" kindref="member">CheckIndexValidity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1affefe47ce5c642526603332ab58c5f69" kindref="member">index_type</ref>&amp;<sp/>idx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="553"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MHO_NDArrayMath::CheckIndexValidity&lt;<sp/>RANK<sp/>&gt;(&amp;(fDims[0]),<sp/>&amp;(idx[0]));</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557" refid="classhops_1_1MHO__NDArrayWrapper_1a96759a6fc3a3fb947fbadf05891bb5ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XValueType&amp;<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a96759a6fc3a3fb947fbadf05891bb5ce" kindref="member">ValueAt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1affefe47ce5c642526603332ab58c5f69" kindref="member">index_type</ref>&amp;<sp/>idx)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fData[MHO_NDArrayMath::OffsetFromStrideIndex&lt;<sp/>RANK<sp/>&gt;(&amp;(fStrides[0]),<sp/>&amp;(idx[0]))];</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562" refid="classhops_1_1MHO__NDArrayWrapper_1ab253fae68f9dc32b00828842e0a2b37b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XValueType&amp;<sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1ab253fae68f9dc32b00828842e0a2b37b" kindref="member">ValueAt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1affefe47ce5c642526603332ab58c5f69" kindref="member">index_type</ref>&amp;<sp/>idx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="563"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fData[MHO_NDArrayMath::OffsetFromStrideIndex&lt;<sp/>RANK<sp/>&gt;(&amp;(fStrides[0]),<sp/>&amp;(idx[0]))];</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>XValueType<sp/>&gt;<sp/>fData;<sp/></highlight><highlight class="comment">//used<sp/>for<sp/>internally<sp/>managed<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_type<sp/>fDims;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//size<sp/>of<sp/>each<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_type<sp/>fStrides;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//strides<sp/>between<sp/>elements<sp/>in<sp/>each<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>index_type<sp/>fTmp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//temp<sp/>index<sp/>workspace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Construct(XValueType*<sp/>ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/>dim)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//default<sp/>construction<sp/>(empty)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RANK;<sp/>i++)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fDims[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fStrides[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ptr<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>dim<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//dimensions<sp/>known,<sp/>so<sp/>create<sp/>array<sp/>but<sp/>don&apos;t<sp/>fill<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dim<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RANK;<sp/>i++)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fDims[i]<sp/>=<sp/>dim[i];</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>length<sp/>=<sp/>MHO_NDArrayMath::TotalArraySize&lt;<sp/>RANK<sp/>&gt;(&amp;(fDims[0]));</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ComputeStrides();</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fData.resize(length);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ptr<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//if<sp/>given<sp/>a<sp/>ptr,<sp/>copy<sp/>in<sp/>data<sp/>from<sp/>this<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::memcpy(&amp;(fData[0]),<sp/>ptr,<sp/>length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(XValueType));</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ComputeStrides()</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>RANK;<sp/>i++)</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//stride<sp/>for<sp/>elements<sp/>of<sp/>this<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>stride<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>j<sp/>=<sp/>RANK<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(j<sp/>&gt;<sp/>i)</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stride<sp/>*=<sp/>fDims[j];</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fStrides[i]<sp/>=<sp/>stride;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>iterator<sp/>definitions<sp/>//////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="622" refid="classhops_1_1MHO__NDArrayWrapper_1abb1638428d710f93ff8e0f64e3f6fa0b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__BidirectionalIterator" kindref="compound">iterator</ref><sp/>=<sp/><ref refid="classhops_1_1MHO__BidirectionalIterator" kindref="compound">MHO_BidirectionalIterator&lt; XValueType &gt;</ref>;</highlight></codeline>
<codeline lineno="623" refid="classhops_1_1MHO__NDArrayWrapper_1a7923f97d7660ae966a2a6a1a8347bc92" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__BidirectionalStrideIterator" kindref="compound">stride_iterator</ref><sp/>=<sp/><ref refid="classhops_1_1MHO__BidirectionalStrideIterator" kindref="compound">MHO_BidirectionalStrideIterator&lt; XValueType &gt;</ref>;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625" refid="classhops_1_1MHO__NDArrayWrapper_1a0bbcb7c60ab86b7f58cdd376954005c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__BidirectionalConstIterator" kindref="compound">const_iterator</ref><sp/>=<sp/><ref refid="classhops_1_1MHO__BidirectionalConstIterator" kindref="compound">MHO_BidirectionalConstIterator&lt; XValueType &gt;</ref>;</highlight></codeline>
<codeline lineno="626" refid="classhops_1_1MHO__NDArrayWrapper_1abcdb068ba89ba14eb6251b77f03ea67f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__BidirectionalConstStrideIterator" kindref="compound">const_stride_iterator</ref><sp/>=<sp/><ref refid="classhops_1_1MHO__BidirectionalConstStrideIterator" kindref="compound">MHO_BidirectionalConstStrideIterator&lt; XValueType &gt;</ref>;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628" refid="classhops_1_1MHO__NDArrayWrapper_1a25a966b995be2638bb9efbdf469ce463" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__BidirectionalIterator" kindref="compound">iterator</ref><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a25a966b995be2638bb9efbdf469ce463" kindref="member">begin</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__BidirectionalIterator" kindref="compound">iterator</ref>(&amp;(fData[0]),<sp/>&amp;(fData[0]),<sp/>fData.size());<sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630" refid="classhops_1_1MHO__NDArrayWrapper_1afa1b4f2d5198f6bce6da0a0d143e7642" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__BidirectionalIterator" kindref="compound">iterator</ref><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1afa1b4f2d5198f6bce6da0a0d143e7642" kindref="member">end</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__BidirectionalIterator" kindref="compound">iterator</ref>(&amp;(fData[0]),<sp/>&amp;(fData[0])<sp/>+<sp/>fData.size(),<sp/>fData.size());<sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632" refid="classhops_1_1MHO__NDArrayWrapper_1a532158cedcaba648043e892771ef6f89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__BidirectionalIterator" kindref="compound">iterator</ref><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a532158cedcaba648043e892771ef6f89" kindref="member">iterator_at</ref>(std::size_t<sp/>offset)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__BidirectionalIterator" kindref="compound">iterator</ref>(&amp;(fData[0]),<sp/>&amp;(fData[0])<sp/>+<sp/><ref refid="max555_8c_1ac6afabdc09a49a433ee19d8a9486056d" kindref="member">std::min</ref>(offset,<sp/>fData.size()),<sp/>fData.size());</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637" refid="classhops_1_1MHO__NDArrayWrapper_1a7ab32f2b9da4b4c686195f37371b322a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__BidirectionalConstIterator" kindref="compound">const_iterator</ref><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a7ab32f2b9da4b4c686195f37371b322a" kindref="member">cbegin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__BidirectionalConstIterator" kindref="compound">const_iterator</ref>(&amp;(fData[0]),<sp/>&amp;(fData[0]),<sp/>fData.size());<sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639" refid="classhops_1_1MHO__NDArrayWrapper_1ab7cce5b792a946e3318873b8c6e4505d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__BidirectionalConstIterator" kindref="compound">const_iterator</ref><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1ab7cce5b792a946e3318873b8c6e4505d" kindref="member">cend</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__BidirectionalConstIterator" kindref="compound">const_iterator</ref>(&amp;(fData[0]),<sp/>&amp;(fData[0])<sp/>+<sp/>fData.size(),<sp/>fData.size());<sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641" refid="classhops_1_1MHO__NDArrayWrapper_1ac2305ae95b3df2288e7ff313670e918b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__BidirectionalConstIterator" kindref="compound">const_iterator</ref><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1ac2305ae95b3df2288e7ff313670e918b" kindref="member">citerator_at</ref>(std::size_t<sp/>offset)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="642"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__BidirectionalConstIterator" kindref="compound">const_iterator</ref>(&amp;(fData[0]),<sp/>&amp;(fData[0])<sp/>+<sp/><ref refid="max555_8c_1ac6afabdc09a49a433ee19d8a9486056d" kindref="member">std::min</ref>(offset,<sp/>fData.size()),<sp/>fData.size());</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646" refid="classhops_1_1MHO__NDArrayWrapper_1aaf1d901b144e261cd9c7ab83d337d625" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__BidirectionalStrideIterator" kindref="compound">stride_iterator</ref><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1aaf1d901b144e261cd9c7ab83d337d625" kindref="member">stride_begin</ref>(std::size_t<sp/>stride)</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__BidirectionalStrideIterator" kindref="compound">stride_iterator</ref>(&amp;(fData[0]),<sp/>&amp;(fData[0]),<sp/>fData.size(),<sp/>stride);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651" refid="classhops_1_1MHO__NDArrayWrapper_1ad36853c2a7f4c224e8eef6fe2bf8fff2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__BidirectionalStrideIterator" kindref="compound">stride_iterator</ref><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1ad36853c2a7f4c224e8eef6fe2bf8fff2" kindref="member">stride_end</ref>(std::size_t<sp/>stride)</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__BidirectionalStrideIterator" kindref="compound">stride_iterator</ref>(&amp;(fData[0]),<sp/>&amp;(fData[0])<sp/>+<sp/>fData.size(),<sp/>fData.size(),<sp/>stride);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656" refid="classhops_1_1MHO__NDArrayWrapper_1aacdd7954156fc6e121fd9d929c74c9ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__BidirectionalStrideIterator" kindref="compound">stride_iterator</ref><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1aacdd7954156fc6e121fd9d929c74c9ec" kindref="member">stride_iterator_at</ref>(std::size_t<sp/>offset,<sp/>std::size_t<sp/>stride)</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__BidirectionalStrideIterator" kindref="compound">stride_iterator</ref>(&amp;(fData[0]),<sp/>&amp;(fData[0])<sp/>+<sp/><ref refid="max555_8c_1ac6afabdc09a49a433ee19d8a9486056d" kindref="member">std::min</ref>(offset,<sp/>fData.size()),<sp/>fData.size(),<sp/>stride);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661" refid="classhops_1_1MHO__NDArrayWrapper_1a0165a498f23f924ad95725f5e997e55f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__BidirectionalConstStrideIterator" kindref="compound">const_stride_iterator</ref><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a0165a498f23f924ad95725f5e997e55f" kindref="member">cstride_begin</ref>(std::size_t<sp/>stride)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="662"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__BidirectionalConstStrideIterator" kindref="compound">const_stride_iterator</ref>(&amp;(fData[0]),<sp/>&amp;(fData[0]),<sp/>fData.size(),<sp/>stride);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666" refid="classhops_1_1MHO__NDArrayWrapper_1a5c58d89c845a173e2426b0bb4b1c7c4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__BidirectionalConstStrideIterator" kindref="compound">const_stride_iterator</ref><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a5c58d89c845a173e2426b0bb4b1c7c4d" kindref="member">cstride_end</ref>(std::size_t<sp/>stride)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="667"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__BidirectionalConstStrideIterator" kindref="compound">const_stride_iterator</ref>(&amp;(fData[0]),<sp/>&amp;(fData[0])<sp/>+<sp/>fData.size(),<sp/>fData.size(),<sp/>stride);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671" refid="classhops_1_1MHO__NDArrayWrapper_1a8f57bdd0110d192b55d3a6672e62b237" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__BidirectionalConstStrideIterator" kindref="compound">const_stride_iterator</ref><sp/><ref refid="classhops_1_1MHO__NDArrayWrapper_1a8f57bdd0110d192b55d3a6672e62b237" kindref="member">cstride_iterator_at</ref>(std::size_t<sp/>offset,<sp/>std::size_t<sp/>stride)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="672"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__BidirectionalConstStrideIterator" kindref="compound">const_stride_iterator</ref>(&amp;(fData[0]),<sp/>&amp;(fData[0])<sp/>+<sp/><ref refid="max555_8c_1ac6afabdc09a49a433ee19d8a9486056d" kindref="member">std::min</ref>(offset,<sp/>fData.size()),<sp/>fData.size(),<sp/>stride);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal">};</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="comment">//include<sp/>the<sp/>partial<sp/>specializations<sp/>for<sp/>RANK=0<sp/>and<sp/>RANK=1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__NDArrayWrapper__0_8hh" kindref="compound">MHO_NDArrayWrapper_0.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__NDArrayWrapper__1_8hh" kindref="compound">MHO_NDArrayWrapper_1.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehops" kindref="compound">hops</ref></highlight></codeline>
<codeline lineno="684"><highlight class="normal">{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment">//utilities<sp/>////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="697"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>XArrayType1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>XArrayType2<sp/>&gt;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HaveSameRank(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XArrayType1*<sp/>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XArrayType2*<sp/>)</highlight></codeline>
<codeline lineno="699"><highlight class="normal">{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(XArrayType1::rank::value<sp/>==<sp/>XArrayType2::rank::value);</highlight></codeline>
<codeline lineno="701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>XArrayType1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>XArrayType2<sp/>&gt;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HaveSameNumberOfElements(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XArrayType1*<sp/>arr1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XArrayType2*<sp/>arr2)</highlight></codeline>
<codeline lineno="715"><highlight class="normal">{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(arr1-&gt;GetSize()<sp/>==<sp/>arr2-&gt;GetSize());</highlight></codeline>
<codeline lineno="717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>XArrayType1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>XArrayType2<sp/>&gt;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HaveSameDimensions(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XArrayType1*<sp/>arr1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XArrayType2*<sp/>arr2)</highlight></codeline>
<codeline lineno="731"><highlight class="normal">{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>shape1[XArrayType1::rank::value];</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>shape2[XArrayType2::rank::value];</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(HaveSameRank(arr1,<sp/>arr2))</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rank<sp/>=<sp/>XArrayType1::rank::value;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr1-&gt;GetDimensions(shape1);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr2-&gt;GetDimensions(shape2);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rank;<sp/>i++)</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(shape1[i]<sp/>!=<sp/>shape2[i])</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight></codeline>
    </programlisting>
    <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayWrapper.hh"/>
  </compounddef>
</doxygen>
