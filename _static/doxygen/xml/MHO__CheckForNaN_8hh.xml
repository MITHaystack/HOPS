<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="MHO__CheckForNaN_8hh" kind="file" language="C++">
    <compoundname>MHO_CheckForNaN.hh</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">complex</includes>
    <includedby refid="MHO__NaNMasker_8hh" local="yes">MHO_NaNMasker.hh</includedby>
    <incdepgraph>
      <node id="2">
        <label>cmath</label>
      </node>
      <node id="1">
        <label>MHO_CheckForNaN.hh</label>
        <link refid="MHO__CheckForNaN_8hh"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>complex</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8">
        <label>MHO_IonosphericFringeFitter.cc</label>
        <link refid="MHO__IonosphericFringeFitter_8cc"/>
      </node>
      <node id="9">
        <label>MHO_BasicFringeFitter.cc</label>
        <link refid="MHO__BasicFringeFitter_8cc"/>
      </node>
      <node id="11">
        <label>MHO_SingleSidebandNormFX.cc</label>
        <link refid="MHO__SingleSidebandNormFX_8cc"/>
      </node>
      <node id="12">
        <label>MHO_ComputePlotData.hh</label>
        <link refid="MHO__ComputePlotData_8hh"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>MHO_BasicFringeUtilities.cc</label>
        <link refid="MHO__BasicFringeUtilities_8cc"/>
      </node>
      <node id="3">
        <label>MHO_MixedSidebandNormFX.hh</label>
        <link refid="MHO__MixedSidebandNormFX_8hh"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>MHO_IonosphericFringeFitter.hh</label>
        <link refid="MHO__IonosphericFringeFitter_8hh"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>MHO_SingleSidebandNormFX.hh</label>
        <link refid="MHO__SingleSidebandNormFX_8hh"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>MHO_FringeFitterFactory.cc</label>
        <link refid="MHO__FringeFitterFactory_8cc"/>
      </node>
      <node id="5">
        <label>MHO_BasicFringeFitter.hh</label>
        <link refid="MHO__BasicFringeFitter_8hh"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>MHO_MixedSidebandNormFX.cc</label>
        <link refid="MHO__MixedSidebandNormFX_8cc"/>
      </node>
      <node id="1">
        <label>MHO_CheckForNaN.hh</label>
        <link refid="MHO__CheckForNaN_8hh"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>MHO_FringePlotInfo.cc</label>
        <link refid="MHO__FringePlotInfo_8cc"/>
      </node>
      <node id="14">
        <label>MHO_ComputePlotData.cc</label>
        <link refid="MHO__ComputePlotData_8cc"/>
      </node>
      <node id="2">
        <label>MHO_NaNMasker.hh</label>
        <link refid="MHO__NaNMasker_8hh"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classhops_1_1MHO__CheckForNaN" prot="public">hops::MHO_CheckForNaN</innerclass>
    <innernamespace refid="namespacehops">hops</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>MHO_CheckForNaN_HH__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MHO_CheckForNaN_HH__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehops" kindref="compound">hops</ref><sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="classhops_1_1MHO__CheckForNaN" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>XNumericalType<sp/>&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhops_1_1MHO__CheckForNaN" kindref="compound">MHO_CheckForNaN</ref></highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="24" refid="classhops_1_1MHO__CheckForNaN_1ae722e29483d299928a1b8501bf4f8ca6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__CheckForNaN_1ae722e29483d299928a1b8501bf4f8ca6" kindref="member">MHO_CheckForNaN</ref>();</highlight></codeline>
<codeline lineno="25" refid="classhops_1_1MHO__CheckForNaN_1a72d0ebd4fa24af76b420a56fcb0007c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__CheckForNaN_1a72d0ebd4fa24af76b420a56fcb0007c0" kindref="member">~MHO_CheckForNaN</ref>();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="classhops_1_1MHO__CheckForNaN_1aca5fd8f3a7a889caf03c0542d8a32ea0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__CheckForNaN_1aca5fd8f3a7a889caf03c0542d8a32ea0" kindref="member">isnan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XNumericalType&amp;<sp/><ref refid="structvalue" kindref="compound">value</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvalue" kindref="compound">value</ref><sp/>!=<sp/><ref refid="structvalue" kindref="compound">value</ref>;<sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="38"><highlight class="normal">};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//overloads<sp/>for<sp/>numerical<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="classMHO__CheckForNaN_1a81ffa78559d439998273e743e8c4bcd7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__CheckForNaN_1aca5fd8f3a7a889caf03c0542d8a32ea0" kindref="member">MHO_CheckForNaN&lt; float &gt;::isnan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/><ref refid="structvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::isnan(<ref refid="structvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="classMHO__CheckForNaN_1ad296ed17d13acc02617a4a3821bcd5b6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__CheckForNaN_1aca5fd8f3a7a889caf03c0542d8a32ea0" kindref="member">MHO_CheckForNaN&lt; double &gt;::isnan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/><ref refid="structvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::isnan(<ref refid="structvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="classMHO__CheckForNaN_1a0f29b70504dacd1a38a38bb5502d44b7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__CheckForNaN_1aca5fd8f3a7a889caf03c0542d8a32ea0" kindref="member">MHO_CheckForNaN&lt; long double &gt;::isnan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/><ref refid="structvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::isnan(<ref refid="structvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="classMHO__CheckForNaN_1aca19638eaa1390171454189b16d2a4fd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classMHO__CheckForNaN" kindref="compound">MHO_CheckForNaN&lt; std::complex&lt; float &gt;</ref><sp/>&gt;::isnan(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;<sp/>float<sp/>&gt;&amp;<sp/><ref refid="structvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::isnan(<ref refid="structvalue" kindref="compound">value</ref>.real())<sp/>||<sp/>std::isnan(<ref refid="structvalue" kindref="compound">value</ref>.imag());</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="classMHO__CheckForNaN_1aef7779ec7a780dc4111ba96883b4c5a7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classMHO__CheckForNaN" kindref="compound">MHO_CheckForNaN&lt; std::complex&lt; double &gt;</ref><sp/>&gt;::isnan(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;<sp/>double<sp/>&gt;&amp;<sp/><ref refid="structvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::isnan(<ref refid="structvalue" kindref="compound">value</ref>.real())<sp/>||<sp/>std::isnan(<ref refid="structvalue" kindref="compound">value</ref>.imag());</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="classMHO__CheckForNaN_1a5a2377b739ae47c77618179e5b587d5b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classMHO__CheckForNaN" kindref="compound">MHO_CheckForNaN&lt; std::complex&lt; long double &gt;</ref><sp/>&gt;::isnan(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;<sp/>long<sp/>double<sp/>&gt;&amp;<sp/><ref refid="structvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::isnan(<ref refid="structvalue" kindref="compound">value</ref>.real())<sp/>||<sp/>std::isnan(<ref refid="structvalue" kindref="compound">value</ref>.imag());</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight><highlight class="comment">//end<sp/>of<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight></codeline>
    </programlisting>
    <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Math/include/MHO_CheckForNaN.hh"/>
  </compounddef>
</doxygen>
