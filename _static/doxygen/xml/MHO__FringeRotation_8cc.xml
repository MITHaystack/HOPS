<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="MHO__FringeRotation_8cc" kind="file" language="C++">
    <compoundname>MHO_FringeRotation.cc</compoundname>
    <includes refid="MHO__FringeRotation_8hh" local="yes">MHO_FringeRotation.hh</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="2">
        <label>MHO_FringeRotation.hh</label>
        <link refid="MHO__FringeRotation_8hh"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cmath</label>
      </node>
      <node id="1">
        <label>MHO_FringeRotation.cc</label>
        <link refid="MHO__FringeRotation_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>complex</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacehops">hops</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__FringeRotation_8hh" kindref="compound">MHO_FringeRotation.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehops" kindref="compound">hops</ref></highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><ref refid="classhops_1_1MHO__FringeRotation_1aad274e783ec085ad8f2942993d845a4e" kindref="member">MHO_FringeRotation::MHO_FringeRotation</ref>()</highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>fSideband<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>fNSBDBins<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>fSBDMaxBin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>fSBDMax<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>fSBDSep<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>fOptimizeClosure<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">};</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>MHO_FringeRotation::fImagUnit<sp/>=<sp/>std::complex&lt;<sp/>double<sp/>&gt;(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">std::complex&lt;<sp/>double<sp/>&gt;<sp/><ref refid="classhops_1_1MHO__FringeRotation_1accca463720069cf78269bf43a25e6151" kindref="member">MHO_FringeRotation::vrot</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time_delta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freq,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ref_freq,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mbd)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="20"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vrot_v1(time_delta,<sp/>freq,<sp/>ref_freq,<sp/>dr,<sp/>mbd);</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">std::complex&lt;<sp/>double<sp/>&gt;<sp/>MHO_FringeRotation::vrot_v1(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time_delta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freq,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ref_freq,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mbd)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="25"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta<sp/>=<sp/>freq<sp/>*<sp/>dr<sp/>*<sp/>time_delta;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//fringe<sp/>rotation<sp/>due<sp/>to<sp/>delay_rate<sp/>*<sp/>time_delta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>theta<sp/>+=<sp/>mbd<sp/>*<sp/>(freq<sp/>-<sp/>ref_freq);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//fringe<sp/>rotation<sp/>due<sp/>to<sp/>delay<sp/>*<sp/>freq_delta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>theta<sp/>+=<sp/>calc_sideband_correction(mbd);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO,<sp/>what<sp/>is<sp/>the<sp/>origin<sp/>of<sp/>this<sp/>correction?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::exp(-2.0<sp/>*<sp/>M_PI<sp/>*<sp/>fImagUnit<sp/>*<sp/>theta);<sp/></highlight><highlight class="comment">//return<sp/>the<sp/>phasor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MHO_FringeRotation::calc_sideband_correction(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mbd)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="33"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta_corr<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Why<sp/>is<sp/>none<sp/>of<sp/>the<sp/>following<sp/>used<sp/>in<sp/>vrot<sp/>when<sp/>locating<sp/>the<sp/>peak<sp/>in<sp/>MBD/DR<sp/>space,<sp/>but<sp/>used<sp/>when<sp/>computing<sp/>the<sp/>fringe<sp/>phase?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>theta_corr<sp/>+=<sp/>(fNSBDBins<sp/>-<sp/>fSBDMaxBin)<sp/>*<sp/>0.125<sp/>*<sp/>fSideband;<sp/></highlight><highlight class="comment">//<sp/>Effect<sp/>due<sp/>to<sp/>offset<sp/>of<sp/>lag<sp/>where<sp/>max<sp/>lies?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//vrot.c<sp/>says:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//effect<sp/>of<sp/>non-integral<sp/>sbd<sp/>iff<sp/>SSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//correct<sp/>phase<sp/>to<sp/>dc<sp/>edge,<sp/>based<sp/>on<sp/>sb<sp/>delay<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>oc_corr<sp/>=<sp/>0.125<sp/>*<sp/>mbd<sp/>*<sp/>fSideband<sp/>/<sp/>fSBDSep;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fOptimizeClosure)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta_corr<sp/>+=<sp/>oc_corr;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;oc<sp/>correction:<sp/>&quot;&lt;&lt;oc_corr&lt;&lt;std::endl;<sp/>std::cout&lt;&lt;mbd&lt;&lt;&quot;,<sp/>&quot;&lt;&lt;fSideband&lt;&lt;&quot;,<sp/>&quot;&lt;&lt;fSBDSep&lt;&lt;std::endl;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta_corr<sp/>+=<sp/>(0.125<sp/>*<sp/>fSBDMax<sp/>*<sp/>fSideband)<sp/>/<sp/>fSBDSep;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theta_corr;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hops</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Math/src/MHO_FringeRotation.cc"/>
  </compounddef>
</doxygen>
