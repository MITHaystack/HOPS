<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="MHO__ComputePlotData_8cc" kind="file" language="C++">
    <compoundname>MHO_ComputePlotData.cc</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">map</includes>
    <includes refid="MHO__ComputePlotData_8hh" local="yes">MHO_ComputePlotData.hh</includes>
    <includes refid="MHO__BasicFringeInfo_8hh" local="yes">MHO_BasicFringeInfo.hh</includes>
    <includes refid="MHO__CyclicRotator_8hh" local="yes">MHO_CyclicRotator.hh</includes>
    <includes refid="MHO__EndZeroPadder_8hh" local="yes">MHO_EndZeroPadder.hh</includes>
    <includes refid="MHO__SelectRepack_8hh" local="yes">MHO_SelectRepack.hh</includes>
    <includes refid="MHO__Reducer_8hh" local="yes">MHO_Reducer.hh</includes>
    <includes refid="MHO__UniformGridPointsCalculator_8hh" local="yes">MHO_UniformGridPointsCalculator.hh</includes>
    <includes refid="MHO__BitReversalPermutation_8hh" local="yes">MHO_BitReversalPermutation.hh</includes>
    <includes refid="MHO__Constants_8hh" local="yes">MHO_Constants.hh</includes>
    <includes refid="MHO__LinearDParCorrection_8hh" local="yes">MHO_LinearDParCorrection.hh</includes>
    <includes refid="MHO__MultidimensionalFastFourierTransform_8hh" local="yes">MHO_MultidimensionalFastFourierTransform.hh</includes>
    <incdepgraph>
      <node id="97">
        <label>MHO_FileKey.hh</label>
        <link refid="MHO__FileKey_8hh"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>MHO_BitReversalPermutation.hh</label>
        <link refid="MHO__BitReversalPermutation_8hh"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>atomic</label>
      </node>
      <node id="67">
        <label>MHO_UUIDGenerator.hh</label>
        <link refid="MHO__UUIDGenerator_8hh"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>iomanip</label>
      </node>
      <node id="116">
        <label>legacy_hops_date.hh</label>
        <link refid="legacy__hops__date_8hh"/>
      </node>
      <node id="123">
        <label>limits</label>
      </node>
      <node id="106">
        <label>MHO_FastFourierTransformUtilities.hh</label>
        <link refid="MHO__FastFourierTransformUtilities_8hh"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="119">
        <label>MHO_SelectRepack.hh</label>
        <link refid="MHO__SelectRepack_8hh"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>MHO_NumpyTypeCode.hh</label>
        <link refid="MHO__NumpyTypeCode_8hh"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>assert.h</label>
      </node>
      <node id="42">
        <label>iterator</label>
      </node>
      <node id="48">
        <label>MHO_NDArrayView.hh</label>
        <link refid="MHO__NDArrayView_8hh"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>MHO_FringeRotation.hh</label>
        <link refid="MHO__FringeRotation_8hh"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>cstdint</label>
      </node>
      <node id="103">
        <label>MHO_FastFourierTransform.hh</label>
        <link refid="MHO__FastFourierTransform_8hh"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>MHO_ElementTypes.hh</label>
        <link refid="MHO__ElementTypes_8hh"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>MHO_ClassIdentity.hh</label>
        <link refid="MHO__ClassIdentity_8hh"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>MHO_ContainerStore.hh</label>
        <link refid="MHO__ContainerStore_8hh"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>endian.h</label>
      </node>
      <node id="94">
        <label>MHO_ClassIdentityMap.hh</label>
        <link refid="MHO__ClassIdentityMap_8hh"/>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>stdint.h</label>
      </node>
      <node id="83">
        <label>MHO_UnaryOperator.hh</label>
        <link refid="MHO__UnaryOperator_8hh"/>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>MHO_OperatorToolbox.hh</label>
        <link refid="MHO__OperatorToolbox_8hh"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>MHO_JSONHeaderWrapper.hh</label>
        <link refid="MHO__JSONHeaderWrapper_8hh"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="111">
        <label>MHO_Clock.hh</label>
        <link refid="MHO__Clock_8hh"/>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>MHO_Meta.hh</label>
        <link refid="MHO__Meta_8hh"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>cmath</label>
      </node>
      <node id="69">
        <label>MHO_Taggable.hh</label>
        <link refid="MHO__Taggable_8hh"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="109">
        <label>MHO_MultidimensionalFastFourierTransformInterface.hh</label>
        <link refid="MHO__MultidimensionalFastFourierTransformInterface_8hh"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>MHO_ComputePlotData.hh</label>
        <link refid="MHO__ComputePlotData_8hh"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>stdexcept</label>
      </node>
      <node id="31">
        <label>MHO_IntervalLabelInterface.hh</label>
        <link refid="MHO__IntervalLabelInterface_8hh"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>MHO_BasicFringeInfo.hh</label>
        <link refid="MHO__BasicFringeInfo_8hh"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>MHO_Profiler.hh</label>
        <link refid="MHO__Profiler_8hh"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="54">
        <label>MHO_MD5HashGenerator.hh</label>
        <link refid="MHO__MD5HashGenerator_8hh"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="114">
        <label>date/date.h</label>
      </node>
      <node id="98">
        <label>MHO_ContainerJSONConverter.hh</label>
        <link refid="MHO__ContainerJSONConverter_8hh"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
      </node>
      <node id="108">
        <label>MHO_MultidimensionalFastFourierTransform.hh</label>
        <link refid="MHO__MultidimensionalFastFourierTransform_8hh"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>cinttypes</label>
      </node>
      <node id="3">
        <label>map</label>
      </node>
      <node id="78">
        <label>MHO_BinaryOperator.hh</label>
        <link refid="MHO__BinaryOperator_8hh"/>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="120">
        <label>MHO_Reducer.hh</label>
        <link refid="MHO__Reducer_8hh"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>MHO_Message.hh</label>
        <link refid="MHO__Message_8hh"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>MHO_FileStreamer.hh</label>
        <link refid="MHO__FileStreamer_8hh"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>MHO_MathUtilities.hh</label>
        <link refid="MHO__MathUtilities_8hh"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>MHO_ObjectTags.hh</label>
        <link refid="MHO__ObjectTags_8hh"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>stddef.h</label>
      </node>
      <node id="96">
        <label>MHO_BinaryFileStreamer.hh</label>
        <link refid="MHO__BinaryFileStreamer_8hh"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>fstream</label>
      </node>
      <node id="46">
        <label>MHO_NDArrayMath.hh</label>
        <link refid="MHO__NDArrayMath_8hh"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ostream</label>
      </node>
      <node id="58">
        <label>MHO_UUID.hh</label>
        <link refid="MHO__UUID_8hh"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>MHO_NDArrayWrapper_0.hh</label>
        <link refid="MHO__NDArrayWrapper__0_8hh"/>
      </node>
      <node id="93">
        <label>MHO_ScalarContainer.hh</label>
        <link refid="MHO__ScalarContainer_8hh"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>MHO_VectorContainer.hh</label>
        <link refid="MHO__VectorContainer_8hh"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>MHO_Axis.hh</label>
        <link refid="MHO__Axis_8hh"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>MHO_IndexLabelInterface.hh</label>
        <link refid="MHO__IndexLabelInterface_8hh"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>MHO_NDArrayWrapper_1.hh</label>
        <link refid="MHO__NDArrayWrapper__1_8hh"/>
      </node>
      <node id="95">
        <label>MHO_BinaryFileInterface.hh</label>
        <link refid="MHO__BinaryFileInterface_8hh"/>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>random</label>
      </node>
      <node id="71">
        <label>MHO_AxisPack.hh</label>
        <link refid="MHO__AxisPack_8hh"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>MHO_ComplexConjugator.hh</label>
        <link refid="MHO__ComplexConjugator_8hh"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>MHO_TestAssertions.hh</label>
        <link refid="MHO__TestAssertions_8hh"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>string.h</label>
      </node>
      <node id="41">
        <label>MHO_BidirectionalIterator.hh</label>
        <link refid="MHO__BidirectionalIterator_8hh"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="118">
        <label>bitset</label>
      </node>
      <node id="91">
        <label>MHO_ContainerDictionary.hh</label>
        <link refid="MHO__ContainerDictionary_8hh"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>tuple</label>
      </node>
      <node id="74">
        <label>MHO_AxisTypes.hh</label>
        <link refid="MHO__AxisTypes_8hh"/>
      </node>
      <node id="29">
        <label>ctime</label>
      </node>
      <node id="81">
        <label>MHO_UnaryFunctor.hh</label>
        <link refid="MHO__UnaryFunctor_8hh"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>MHO_Timer.hh</label>
        <link refid="MHO__Timer_8hh"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="117">
        <label>MHO_EndZeroPadder.hh</label>
        <link refid="MHO__EndZeroPadder_8hh"/>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>MHO_SubSample.hh</label>
        <link refid="MHO__SubSample_8hh"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="124">
        <label>MHO_Constants.hh</label>
        <link refid="MHO__Constants_8hh"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>MHO_FastFourierTransformCalls.hh</label>
        <link refid="MHO__FastFourierTransformCalls_8hh"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>vector</label>
      </node>
      <node id="49">
        <label>MHO_BidirectionalIndexedIterator.hh</label>
        <link refid="MHO__BidirectionalIndexedIterator_8hh"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="121">
        <label>MHO_CompoundReductions.hh</label>
        <link refid="MHO__CompoundReductions_8hh"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>utility</label>
      </node>
      <node id="38">
        <label>array</label>
      </node>
      <node id="82">
        <label>MHO_CyclicRotator.hh</label>
        <link refid="MHO__CyclicRotator_8hh"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>sstream</label>
      </node>
      <node id="88">
        <label>MHO_CheckForNaN.hh</label>
        <link refid="MHO__CheckForNaN_8hh"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>MHO_SelfName.hh</label>
        <link refid="MHO__SelfName_8hh"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>MHO_BidirectionalStrideIterator.hh</label>
        <link refid="MHO__BidirectionalStrideIterator_8hh"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>MHO_ParameterStore.hh</label>
        <link refid="MHO__ParameterStore_8hh"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="113">
        <label>math.h</label>
      </node>
      <node id="36">
        <label>MHO_NDArrayWrapper.hh</label>
        <link refid="MHO__NDArrayWrapper_8hh"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>cstdlib</label>
      </node>
      <node id="126">
        <label>cctype</label>
      </node>
      <node id="30">
        <label>MHO_Tokenizer.hh</label>
        <link refid="MHO__Tokenizer_8hh"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>MHO_Operator.hh</label>
        <link refid="MHO__Operator_8hh"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>iostream</label>
      </node>
      <node id="1">
        <label>MHO_ComputePlotData.cc</label>
        <link refid="MHO__ComputePlotData_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>cstddef</label>
      </node>
      <node id="59">
        <label>MHO_Types.hh</label>
        <link refid="MHO__Types_8hh"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>MHO_SerializableObjectFactory.hh</label>
        <link refid="MHO__SerializableObjectFactory_8hh"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="125">
        <label>MHO_LinearDParCorrection.hh</label>
        <link refid="MHO__LinearDParCorrection_8hh"/>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>MHO_TemplateTypenameDeduction.hh</label>
        <link refid="MHO__TemplateTypenameDeduction_8hh"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>mutex</label>
      </node>
      <node id="112">
        <label>chrono</label>
      </node>
      <node id="75">
        <label>MHO_BaselineContainers.hh</label>
        <link refid="MHO__BaselineContainers_8hh"/>
      </node>
      <node id="77">
        <label>MHO_FringeContainers.hh</label>
        <link refid="MHO__FringeContainers_8hh"/>
      </node>
      <node id="23">
        <label>thread</label>
      </node>
      <node id="122">
        <label>MHO_UniformGridPointsCalculator.hh</label>
        <link refid="MHO__UniformGridPointsCalculator_8hh"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>MHO_NaNMasker.hh</label>
        <link refid="MHO__NaNMasker_8hh"/>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>type_traits</label>
      </node>
      <node id="52">
        <label>MHO_Serializable.hh</label>
        <link refid="MHO__Serializable_8hh"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>set</label>
      </node>
      <node id="12">
        <label>nlohmann/json.hpp</label>
      </node>
      <node id="6">
        <label>complex</label>
      </node>
      <node id="5">
        <label>MHO_ContainerDefinitions.hh</label>
        <link refid="MHO__ContainerDefinitions_8hh"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="115">
        <label>date/tz.h</label>
      </node>
      <node id="37">
        <label>algorithm</label>
      </node>
      <node id="60">
        <label>picohash.h</label>
        <link refid="picohash_8h"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>stdio.h</label>
      </node>
      <node id="45">
        <label>MHO_ExtensibleElement.hh</label>
        <link refid="MHO__ExtensibleElement_8hh"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>cstring</label>
      </node>
      <node id="76">
        <label>MHO_StationContainers.hh</label>
        <link refid="MHO__StationContainers_8hh"/>
      </node>
      <node id="62">
        <label>inttypes.h</label>
      </node>
      <node id="107">
        <label>MHO_FastFourierTransformWorkspace.hh</label>
        <link refid="MHO__FastFourierTransformWorkspace_8hh"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>MHO_TableContainer.hh</label>
        <link refid="MHO__TableContainer_8hh"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>MHO_FunctorBroadcaster.hh</label>
        <link refid="MHO__FunctorBroadcaster_8hh"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacehops">hops</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__ComputePlotData_8hh" kindref="compound">MHO_ComputePlotData.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__BasicFringeInfo_8hh" kindref="compound">MHO_BasicFringeInfo.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__CyclicRotator_8hh" kindref="compound">MHO_CyclicRotator.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__EndZeroPadder_8hh" kindref="compound">MHO_EndZeroPadder.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__SelectRepack_8hh" kindref="compound">MHO_SelectRepack.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__Reducer_8hh" kindref="compound">MHO_Reducer.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__UniformGridPointsCalculator_8hh" kindref="compound">MHO_UniformGridPointsCalculator.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__BitReversalPermutation_8hh" kindref="compound">MHO_BitReversalPermutation.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__Constants_8hh" kindref="compound">MHO_Constants.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__LinearDParCorrection_8hh" kindref="compound">MHO_LinearDParCorrection.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MHO__MultidimensionalFastFourierTransform_8hh" kindref="compound">MHO_MultidimensionalFastFourierTransform.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehops" kindref="compound">hops</ref></highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HOPS_USE_FFTW3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacehops_1aabe0d71e00c2f8f265a53d47914a7893" kindref="member">FFT_ENGINE_TYPE</ref><sp/>=<sp/>MHO_MultidimensionalFastFourierTransformFFTW&lt;<sp/>visibility_type<sp/>&gt;;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacehops_1aabe0d71e00c2f8f265a53d47914a7893" kindref="member">FFT_ENGINE_TYPE</ref><sp/>=<sp/><ref refid="classhops_1_1MHO__MultidimensionalFastFourierTransform" kindref="compound">MHO_MultidimensionalFastFourierTransform&lt; visibility_type &gt;</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="classhops_1_1MHO__ComputePlotData_1aee323fc80b6f65ab8065fe6a3ed9cf84" kindref="member">MHO_ComputePlotData::MHO_ComputePlotData</ref>()</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a168c487b303d3cc5dc846d030d9fe6fe" kindref="member">fMBDAnchor</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;model&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a3c2a8f188bb3fe6f82f960f1a95c89ac" kindref="member">fContainerStore</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af6edda99df6b30130c0d1da47ed384b5" kindref="member">fVisibilities</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a2d7eae943f360c37227da665431dfc07" kindref="member">fToolbox</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a92a2d09064cfaf9440bdad4e6df816ad" kindref="member">fWeights</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1aa2b959043af4e9ac5f6f41be513511b0" kindref="member">fImagUnit</ref><sp/>=<sp/><ref refid="classhops_1_1MHO__Constants_1a010ce039565b123183d3e3e8136e1051" kindref="member">MHO_Constants::imag_unit</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ad3fd6e82bab752f9f5d77c7eb0bf9a0b" kindref="member">fValid</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ae2f070c806cc3d182ca7e306faba7fc1" kindref="member">MHO_ComputePlotData::Initialize</ref>()</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af318e0c857d2c971ed45759fc5d1855c" kindref="member">fTotalSummedWeights</ref><sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/total_summed_weights&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a15c58abd469690695a2d30dbb7691d67" kindref="member">fRefFreq</ref><sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/control/config/ref_freq&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a4ea40a519e16f78b9256819c0c8f72ab" kindref="member">fMBDelay</ref><sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/mbdelay&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a9b7b5c51dc12f91e6a507996299a5259" kindref="member">fDelayRate</ref><sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/drate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a6a0ac206e6e18d2759cfd173d2c35fcf" kindref="member">fFringeRate</ref><sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/frate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a720cf67a5f227bf6cb8e50f544dc0a15" kindref="member">fSBDelay</ref><sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/sbdelay&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a6993ae2e043c079b6806cf8f141cffbe" kindref="member">fSBDMaxBin</ref><sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/max_sbd_bin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1aa3342d937d26acd4f6f333d128f7301b" kindref="member">fAmp</ref><sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/famp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af6edda99df6b30130c0d1da47ed384b5" kindref="member">fVisibilities</ref><sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a3c2a8f188bb3fe6f82f960f1a95c89ac" kindref="member">fContainerStore</ref>-&gt;<ref refid="classhops_1_1MHO__ContainerStore_1a5220072d0f85b45f046b9887989c082a" kindref="member">GetObject</ref>&lt;<sp/><ref refid="namespacehops_1afcc97dd4e78b9092817b1dbb0c561e78" kindref="member">visibility_type</ref><sp/>&gt;(std::string(</highlight><highlight class="stringliteral">&quot;vis&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a92a2d09064cfaf9440bdad4e6df816ad" kindref="member">fWeights</ref><sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a3c2a8f188bb3fe6f82f960f1a95c89ac" kindref="member">fContainerStore</ref>-&gt;<ref refid="classhops_1_1MHO__ContainerStore_1a5220072d0f85b45f046b9887989c082a" kindref="member">GetObject</ref>&lt;<sp/><ref refid="namespacehops_1a74fe9c8c1d011d62f4fd08db2f915d01" kindref="member">weight_type</ref><sp/>&gt;(std::string(</highlight><highlight class="stringliteral">&quot;weight&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref><sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a3c2a8f188bb3fe6f82f960f1a95c89ac" kindref="member">fContainerStore</ref>-&gt;<ref refid="classhops_1_1MHO__ContainerStore_1a5220072d0f85b45f046b9887989c082a" kindref="member">GetObject</ref>&lt;<sp/><ref refid="namespacehops_1afcc97dd4e78b9092817b1dbb0c561e78" kindref="member">visibility_type</ref><sp/>&gt;(std::string(</highlight><highlight class="stringliteral">&quot;sbd&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ad3fd6e82bab752f9f5d77c7eb0bf9a0b" kindref="member">fValid</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classhops_1_1MHO__ComputePlotData_1af6edda99df6b30130c0d1da47ed384b5" kindref="member">fVisibilities</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1acd8d50c6722941e40e21c59ffba48011" kindref="member">msg_error</ref>(</highlight><highlight class="stringliteral">&quot;fringe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>find<sp/>visibility,<sp/>object<sp/>with<sp/>name<sp/>&apos;vis&apos;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classhops_1_1MHO__ComputePlotData_1a92a2d09064cfaf9440bdad4e6df816ad" kindref="member">fWeights</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1acd8d50c6722941e40e21c59ffba48011" kindref="member">msg_error</ref>(</highlight><highlight class="stringliteral">&quot;fringe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>find<sp/>visibility,<sp/>object<sp/>with<sp/>name<sp/>&apos;weight&apos;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ad3fd6e82bab752f9f5d77c7eb0bf9a0b" kindref="member">fValid</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1acd8d50c6722941e40e21c59ffba48011" kindref="member">msg_error</ref>(</highlight><highlight class="stringliteral">&quot;fringe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>find<sp/>visibility,<sp/>object<sp/>with<sp/>name<sp/>&apos;sbd&apos;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ad3fd6e82bab752f9f5d77c7eb0bf9a0b" kindref="member">fValid</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="namespacehops_1a0876bf037431c9d1550c2af6cb40a34c" kindref="member">xpower_amp_type</ref><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a88c2d7b6c50f02105efd3c59a7d2dbe7" kindref="member">MHO_ComputePlotData::calc_mbd</ref>()</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//calculate<sp/>the<sp/>frequency<sp/>grid<sp/>for<sp/>MBD<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>MHO_UniformGridPointsCalculator<sp/>fGridCalc;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>double&gt;<sp/>in_freq_pts(std::get&lt;CHANNEL_AXIS&gt;(*fSBDArray).GetData(),<sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;CHANNEL_AXIS&gt;(*fSBDArray).GetData()<sp/>+<sp/>std::get&lt;CHANNEL_AXIS&gt;(*fSBDArray).GetSize()<sp/>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;<sp/>freq_pts;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;<sp/>std::size_t,<sp/>std::size_t<sp/>&gt;<sp/>chan_index_map;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freq_eps<sp/>=<sp/>1e-4;<sp/></highlight><highlight class="comment">//tolerance<sp/>of<sp/>0.1kHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//dsb<sp/>channel<sp/>pairs<sp/>share<sp/>a<sp/>sky_freq<sp/>so<sp/>we<sp/>need<sp/>combine<sp/>them<sp/>at<sp/>the<sp/>same<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>eliminates<sp/>non-unique<sp/>(within<sp/>the<sp/>tolerance)<sp/>adjacent<sp/>frequencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>fGridCalc.GetUniquePoints(in_freq_pts,<sp/>freq_eps,<sp/>freq_pts,<sp/>chan_index_map);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>fGridCalc.SetPoints(freq_pts);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>fGridCalc.SetDefaultGridPoints(256);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>fGridCalc.Calculate();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>fGridStart<sp/>=<sp/>fGridCalc.GetGridStart();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fGridSpace<sp/>=<sp/>fGridCalc.GetGridSpacing();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>fNGridPoints<sp/>=<sp/>fGridCalc.GetNGridPoints();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fMBDBinMap<sp/>=<sp/>fGridCalc.GetGridIndexMap();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>fNSBD<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a7833826050c86ab6132bf256f1cec006" kindref="member">FREQ_AXIS</ref>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>fNDR<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a897cf2a16955f6e17aaa6b91d0a77b85" kindref="member">TIME_AXIS</ref>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//resize<sp/>workspaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a7d837f0c6094427eb008e2df73bf1635" kindref="member">fMBDWorkspace</ref>.<ref refid="classhops_1_1MHO__TableContainer_1a296d158a9afa689ada830cc24759e86f" kindref="member">Resize</ref>(fNGridPoints);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a7d837f0c6094427eb008e2df73bf1635" kindref="member">fMBDWorkspace</ref>.<ref refid="classhops_1_1MHO__NDArrayWrapper_1aa8c5dd06d0440052d4cbc8ceada33ef0" kindref="member">ZeroArray</ref>();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac50138a0b2aa8f20b78744ade2dd0d83" kindref="member">fMBDAmpWorkspace</ref>.<ref refid="classhops_1_1MHO__TableContainer_1a296d158a9afa689ada830cc24759e86f" kindref="member">Resize</ref>(fNGridPoints);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac50138a0b2aa8f20b78744ade2dd0d83" kindref="member">fMBDAmpWorkspace</ref>.<ref refid="classhops_1_1MHO__NDArrayWrapper_1aa8c5dd06d0440052d4cbc8ceada33ef0" kindref="member">ZeroArray</ref>();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mbd_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>0<sp/>&gt;(<ref refid="classhops_1_1MHO__ComputePlotData_1a7d837f0c6094427eb008e2df73bf1635" kindref="member">fMBDWorkspace</ref>));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fNGridPoints;<sp/>i++)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbd_ax-&gt;at(i)<sp/>=<sp/>fGridStart<sp/>+<sp/>i<sp/>*<sp/>fGridSpace;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>up<sp/>FFT<sp/>and<sp/>rotator<sp/>engines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af75d15daa12b707d755602cfcd0341ea" kindref="member">fFFTEngine</ref>.SetArgs(&amp;<ref refid="classhops_1_1MHO__ComputePlotData_1a7d837f0c6094427eb008e2df73bf1635" kindref="member">fMBDWorkspace</ref>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af75d15daa12b707d755602cfcd0341ea" kindref="member">fFFTEngine</ref>.DeselectAllAxes();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af75d15daa12b707d755602cfcd0341ea" kindref="member">fFFTEngine</ref>.SelectAxis(0);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af75d15daa12b707d755602cfcd0341ea" kindref="member">fFFTEngine</ref>.SetForward();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af75d15daa12b707d755602cfcd0341ea" kindref="member">fFFTEngine</ref>.Initialize();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1af6437b9d519f790db58bab45c8559082" kindref="member">check_step_fatal</ref>(ok,<sp/></highlight><highlight class="stringliteral">&quot;calibration&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MBD<sp/>search<sp/>fft<sp/>engine<sp/>initialization.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a36ccde6803c5764e2b7a27e7ba347b26" kindref="member">fCyclicRotator</ref>.SetOffset(0,<sp/>fNGridPoints<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a36ccde6803c5764e2b7a27e7ba347b26" kindref="member">fCyclicRotator</ref>.SetArgs(&amp;<ref refid="classhops_1_1MHO__ComputePlotData_1a7d837f0c6094427eb008e2df73bf1635" kindref="member">fMBDWorkspace</ref>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a36ccde6803c5764e2b7a27e7ba347b26" kindref="member">fCyclicRotator</ref>.Initialize();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1af6437b9d519f790db58bab45c8559082" kindref="member">check_step_fatal</ref>(ok,<sp/></highlight><highlight class="stringliteral">&quot;calibration&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MBD<sp/>search<sp/>cyclic<sp/>rotation<sp/>initialization.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//now<sp/>we<sp/>are<sp/>going<sp/>to<sp/>loop<sp/>over<sp/>all<sp/>of<sp/>the<sp/>channels/AP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//and<sp/>perform<sp/>the<sp/>weighted<sp/>sum<sp/>of<sp/>the<sp/>data<sp/>at<sp/>the<sp/>max-SBD<sp/>bin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//with<sp/>the<sp/>fitted<sp/>delay-rate<sp/>rotation<sp/>(but<sp/>mbd=0)<sp/>applied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//grab<sp/>the<sp/>total<sp/>summed<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_summed_weights<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a92a2d09064cfaf9440bdad4e6df816ad" kindref="member">fWeights</ref>-&gt;<ref refid="classhops_1_1MHO__JSONWrapper_1a8af109cd5401bbce3e2d380c32111e35" kindref="member">Retrieve</ref>(</highlight><highlight class="stringliteral">&quot;total_summed_weights&quot;</highlight><highlight class="normal">,<sp/>total_summed_weights);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>POLPROD<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nchan<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a843b672baf3c6931695722ce03e47628" kindref="member">CHANNEL_AXIS</ref>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nap<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a897cf2a16955f6e17aaa6b91d0a77b85" kindref="member">TIME_AXIS</ref>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chan_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>CHANNEL_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ap_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>TIME_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sbd_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>FREQ_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ap_delta<sp/>=<sp/>ap_ax-&gt;at(1)<sp/>-<sp/>ap_ax-&gt;at(0);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sbd_delta<sp/>=<sp/>sbd_ax-&gt;at(1)<sp/>-<sp/>sbd_ax-&gt;at(0);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frt_offset<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/config/frt_offset&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>sidebandlabelkey<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;net_sideband&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nchan;<sp/>ch++)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freq<sp/>=<sp/>(*chan_ax)(ch);<sp/></highlight><highlight class="comment">//sky<sp/>freq<sp/>of<sp/>this<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>net_sideband<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/>sidebandlabelkey,<sp/>net_sideband);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!key_present)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1acd8d50c6722941e40e21c59ffba48011" kindref="member">msg_error</ref>(</highlight><highlight class="stringliteral">&quot;fringe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;missing<sp/>net_sideband<sp/>label<sp/>for<sp/>channel<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ch<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(0);<sp/></highlight><highlight class="comment">//DSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(net_sideband<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;U&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(1);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(net_sideband<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;L&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(-1);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//DSB<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dsb_partner<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dsb_key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/></highlight><highlight class="stringliteral">&quot;dsb_partner&quot;</highlight><highlight class="normal">,<sp/>dsb_partner);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dsb_key_present){<ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(0);}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ap<sp/>=<sp/>0;<sp/>ap<sp/>&lt;<sp/>nap;<sp/>ap++)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tdelta<sp/>=<sp/>(ap_ax-&gt;at(ap)<sp/>+<sp/>ap_delta<sp/>/<sp/>2.0)<sp/>-<sp/>frt_offset;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//need<sp/>time<sp/>difference<sp/>from<sp/>the<sp/>f.r.t?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>vis<sp/>=<sp/>(*fSBDArray)(POLPROD,<sp/>ch,<sp/>ap,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a6993ae2e043c079b6806cf8f141cffbe" kindref="member">fSBDMaxBin</ref>);<sp/></highlight><highlight class="comment">//pick<sp/>out<sp/>data<sp/>at<sp/>SBD<sp/>max<sp/>bin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>vr<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1accca463720069cf78269bf43a25e6151" kindref="member">vrot</ref>(tdelta,<sp/>freq,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a15c58abd469690695a2d30dbb7691d67" kindref="member">fRefFreq</ref>,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a9b7b5c51dc12f91e6a507996299a5259" kindref="member">fDelayRate</ref>,<sp/>0.0);<sp/></highlight><highlight class="comment">//apply<sp/>at<sp/>MBD=0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>z<sp/>=<sp/>vis<sp/>*<sp/>vr;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apply<sp/>weight<sp/>and<sp/>sum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>(*fWeights)(POLPROD,<sp/>ch,<sp/>ap,<sp/>0);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>w<sp/>*<sp/>z;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//slot<sp/>the<sp/>summed<sp/>data<sp/>in<sp/>at<sp/>the<sp/>appropriate<sp/>location<sp/>in<sp/>the<sp/>new<sp/>grid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>mbd_bin<sp/>=<sp/>fMBDBinMap[<sp/>chan_index_map[ch]<sp/>];</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a7d837f0c6094427eb008e2df73bf1635" kindref="member">fMBDWorkspace</ref>(mbd_bin)<sp/>+=<sp/>sum;<sp/></highlight><highlight class="comment">//<sp/>+=<sp/>when<sp/>adding<sp/>to<sp/>bin<sp/>(to<sp/>capture<sp/>contribution<sp/>from<sp/>both<sp/>halves<sp/>of<sp/>DSB<sp/>channels)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//now<sp/>run<sp/>an<sp/>FFT<sp/>along<sp/>the<sp/>MBD<sp/>axis<sp/>and<sp/>cyclic<sp/>rotate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af75d15daa12b707d755602cfcd0341ea" kindref="member">fFFTEngine</ref>.Execute();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1af6437b9d519f790db58bab45c8559082" kindref="member">check_step_fatal</ref>(ok,<sp/></highlight><highlight class="stringliteral">&quot;calibration&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MBD<sp/>search<sp/>fft<sp/>engine<sp/>execution.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a36ccde6803c5764e2b7a27e7ba347b26" kindref="member">fCyclicRotator</ref>.Execute();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1af6437b9d519f790db58bab45c8559082" kindref="member">check_step_fatal</ref>(ok,<sp/></highlight><highlight class="stringliteral">&quot;calibration&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MBD<sp/>search<sp/>cyclic<sp/>rotation<sp/>execution.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fNGridPoints;<sp/>i++)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac50138a0b2aa8f20b78744ade2dd0d83" kindref="member">fMBDAmpWorkspace</ref>[i]<sp/>=<sp/>std::abs(<ref refid="classhops_1_1MHO__ComputePlotData_1a7d837f0c6094427eb008e2df73bf1635" kindref="member">fMBDWorkspace</ref>[i])<sp/>/<sp/>total_summed_weights;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;<sp/>0<sp/>&gt;(<ref refid="classhops_1_1MHO__ComputePlotData_1ac50138a0b2aa8f20b78744ade2dd0d83" kindref="member">fMBDAmpWorkspace</ref>).<ref refid="classhops_1_1MHO__NDArrayWrapper_1a86345bc1efef3142303161022e00a492" kindref="member">at</ref>(i)<sp/>=<sp/>std::get&lt;<sp/>0<sp/>&gt;(<ref refid="classhops_1_1MHO__ComputePlotData_1a7d837f0c6094427eb008e2df73bf1635" kindref="member">fMBDWorkspace</ref>).at(i);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac50138a0b2aa8f20b78744ade2dd0d83" kindref="member">fMBDAmpWorkspace</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><ref refid="namespacehops_1a0876bf037431c9d1550c2af6cb40a34c" kindref="member">xpower_amp_type</ref><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ad8dc0743bc06d78f0b85cdee08b10b89" kindref="member">MHO_ComputePlotData::calc_sbd</ref>()</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//grab<sp/>the<sp/>total<sp/>summed<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_summed_weights<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a92a2d09064cfaf9440bdad4e6df816ad" kindref="member">fWeights</ref>-&gt;<ref refid="classhops_1_1MHO__JSONWrapper_1a8af109cd5401bbce3e2d380c32111e35" kindref="member">Retrieve</ref>(</highlight><highlight class="stringliteral">&quot;total_summed_weights&quot;</highlight><highlight class="normal">,<sp/>total_summed_weights);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehops_1a085bda9bb87c6f1100bf200de099be8e" kindref="member">xpower_type</ref><sp/>sbd_xpower_in;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehops_1a085bda9bb87c6f1100bf200de099be8e" kindref="member">xpower_type</ref><sp/>sbd_xpower_out;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehops_1a0876bf037431c9d1550c2af6cb40a34c" kindref="member">xpower_amp_type</ref><sp/>sbd_amp;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>POLPROD<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nchan<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a843b672baf3c6931695722ce03e47628" kindref="member">CHANNEL_AXIS</ref>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nap<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a897cf2a16955f6e17aaa6b91d0a77b85" kindref="member">TIME_AXIS</ref>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nbins<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a7833826050c86ab6132bf256f1cec006" kindref="member">FREQ_AXIS</ref>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chan_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>CHANNEL_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ap_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>TIME_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sbd_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>FREQ_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ap_delta<sp/>=<sp/>ap_ax-&gt;at(1)<sp/>-<sp/>ap_ax-&gt;at(0);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sbd_delta<sp/>=<sp/>sbd_ax-&gt;at(1)<sp/>-<sp/>sbd_ax-&gt;at(0);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frt_offset<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/config/frt_offset&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>sbd_amp.Resize(nbins);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>sbd_xpower_in.Resize(nbins);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>sbd_xpower_out.Resize(4<sp/>*<sp/>nbins);<sp/></highlight><highlight class="comment">//interpolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>sbd_xpower_in.ZeroArray();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>sbd_xpower_out.ZeroArray();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>sidebandlabelkey<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;net_sideband&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//loop<sp/>over<sp/>sbd<sp/>bins<sp/>(4*nlags)<sp/>and<sp/>sum<sp/>over<sp/>channel/ap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbins;<sp/>i++)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nchan;<sp/>ch++)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freq<sp/>=<sp/>(*chan_ax)(ch);<sp/></highlight><highlight class="comment">//sky<sp/>freq<sp/>of<sp/>this<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>net_sideband<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/>sidebandlabelkey,<sp/>net_sideband);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!key_present)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1acd8d50c6722941e40e21c59ffba48011" kindref="member">msg_error</ref>(</highlight><highlight class="stringliteral">&quot;fringe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;missing<sp/>net_sideband<sp/>label<sp/>for<sp/>channel<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ch<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(0);<sp/></highlight><highlight class="comment">//DSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(net_sideband<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;U&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(1);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(net_sideband<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;L&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(-1);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//DSB<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dsb_partner<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dsb_key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/></highlight><highlight class="stringliteral">&quot;dsb_partner&quot;</highlight><highlight class="normal">,<sp/>dsb_partner);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dsb_key_present){<ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(0);}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ap<sp/>=<sp/>0;<sp/>ap<sp/>&lt;<sp/>nap;<sp/>ap++)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tdelta<sp/>=<sp/>(ap_ax-&gt;at(ap)<sp/>+<sp/>ap_delta<sp/>/<sp/>2.0)<sp/>-<sp/>frt_offset;<sp/></highlight><highlight class="comment">//need<sp/>time<sp/>difference<sp/>from<sp/>the<sp/>f.r.t?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>vis<sp/>=<sp/>(*fSBDArray)(POLPROD,<sp/>ch,<sp/>ap,<sp/>i);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>vr<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1accca463720069cf78269bf43a25e6151" kindref="member">vrot</ref>(tdelta,<sp/>freq,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a15c58abd469690695a2d30dbb7691d67" kindref="member">fRefFreq</ref>,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a9b7b5c51dc12f91e6a507996299a5259" kindref="member">fDelayRate</ref>,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a4ea40a519e16f78b9256819c0c8f72ab" kindref="member">fMBDelay</ref>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>z<sp/>=<sp/>vis<sp/>*<sp/>vr;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apply<sp/>weight<sp/>and<sp/>sum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>(*fWeights)(POLPROD,<sp/>ch,<sp/>ap,<sp/>0);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>w<sp/>*<sp/>z;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sbd_xpower_in(i)<sp/>+=<sp/>sum;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sbd_amp(i)<sp/>=<sp/>std::abs(sbd_xpower_in(i))<sp/>/<sp/>total_summed_weights;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;<sp/>0<sp/>&gt;(sbd_amp)(i)<sp/>=<sp/>(*sbd_ax)(i);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sbd_amp;</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><ref refid="namespacehops_1ae84ae133e425a9e97ee17c8fa9f57a49" kindref="member">phasor_type</ref><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1adc17cfcfec0b49da0d8c8dcdb326dbca" kindref="member">MHO_ComputePlotData::calc_segs</ref>()</highlight></codeline>
<codeline lineno="284"><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//grab<sp/>the<sp/>SBD<sp/>max<sp/>bin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>max_sbd_bin<sp/>=<sp/>(std::size_t)<ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/max_sbd_bin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>POLPROD<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nchan<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a843b672baf3c6931695722ce03e47628" kindref="member">CHANNEL_AXIS</ref>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nap<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a897cf2a16955f6e17aaa6b91d0a77b85" kindref="member">TIME_AXIS</ref>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nbins<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a7833826050c86ab6132bf256f1cec006" kindref="member">FREQ_AXIS</ref>);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chan_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>CHANNEL_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ap_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>TIME_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ap_delta<sp/>=<sp/>ap_ax-&gt;at(1)<sp/>-<sp/>ap_ax-&gt;at(0);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frt_offset<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/config/frt_offset&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehops_1ae84ae133e425a9e97ee17c8fa9f57a49" kindref="member">phasor_type</ref><sp/>phasor_segs;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>phasor_segs.Resize(nchan<sp/>+<sp/>1,<sp/>nap);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>phasor_segs.ZeroArray();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//grab<sp/>the<sp/>fourfit<sp/>channel<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>chan_label_key<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;channel_label&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::string<sp/>&gt;<sp/>channel_labels;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>chan_ax-&gt;GetSize();<sp/>ch++)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>ch_label;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/>chan_label_key,<sp/>ch_label);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(key_present)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel_labels.push_back(ch_label);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1a1f24dc78f2cec992c3a9752db555b06d" kindref="member">msg_warn</ref>(</highlight><highlight class="stringliteral">&quot;fringe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;unlabeled<sp/>channel<sp/>at<sp/>index:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ch<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>using<sp/>&apos;?&apos;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel_labels.push_back(</highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>sidebandlabelkey<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;net_sideband&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ap<sp/>=<sp/>0;<sp/>ap<sp/>&lt;<sp/>nap;<sp/>ap++)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>sum<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//sum<sp/>over<sp/>all<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sumwt<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tdelta<sp/>=<sp/>(ap_ax-&gt;at(ap)<sp/>+<sp/>ap_delta<sp/>/<sp/>2.0)<sp/>-<sp/>frt_offset;<sp/></highlight><highlight class="comment">//need<sp/>time<sp/>difference<sp/>from<sp/>the<sp/>f.r.t?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nchan;<sp/>ch++)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freq<sp/>=<sp/>(*chan_ax)(ch);<sp/></highlight><highlight class="comment">//sky<sp/>freq<sp/>of<sp/>this<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>net_sideband<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/>sidebandlabelkey,<sp/>net_sideband);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!key_present)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1acd8d50c6722941e40e21c59ffba48011" kindref="member">msg_error</ref>(</highlight><highlight class="stringliteral">&quot;fringe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;missing<sp/>net_sideband<sp/>label<sp/>for<sp/>channel<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ch<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(0);<sp/></highlight><highlight class="comment">//DSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(net_sideband<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;U&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(1);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(net_sideband<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;L&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(-1);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//DSB<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dsb_partner<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dsb_key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/></highlight><highlight class="stringliteral">&quot;dsb_partner&quot;</highlight><highlight class="normal">,<sp/>dsb_partner);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dsb_key_present){<ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(0);}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//make<sp/>sure<sp/>this<sp/>plot<sp/>gets<sp/>the<sp/>channel<sp/>label:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&amp;std::get&lt;<sp/>0<sp/>&gt;(phasor_segs))-&gt;InsertIndexLabelKeyValue(ch,<sp/>chan_label_key,<sp/>channel_labels[ch]);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&amp;std::get&lt;<sp/>0<sp/>&gt;(phasor_segs))-&gt;at(ch)<sp/>=<sp/>freq;<sp/></highlight><highlight class="comment">//set<sp/>the<sp/>channel<sp/>frequency<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>vis<sp/>=<sp/>(*fSBDArray)(POLPROD,<sp/>ch,<sp/>ap,<sp/>max_sbd_bin);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>vr<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1accca463720069cf78269bf43a25e6151" kindref="member">vrot</ref>(tdelta,<sp/>freq,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a15c58abd469690695a2d30dbb7691d67" kindref="member">fRefFreq</ref>,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a9b7b5c51dc12f91e6a507996299a5259" kindref="member">fDelayRate</ref>,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a4ea40a519e16f78b9256819c0c8f72ab" kindref="member">fMBDelay</ref>);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>z<sp/>=<sp/>vis<sp/>*<sp/>vr;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phasor_segs(ch,<sp/>ap)<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apply<sp/>weight<sp/>and<sp/>sum<sp/>(for<sp/>&apos;All&apos;<sp/>channel)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>(*fWeights)(POLPROD,<sp/>ch,<sp/>ap,<sp/>0);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>wght_phsr<sp/>=<sp/>w<sp/>*<sp/>z;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>wght_phsr;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sumwt<sp/>+=<sp/>w;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&amp;std::get&lt;<sp/>1<sp/>&gt;(phasor_segs))-&gt;at(ap)<sp/>=<sp/>ap_ax-&gt;at(ap);<sp/></highlight><highlight class="comment">//set<sp/>the<sp/>ap<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>the<sp/>sum<sp/>over<sp/>all<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phasor_segs(nchan,<sp/>ap)<sp/>=<sp/>sum<sp/>/<sp/>sumwt;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>all_chan_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;All&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&amp;std::get&lt;<sp/>0<sp/>&gt;(phasor_segs))-&gt;InsertIndexLabelKeyValue(nchan,<sp/>chan_label_key,<sp/>all_chan_name);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>phasor_segs;</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1aaac0b3180af5c5345baa9f5c2d37ec11" kindref="member">MHO_ComputePlotData::correct_vis</ref>()</highlight></codeline>
<codeline lineno="375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>POLPROD<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nchan<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af6edda99df6b30130c0d1da47ed384b5" kindref="member">fVisibilities</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a843b672baf3c6931695722ce03e47628" kindref="member">CHANNEL_AXIS</ref>);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nap<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af6edda99df6b30130c0d1da47ed384b5" kindref="member">fVisibilities</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a897cf2a16955f6e17aaa6b91d0a77b85" kindref="member">TIME_AXIS</ref>);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nbins<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af6edda99df6b30130c0d1da47ed384b5" kindref="member">fVisibilities</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a7833826050c86ab6132bf256f1cec006" kindref="member">FREQ_AXIS</ref>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chan_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>CHANNEL_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1af6edda99df6b30130c0d1da47ed384b5" kindref="member">fVisibilities</ref>));</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ap_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>TIME_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1af6edda99df6b30130c0d1da47ed384b5" kindref="member">fVisibilities</ref>));</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>freq_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>FREQ_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1af6edda99df6b30130c0d1da47ed384b5" kindref="member">fVisibilities</ref>));</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ap_delta<sp/>=<sp/>ap_ax-&gt;at(1)<sp/>-<sp/>ap_ax-&gt;at(0);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frt_offset<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/config/frt_offset&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//grab<sp/>the<sp/>fourfit<sp/>channel<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>chan_label_key<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;channel_label&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::string<sp/>&gt;<sp/>channel_labels;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>chan_ax-&gt;GetSize();<sp/>ch++)</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>ch_label;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/>chan_label_key,<sp/>ch_label);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(key_present)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel_labels.push_back(ch_label);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>sidebandlabelkey<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;net_sideband&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>bandwidthlabelkey<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bandwidth&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ap<sp/>=<sp/>0;<sp/>ap<sp/>&lt;<sp/>nap;<sp/>ap++)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>sum<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//sum<sp/>over<sp/>all<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sumwt<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tdelta<sp/>=<sp/>(ap_ax-&gt;at(ap)<sp/>+<sp/>ap_delta<sp/>/<sp/>2.0)<sp/>-<sp/>frt_offset;<sp/></highlight><highlight class="comment">//need<sp/>time<sp/>difference<sp/>from<sp/>the<sp/>f.r.t?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nchan;<sp/>ch++)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freq<sp/>=<sp/>(*chan_ax)(ch);<sp/></highlight><highlight class="comment">//sky<sp/>freq<sp/>of<sp/>this<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>net_sideband<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/>sidebandlabelkey,<sp/>net_sideband);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!key_present)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1acd8d50c6722941e40e21c59ffba48011" kindref="member">msg_error</ref>(</highlight><highlight class="stringliteral">&quot;fringe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;missing<sp/>net_sideband<sp/>label<sp/>for<sp/>channel<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ch<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bw<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/>bandwidthlabelkey,<sp/>bw);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!key_present)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1acd8d50c6722941e40e21c59ffba48011" kindref="member">msg_error</ref>(</highlight><highlight class="stringliteral">&quot;fringe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;missing<sp/>bandwidth<sp/>label<sp/>for<sp/>channel<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ch<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sb_sign<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(0);<sp/></highlight><highlight class="comment">//DSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(net_sideband<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;U&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(1);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_sign<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(net_sideband<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;L&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(-1);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_sign<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//DSB<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dsb_partner<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dsb_key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/></highlight><highlight class="stringliteral">&quot;dsb_partner&quot;</highlight><highlight class="normal">,<sp/>dsb_partner);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dsb_key_present)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(0);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_sign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>imag_unit(0,<sp/>1);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//calculate<sp/>the<sp/>per-channel<sp/>phase<sp/>rotation<sp/>due<sp/>to<sp/>MBD<sp/>and<sp/>delay_rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>vr<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1accca463720069cf78269bf43a25e6151" kindref="member">vrot</ref>(tdelta,<sp/>freq,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a15c58abd469690695a2d30dbb7691d67" kindref="member">fRefFreq</ref>,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a9b7b5c51dc12f91e6a507996299a5259" kindref="member">fDelayRate</ref>,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a4ea40a519e16f78b9256819c0c8f72ab" kindref="member">fMBDelay</ref>);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//now<sp/>apply<sp/>a<sp/>rotation<sp/>for<sp/>the<sp/>SBD<sp/>at<sp/>each<sp/>spectral<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>sp<sp/>=<sp/>0;<sp/>sp<sp/>&lt;<sp/>nbins;<sp/>sp++)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apply<sp/>the<sp/>rotation....hey<sp/>wait<sp/>a<sp/>minute,<sp/>what<sp/>about<sp/>the<sp/>frequency<sp/>change<sp/>across<sp/>the<sp/>channel??!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//double<sp/>fr<sp/>=<sp/>freq<sp/>-<sp/>(*freq_ax)[lag];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout&lt;&lt;&quot;vrot<sp/>=<sp/>@&quot;&lt;&lt;ap&lt;&lt;&quot;,<sp/>&quot;&lt;&lt;lag&lt;&lt;&quot;<sp/>=<sp/>&quot;&lt;&lt;std::arg(vr)*(180/M_PI)&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta<sp/>=<sp/>sb_sign<sp/>*<sp/>((*freq_ax)[sp]<sp/>-<sp/>bw<sp/>/<sp/>2.0)<sp/>*<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a720cf67a5f227bf6cb8e50f544dc0a15" kindref="member">fSBDelay</ref>;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout&lt;&lt;&quot;THETA<sp/>@<sp/>lag<sp/>&quot;&lt;&lt;lag&lt;&lt;&quot;<sp/>=<sp/>&quot;&lt;&lt;theta&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>sbd_rot<sp/>=<sp/>std::exp(-2.0<sp/>*<sp/>M_PI<sp/>*<sp/>imag_unit<sp/>*<sp/>theta);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>vis<sp/>=<sp/>(*fVisibilities)(POLPROD,<sp/>ch,<sp/>ap,<sp/>sp);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*fVisibilities)(POLPROD,<sp/>ch,<sp/>ap,<sp/>sp)<sp/>=<sp/>std::conj(sbd_rot)<sp/>*<sp/>std::conj(vr)<sp/>*<sp/>vis;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//NOTE:<sp/>for<sp/>single<sp/>linear<sp/>pol-products<sp/>fourfit<sp/>applies<sp/>a<sp/>sign<sp/>correction<sp/>based<sp/>on<sp/>delta-parallactic<sp/>angle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>should<sp/>probably<sp/>invert<sp/>this<sp/>correction<sp/>here,<sp/>because<sp/>it<sp/>results<sp/>in<sp/>a<sp/>very<sp/>confusing<sp/>180<sp/>sign<sp/>flip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>we<sp/>process<sp/>the<sp/>&apos;corrected&apos;<sp/>visibilities<sp/>through<sp/>fourfit<sp/>once<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//So<sp/>now<sp/>--<sp/>we<sp/>retrieve<sp/>the<sp/>MHO_LinearDParCorrection<sp/>operator<sp/>from<sp/>the<sp/>operator<sp/>toolbox<sp/>and<sp/>apply<sp/>it&apos;s<sp/>inverse<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classhops_1_1MHO__ComputePlotData_1a2d7eae943f360c37227da665431dfc07" kindref="member">fToolbox</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>op_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dpar_corr&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MHO_Operator*<sp/>op<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a2d7eae943f360c37227da665431dfc07" kindref="member">fToolbox</ref>-&gt;<ref refid="classhops_1_1MHO__OperatorToolbox_1a794faa6ae429d6e114d87bfd0ea23c38" kindref="member">GetOperator</ref>(op_name);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(op<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MHO_LinearDParCorrection*<sp/>dpar_op<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><sp/>MHO_LinearDParCorrection*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(op);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dpar_op<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dpar_op-&gt;<ref refid="classhops_1_1MHO__Operator_1aef614b32feed8813b6eefe7bd09a98d7" kindref="member">Execute</ref>();<sp/></highlight><highlight class="comment">//the<sp/>nature<sp/>of<sp/>this<sp/>operator<sp/>is<sp/>that<sp/>if<sp/>we<sp/>execute<sp/>it<sp/>twice,<sp/>it&apos;s<sp/>effect<sp/>is<sp/>inverted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Finally,<sp/>we<sp/>need<sp/>to<sp/>determine<sp/>if<sp/>the<sp/>user<sp/>asked<sp/>to<sp/>have<sp/>the<sp/>visibilities<sp/>summed/reduced<sp/>along<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//a<sp/>particular<sp/>axis<sp/>(to<sp/>condense<sp/>the<sp/>output),<sp/>typical<sp/>use<sp/>case<sp/>is<sp/>either<sp/>none,<sp/>or<sp/>along<sp/>the<sp/>time-axis<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xpower_output<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/cmdline/xpower_output&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//do<sp/>nothing,<sp/>either<sp/>we<sp/>were<sp/>not<sp/>asked<sp/>to<sp/>attach<sp/>this<sp/>data<sp/>to<sp/>the<sp/>output<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//or<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>reduced<sp/>in<sp/>any<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xpower_output<sp/>==<sp/>-1<sp/>||<sp/>xpower_output<sp/>==<sp/>0){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;}<sp/></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(0<sp/>&lt;<sp/>xpower_output<sp/>&amp;&amp;<sp/>xpower_output<sp/>&lt;=<sp/>3)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MHO_Reducer&lt;<sp/>visibility_type,<sp/>MHO_CompoundSum<sp/>&gt;<sp/>vis_reducer;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vis_reducer.SetArgs(<ref refid="classhops_1_1MHO__ComputePlotData_1af6edda99df6b30130c0d1da47ed384b5" kindref="member">fVisibilities</ref>);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vis_reducer.ReduceAxis(xpower_output);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>init<sp/>=<sp/>vis_reducer.Initialize();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>exe<sp/>=<sp/>vis_reducer.Execute();</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MHO_Reducer&lt;<sp/>weight_type,<sp/>MHO_CompoundSum<sp/>&gt;<sp/>wt_reducer;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wt_reducer.SetArgs(<ref refid="classhops_1_1MHO__ComputePlotData_1a92a2d09064cfaf9440bdad4e6df816ad" kindref="member">fWeights</ref>);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wt_reducer.ReduceAxis(xpower_output);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init<sp/>=<sp/>wt_reducer.Initialize();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exe<sp/>=<sp/>wt_reducer.Execute();</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><ref refid="namespacehops_1a0876bf037431c9d1550c2af6cb40a34c" kindref="member">xpower_amp_type</ref><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a64cd51debb76a2a74bd63c0fe0563aa3" kindref="member">MHO_ComputePlotData::calc_dr</ref>()</highlight></codeline>
<codeline lineno="509"><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//grab<sp/>the<sp/>total<sp/>summed<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_summed_weights<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a92a2d09064cfaf9440bdad4e6df816ad" kindref="member">fWeights</ref>-&gt;<ref refid="classhops_1_1MHO__JSONWrapper_1a8af109cd5401bbce3e2d380c32111e35" kindref="member">Retrieve</ref>(</highlight><highlight class="stringliteral">&quot;total_summed_weights&quot;</highlight><highlight class="normal">,<sp/>total_summed_weights);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>POLPROD<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nchan<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a843b672baf3c6931695722ce03e47628" kindref="member">CHANNEL_AXIS</ref>);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nap<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a897cf2a16955f6e17aaa6b91d0a77b85" kindref="member">TIME_AXIS</ref>);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>drsp_size<sp/>=<sp/>2<sp/>*<sp/><ref refid="classhops_1_1MHO__BitReversalPermutation_1a12577ae76d52e7f739ef7d62e244b8b6" kindref="member">MHO_BitReversalPermutation::NextLowestPowerOfTwo</ref>(nap);<sp/></highlight><highlight class="comment">//see<sp/>MHO_DelayRate.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(drsp_size<sp/>&lt;<sp/>256){drsp_size<sp/>=<sp/>256;}<sp/></highlight><highlight class="comment">//Empirically<sp/>determined<sp/>from<sp/>FRNGE<sp/>plots<sp/>(see<sp/>line<sp/>72<sp/>of<sp/>make_plotdata.c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//resize<sp/>workspaces<sp/>(TODO...make<sp/>conditional<sp/>on<sp/>current<sp/>size<sp/>--<sp/>if<sp/>already<sp/>configured)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ab71cb3cb3ccafed244c473ffe291fef8" kindref="member">fDRWorkspace</ref>.<ref refid="classhops_1_1MHO__TableContainer_1a296d158a9afa689ada830cc24759e86f" kindref="member">Resize</ref>(drsp_size);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ab71cb3cb3ccafed244c473ffe291fef8" kindref="member">fDRWorkspace</ref>.<ref refid="classhops_1_1MHO__NDArrayWrapper_1aa8c5dd06d0440052d4cbc8ceada33ef0" kindref="member">ZeroArray</ref>();</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0d9c172552506fa293231d92dd510556" kindref="member">fDRAmpWorkspace</ref>.<ref refid="classhops_1_1MHO__TableContainer_1a296d158a9afa689ada830cc24759e86f" kindref="member">Resize</ref>(drsp_size);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0d9c172552506fa293231d92dd510556" kindref="member">fDRAmpWorkspace</ref>.<ref refid="classhops_1_1MHO__NDArrayWrapper_1aa8c5dd06d0440052d4cbc8ceada33ef0" kindref="member">ZeroArray</ref>();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>up<sp/>FFT<sp/>and<sp/>rotator<sp/>engines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af75d15daa12b707d755602cfcd0341ea" kindref="member">fFFTEngine</ref>.SetArgs(&amp;<ref refid="classhops_1_1MHO__ComputePlotData_1ab71cb3cb3ccafed244c473ffe291fef8" kindref="member">fDRWorkspace</ref>);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af75d15daa12b707d755602cfcd0341ea" kindref="member">fFFTEngine</ref>.DeselectAllAxes();</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af75d15daa12b707d755602cfcd0341ea" kindref="member">fFFTEngine</ref>.SelectAxis(0);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af75d15daa12b707d755602cfcd0341ea" kindref="member">fFFTEngine</ref>.SetForward();</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af75d15daa12b707d755602cfcd0341ea" kindref="member">fFFTEngine</ref>.Initialize();</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1af6437b9d519f790db58bab45c8559082" kindref="member">check_step_fatal</ref>(ok,<sp/></highlight><highlight class="stringliteral">&quot;calibration&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MBD<sp/>search<sp/>fft<sp/>engine<sp/>initialization.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a36ccde6803c5764e2b7a27e7ba347b26" kindref="member">fCyclicRotator</ref>.SetOffset(0,<sp/>drsp_size<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a36ccde6803c5764e2b7a27e7ba347b26" kindref="member">fCyclicRotator</ref>.SetArgs(&amp;<ref refid="classhops_1_1MHO__ComputePlotData_1ab71cb3cb3ccafed244c473ffe291fef8" kindref="member">fDRWorkspace</ref>);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a36ccde6803c5764e2b7a27e7ba347b26" kindref="member">fCyclicRotator</ref>.Initialize();</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1af6437b9d519f790db58bab45c8559082" kindref="member">check_step_fatal</ref>(ok,<sp/></highlight><highlight class="stringliteral">&quot;calibration&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MBD<sp/>search<sp/>cyclic<sp/>rotation<sp/>initialization.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//now<sp/>we<sp/>are<sp/>going<sp/>to<sp/>loop<sp/>over<sp/>all<sp/>of<sp/>the<sp/>channels/AP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//and<sp/>perform<sp/>the<sp/>weighted<sp/>sum<sp/>of<sp/>the<sp/>data<sp/>at<sp/>the<sp/>max-SBD<sp/>bin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//with<sp/>the<sp/>fitted<sp/>delay-rate<sp/>rotation<sp/>(but<sp/>mbd=0)<sp/>applied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chan_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>CHANNEL_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ap_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>TIME_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sbd_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>FREQ_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ap_delta<sp/>=<sp/>ap_ax-&gt;at(1)<sp/>-<sp/>ap_ax-&gt;at(0);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sbd_delta<sp/>=<sp/>sbd_ax-&gt;at(1)<sp/>-<sp/>sbd_ax-&gt;at(0);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frt_offset<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/config/frt_offset&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dr_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>0<sp/>&gt;(<ref refid="classhops_1_1MHO__ComputePlotData_1ab71cb3cb3ccafed244c473ffe291fef8" kindref="member">fDRWorkspace</ref>));</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>drsp_size;<sp/>i++)</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dr_ax-&gt;at(i)<sp/>=<sp/>i<sp/>*<sp/>ap_delta;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>sidebandlabelkey<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;net_sideband&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nchan;<sp/>ch++)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freq<sp/>=<sp/>(*chan_ax)(ch);<sp/></highlight><highlight class="comment">//sky<sp/>freq<sp/>of<sp/>this<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>net_sideband<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/>sidebandlabelkey,<sp/>net_sideband);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!key_present)</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1acd8d50c6722941e40e21c59ffba48011" kindref="member">msg_error</ref>(</highlight><highlight class="stringliteral">&quot;fringe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;missing<sp/>net_sideband<sp/>label<sp/>for<sp/>channel<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ch<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(0);<sp/></highlight><highlight class="comment">//DSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(net_sideband<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;U&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(1);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(net_sideband<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;L&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(-1);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//DSB<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dsb_partner<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dsb_key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/></highlight><highlight class="stringliteral">&quot;dsb_partner&quot;</highlight><highlight class="normal">,<sp/>dsb_partner);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dsb_key_present){<ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(0);}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ap<sp/>=<sp/>0;<sp/>ap<sp/>&lt;<sp/>nap;<sp/>ap++)</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tdelta<sp/>=<sp/>(ap_ax-&gt;at(ap)<sp/>+<sp/>ap_delta<sp/>/<sp/>2.0)<sp/>-<sp/>frt_offset;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//need<sp/>time<sp/>difference<sp/>from<sp/>the<sp/>f.r.t?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>vis<sp/>=<sp/>(*fSBDArray)(POLPROD,<sp/>ch,<sp/>ap,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a6993ae2e043c079b6806cf8f141cffbe" kindref="member">fSBDMaxBin</ref>);<sp/></highlight><highlight class="comment">//pick<sp/>out<sp/>data<sp/>at<sp/>SBD<sp/>max<sp/>bin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>vr<sp/>=</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1accca463720069cf78269bf43a25e6151" kindref="member">vrot</ref>(tdelta,<sp/>freq,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a15c58abd469690695a2d30dbb7691d67" kindref="member">fRefFreq</ref>,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a9b7b5c51dc12f91e6a507996299a5259" kindref="member">fDelayRate</ref>,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a4ea40a519e16f78b9256819c0c8f72ab" kindref="member">fMBDelay</ref>);<sp/></highlight><highlight class="comment">//why<sp/>rotate<sp/>at<sp/>the<sp/>max<sp/>delay<sp/>rate??</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>z<sp/>=<sp/>vis<sp/>*<sp/>vr;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apply<sp/>weight<sp/>and<sp/>sum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>(*fWeights)(POLPROD,<sp/>ch,<sp/>ap,<sp/>0);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ab71cb3cb3ccafed244c473ffe291fef8" kindref="member">fDRWorkspace</ref>(ap)<sp/>+=<sp/>w<sp/>*<sp/>z;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//now<sp/>run<sp/>an<sp/>FFT<sp/>along<sp/>the<sp/>MBD<sp/>axis<sp/>and<sp/>cyclic<sp/>rotate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af75d15daa12b707d755602cfcd0341ea" kindref="member">fFFTEngine</ref>.Execute();</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1af6437b9d519f790db58bab45c8559082" kindref="member">check_step_fatal</ref>(ok,<sp/></highlight><highlight class="stringliteral">&quot;calibration&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MBD<sp/>search<sp/>fft<sp/>engine<sp/>execution.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a36ccde6803c5764e2b7a27e7ba347b26" kindref="member">fCyclicRotator</ref>.Execute();</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1af6437b9d519f790db58bab45c8559082" kindref="member">check_step_fatal</ref>(ok,<sp/></highlight><highlight class="stringliteral">&quot;calibration&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MBD<sp/>search<sp/>cyclic<sp/>rotation<sp/>execution.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>drsp_size;<sp/>i++)</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0d9c172552506fa293231d92dd510556" kindref="member">fDRAmpWorkspace</ref>[i]<sp/>=<sp/>std::abs(<ref refid="classhops_1_1MHO__ComputePlotData_1ab71cb3cb3ccafed244c473ffe291fef8" kindref="member">fDRWorkspace</ref>[i])<sp/>/<sp/>total_summed_weights;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1aecaae848aae9625eafba624faf0a17ab" kindref="member">TODO_FIXME_MSG</ref>(</highlight><highlight class="stringliteral">&quot;TODO<sp/>FIXME,<sp/>factor<sp/>1/1000<sp/>is<sp/>due<sp/>to<sp/>need<sp/>to<sp/>plot<sp/>axis<sp/>in<sp/>ns/s&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;<sp/>0<sp/>&gt;(<ref refid="classhops_1_1MHO__ComputePlotData_1a0d9c172552506fa293231d92dd510556" kindref="member">fDRAmpWorkspace</ref>).at(i)<sp/>=<sp/>(std::get&lt;<sp/>0<sp/>&gt;(<ref refid="classhops_1_1MHO__ComputePlotData_1ab71cb3cb3ccafed244c473ffe291fef8" kindref="member">fDRWorkspace</ref>).at(i))<sp/>/<sp/>(<ref refid="classhops_1_1MHO__ComputePlotData_1a15c58abd469690695a2d30dbb7691d67" kindref="member">fRefFreq</ref><sp/>/<sp/>1000.0);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0d9c172552506fa293231d92dd510556" kindref="member">fDRAmpWorkspace</ref>;</highlight></codeline>
<codeline lineno="611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1aee323fc80b6f65ab8065fe6a3ed9cf84" kindref="member">MHO_ComputePlotData</ref>::<ref refid="classhops_1_1MHO__ComputePlotData_1a15618304ccef76255bc97fe559a8ea97" kindref="member">calc_phase</ref>()</highlight></codeline>
<codeline lineno="614"><highlight class="normal">{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//grab<sp/>the<sp/>total<sp/>summed<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_summed_weights<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a92a2d09064cfaf9440bdad4e6df816ad" kindref="member">fWeights</ref>-&gt;<ref refid="classhops_1_1MHO__JSONWrapper_1a8af109cd5401bbce3e2d380c32111e35" kindref="member">Retrieve</ref>(</highlight><highlight class="stringliteral">&quot;total_summed_weights&quot;</highlight><highlight class="normal">,<sp/>total_summed_weights);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>POLPROD<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nchan<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a843b672baf3c6931695722ce03e47628" kindref="member">CHANNEL_AXIS</ref>);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nap<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a897cf2a16955f6e17aaa6b91d0a77b85" kindref="member">TIME_AXIS</ref>);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//now<sp/>we<sp/>are<sp/>going<sp/>to<sp/>loop<sp/>over<sp/>all<sp/>of<sp/>the<sp/>channels/AP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//and<sp/>perform<sp/>the<sp/>weighted<sp/>sum<sp/>of<sp/>the<sp/>data<sp/>at<sp/>the<sp/>max-SBD<sp/>bin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//with<sp/>the<sp/>fitted<sp/>delay-rate<sp/>rotation<sp/>(but<sp/>mbd=0)<sp/>applied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chan_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>CHANNEL_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ap_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>TIME_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sbd_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>FREQ_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ap_delta<sp/>=<sp/>ap_ax-&gt;at(1)<sp/>-<sp/>ap_ax-&gt;at(0);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sbd_delta<sp/>=<sp/>sbd_ax-&gt;at(1)<sp/>-<sp/>sbd_ax-&gt;at(0);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1afe623a19529839b634537618dbea9345" kindref="member">SetSBDSeparation</ref>(sbd_delta);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1a43e899be0d852d7ca494962ea51e3341" kindref="member">SetSBDMaxBin</ref>(<ref refid="classhops_1_1MHO__ComputePlotData_1a6993ae2e043c079b6806cf8f141cffbe" kindref="member">fSBDMaxBin</ref>);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1a42ea3b07abf5d9b53889856f350911ae" kindref="member">SetNSBDBins</ref>(sbd_ax-&gt;GetSize()<sp/>/<sp/>2);<sp/></highlight><highlight class="comment">//this<sp/>is<sp/>effective<sp/>nlags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1a342ee97becabd7ac9b6615341846278b" kindref="member">SetSBDMax</ref>(<ref refid="classhops_1_1MHO__ComputePlotData_1a720cf67a5f227bf6cb8e50f544dc0a15" kindref="member">fSBDelay</ref>);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frt_offset<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/config/frt_offset&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a3a2581bf72f44951d441796b22615401" kindref="member">fFringe</ref>.<ref refid="classhops_1_1MHO__TableContainer_1a296d158a9afa689ada830cc24759e86f" kindref="member">Resize</ref>(nchan);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>sum_all<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>sidebandlabelkey<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;net_sideband&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nchan;<sp/>ch++)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freq<sp/>=<sp/>(*chan_ax)(ch);<sp/></highlight><highlight class="comment">//sky<sp/>freq<sp/>of<sp/>this<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;<sp/>0<sp/>&gt;(<ref refid="classhops_1_1MHO__ComputePlotData_1a3a2581bf72f44951d441796b22615401" kindref="member">fFringe</ref>).at(ch)<sp/>=<sp/>freq;<sp/></highlight><highlight class="comment">//set<sp/>the<sp/>fringe<sp/>element<sp/>freq<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>net_sideband<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/>sidebandlabelkey,<sp/>net_sideband);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!key_present)</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1acd8d50c6722941e40e21c59ffba48011" kindref="member">msg_error</ref>(</highlight><highlight class="stringliteral">&quot;fringe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;missing<sp/>net_sideband<sp/>label<sp/>for<sp/>channel<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ch<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(0);<sp/></highlight><highlight class="comment">//DSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(net_sideband<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;U&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(1);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(net_sideband<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;L&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(-1);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//DSB<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dsb_partner<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dsb_key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/></highlight><highlight class="stringliteral">&quot;dsb_partner&quot;</highlight><highlight class="normal">,<sp/>dsb_partner);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dsb_key_present){<ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(0);}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>fringe_phasor<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sumwt<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ap<sp/>=<sp/>0;<sp/>ap<sp/>&lt;<sp/>nap;<sp/>ap++)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tdelta<sp/>=<sp/>(ap_ax-&gt;at(ap)<sp/>+<sp/>ap_delta<sp/>/<sp/>2.0)<sp/>-<sp/>frt_offset;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//need<sp/>time<sp/>difference<sp/>from<sp/>the<sp/>f.r.t?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>vis<sp/>=<sp/>(*fSBDArray)(POLPROD,<sp/>ch,<sp/>ap,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a6993ae2e043c079b6806cf8f141cffbe" kindref="member">fSBDMaxBin</ref>);<sp/></highlight><highlight class="comment">//pick<sp/>out<sp/>data<sp/>at<sp/>SBD<sp/>max<sp/>bin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>vr<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1accca463720069cf78269bf43a25e6151" kindref="member">vrot</ref>(tdelta,<sp/>freq,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a15c58abd469690695a2d30dbb7691d67" kindref="member">fRefFreq</ref>,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a9b7b5c51dc12f91e6a507996299a5259" kindref="member">fDelayRate</ref>,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a4ea40a519e16f78b9256819c0c8f72ab" kindref="member">fMBDelay</ref>);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>z<sp/>=<sp/>vis<sp/>*<sp/>vr;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apply<sp/>weight<sp/>and<sp/>sum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>(*fWeights)(POLPROD,<sp/>ch,<sp/>ap,<sp/>0);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sumwt<sp/>+=<sp/>w;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>wght_phsr<sp/>=<sp/>z<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_all<sp/>+=<sp/>wght_phsr;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fringe_phasor<sp/>+=<sp/>wght_phsr;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>the<sp/>fringe<sp/>phasor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//NOTE<sp/>we<sp/>have<sp/>NOT<sp/>applied<sp/>the<sp/>correction<sp/>factor<sp/>(see<sp/>make_plotdata.c<sp/>line<sp/>356)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//c<sp/>=<sp/>(sumwt<sp/>&gt;<sp/>0.0)<sp/>?<sp/>status.amp_corr_fact/sumwt<sp/>:<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a3a2581bf72f44951d441796b22615401" kindref="member">fFringe</ref>[ch]<sp/>=<sp/>fringe_phasor<sp/>/<sp/>sumwt;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coh_avg_phase<sp/>=<sp/>std::arg(sum_all);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout&lt;&lt;&quot;coh_avg_phase<sp/>=<sp/>&quot;&lt;&lt;coh_avg_phase&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>coh_avg_phase;<sp/></highlight><highlight class="comment">//not<sp/>quite<sp/>the<sp/>value<sp/>which<sp/>is<sp/>displayed<sp/>in<sp/>the<sp/>fringe<sp/>plot<sp/>(see<sp/>fill<sp/>type<sp/>208)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><ref refid="namespacehops_1a085bda9bb87c6f1100bf200de099be8e" kindref="member">xpower_type</ref><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ad69032b475650994769111f367a47af9" kindref="member">MHO_ComputePlotData::calc_xpower_spec</ref>()</highlight></codeline>
<codeline lineno="701"><highlight class="normal">{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//kludge<sp/>version<sp/>-<sp/>this<sp/>code<sp/>is<sp/>adapted<sp/>from<sp/>a<sp/>combination<sp/>of<sp/>what<sp/>is<sp/>found<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//make_plotdata.c<sp/>and<sp/>generate_graphs.c.<sp/>It<sp/>is<sp/>extremely<sp/>convoluted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//and<sp/>we<sp/>ought<sp/>to<sp/>find<sp/>a<sp/>cleaner/clearer<sp/>way<sp/>to<sp/>do<sp/>the<sp/>same<sp/>thing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//grab<sp/>the<sp/>total<sp/>summed<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_summed_weights<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a92a2d09064cfaf9440bdad4e6df816ad" kindref="member">fWeights</ref>-&gt;<ref refid="classhops_1_1MHO__JSONWrapper_1a8af109cd5401bbce3e2d380c32111e35" kindref="member">Retrieve</ref>(</highlight><highlight class="stringliteral">&quot;total_summed_weights&quot;</highlight><highlight class="normal">,<sp/>total_summed_weights);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlags<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a7833826050c86ab6132bf256f1cec006" kindref="member">FREQ_AXIS</ref>)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nl<sp/>=<sp/>nlags;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehops_1a085bda9bb87c6f1100bf200de099be8e" kindref="member">xpower_type</ref><sp/>X;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehops_1a085bda9bb87c6f1100bf200de099be8e" kindref="member">xpower_type</ref><sp/>Y;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehops_1a085bda9bb87c6f1100bf200de099be8e" kindref="member">xpower_type</ref><sp/>cp_spectrum;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehops_1a085bda9bb87c6f1100bf200de099be8e" kindref="member">xpower_type</ref><sp/>cp_spectrum_out;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>X.<ref refid="classhops_1_1MHO__TableContainer_1a296d158a9afa689ada830cc24759e86f" kindref="member">Resize</ref>(2<sp/>*<sp/>nl);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>X.ZeroArray();</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>Y.Resize(4<sp/>*<sp/>nl);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>Y.ZeroArray();</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>cp_spectrum.Resize(2<sp/>*<sp/>nl);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>cp_spectrum.ZeroArray();</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>POLPROD<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nchan<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a843b672baf3c6931695722ce03e47628" kindref="member">CHANNEL_AXIS</ref>);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nap<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a897cf2a16955f6e17aaa6b91d0a77b85" kindref="member">TIME_AXIS</ref>);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nbins<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>-&gt;<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(<ref refid="MHO__BaselineContainers_8hh_1a7833826050c86ab6132bf256f1cec006" kindref="member">FREQ_AXIS</ref>);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//single<sp/>channel<sp/>xpower<sp/>spectrum,<sp/>need<sp/>this<sp/>info<sp/>for<sp/>the<sp/>&apos;sbdbox&apos;<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printed<sp/>out<sp/>on<sp/>the<sp/>fourfit<sp/>plot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>xpower_type<sp/>&gt;<sp/>sbxsp;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;<sp/>maxlag;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;<sp/>maxlag_amp;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;<sp/>sbdbox;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>sbxsp.resize(nchan);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>maxlag.resize(nchan,<sp/>0);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>maxlag_amp.resize(nchan,<sp/>0.0);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>sbdbox.resize(nchan,<sp/>0.0);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nchan;<sp/>ch++)</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sbxsp[ch].Resize(2<sp/>*<sp/>nl);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>FIXME...this<sp/>is<sp/>temporary,<sp/>as<sp/>it<sp/>doesn&apos;t<sp/>account<sp/>for<sp/>min_weight<sp/>cuts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;<sp/>nusb_ap;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>nusb_ap.resize(nchan,<sp/>0);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;<sp/>nlsb_ap;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>nlsb_ap.resize(nchan,<sp/>0);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chan_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>CHANNEL_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ap_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>TIME_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sbd_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>FREQ_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ap_delta<sp/>=<sp/>ap_ax-&gt;at(1)<sp/>-<sp/>ap_ax-&gt;at(0);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sbd_delta<sp/>=<sp/>sbd_ax-&gt;at(1)<sp/>-<sp/>sbd_ax-&gt;at(0);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frt_offset<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/config/frt_offset&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>sum;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>Z,<sp/>vr;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frac;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bw;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>net_sideband<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//count<sp/>the<sp/>sidebands<sp/>encountered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nusb<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlsb<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>sidebandlabelkey<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;net_sideband&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>bandwidthlabelkey<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bandwidth&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_usb_frac<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_lsb_frac<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lag<sp/>=<sp/>0;<sp/>lag<sp/>&lt;<sp/>2<sp/>*<sp/>nl;<sp/>lag++)</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_usb_frac<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_lsb_frac<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nchan;<sp/>ch++)</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freq<sp/>=<sp/>(*chan_ax)(ch);<sp/></highlight><highlight class="comment">//sky<sp/>freq<sp/>of<sp/>this<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/>sidebandlabelkey,<sp/>net_sideband);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!key_present)</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1acd8d50c6722941e40e21c59ffba48011" kindref="member">msg_error</ref>(</highlight><highlight class="stringliteral">&quot;fringe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;missing<sp/>net_sideband<sp/>label<sp/>for<sp/>channel<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ch<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/>bandwidthlabelkey,<sp/>bw);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!key_present)</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1acd8d50c6722941e40e21c59ffba48011" kindref="member">msg_error</ref>(</highlight><highlight class="stringliteral">&quot;fringe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;missing<sp/>bandwidth<sp/>label<sp/>for<sp/>channel<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ch<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(0);<sp/></highlight><highlight class="comment">//DSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(net_sideband<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;U&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nusb<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(1);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nusb_ap[ch]<sp/>=<sp/>nap;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(net_sideband<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;L&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nlsb<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(-1);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nlsb_ap[ch]<sp/>=<sp/>nap;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//DSB<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dsb_partner<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dsb_key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/></highlight><highlight class="stringliteral">&quot;dsb_partner&quot;</highlight><highlight class="normal">,<sp/>dsb_partner);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dsb_key_present){<ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1ac8788a5e9d988e2aa3aaf008cbe0aa87" kindref="member">SetSideband</ref>(0);}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ap<sp/>=<sp/>0;<sp/>ap<sp/>&lt;<sp/>nap;<sp/>ap++)</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tdelta<sp/>=<sp/>(ap_ax-&gt;at(ap)<sp/>+<sp/>ap_delta<sp/>/<sp/>2.0)<sp/>-<sp/>frt_offset;<sp/></highlight><highlight class="comment">//need<sp/>time<sp/>difference<sp/>from<sp/>the<sp/>f.r.t?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>vis<sp/>=<sp/>(*fSBDArray)(POLPROD,<sp/>ch,<sp/>ap,<sp/>lag);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>vr<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8667850624a7b10f4ac12aa49ad5ebcf" kindref="member">fRot</ref>.<ref refid="classhops_1_1MHO__FringeRotation_1accca463720069cf78269bf43a25e6151" kindref="member">vrot</ref>(tdelta,<sp/>freq,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a15c58abd469690695a2d30dbb7691d67" kindref="member">fRefFreq</ref>,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a9b7b5c51dc12f91e6a507996299a5259" kindref="member">fDelayRate</ref>,<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a4ea40a519e16f78b9256819c0c8f72ab" kindref="member">fMBDelay</ref>);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>Z<sp/>=<sp/>vis<sp/>*<sp/>vr;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apply<sp/>weight<sp/>and<sp/>sum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>(*fWeights)(POLPROD,<sp/>ch,<sp/>ap,<sp/>0);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(net_sideband<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;U&quot;</highlight><highlight class="normal">){total_usb_frac<sp/>+=<sp/>w;}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(net_sideband<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;L&quot;</highlight><highlight class="normal">){total_lsb_frac<sp/>+=<sp/>w;}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if(dsb_key_present){<sp/>w<sp/>/=<sp/>2.0;}<sp/>//use<sp/>average<sp/>usb/lsb<sp/>weight<sp/>for<sp/>both<sp/>DSB<sp/>halves</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>w<sp/>*<sp/>Z;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sbxsp[ch].at(lag)<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X[lag]<sp/>=<sp/>X[lag]<sp/>+<sp/>sum;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(sum)<sp/>&gt;<sp/>maxlag_amp[ch])</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxlag_amp[ch]<sp/>=<sp/>std::abs(sum);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxlag[ch]<sp/>=<sp/>lag;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//need<sp/>to<sp/>understand<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>lag<sp/>-<sp/>nl;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>+=<sp/>4<sp/>*<sp/>nl;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lag<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>2<sp/>*<sp/>nl;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>pure<sp/>real<sp/>lsb/dc<sp/>channel<sp/>goes<sp/>in<sp/>middle??</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Y[j]<sp/>=<sp/>X[lag];</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;<sp/>0<sp/>&gt;(Y)(j)<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>up<sp/>FFT<sp/>and<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af75d15daa12b707d755602cfcd0341ea" kindref="member">fFFTEngine</ref>.SetArgs(&amp;Y);</highlight><highlight class="comment">//<sp/>&amp;Y);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af75d15daa12b707d755602cfcd0341ea" kindref="member">fFFTEngine</ref>.DeselectAllAxes();</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af75d15daa12b707d755602cfcd0341ea" kindref="member">fFFTEngine</ref>.SelectAxis(0);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af75d15daa12b707d755602cfcd0341ea" kindref="member">fFFTEngine</ref>.SetForward();</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af75d15daa12b707d755602cfcd0341ea" kindref="member">fFFTEngine</ref>.Initialize();</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1af75d15daa12b707d755602cfcd0341ea" kindref="member">fFFTEngine</ref>.Execute();</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/><ref refid="hops__complex_8c_1ac13fd503dc891a8ca5e7fd9025608c8e" kindref="member">cmplx_unit_I</ref>(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>Y.GetDimension(0)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>cp_spectrum.Resize(s);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2<sp/>*<sp/>nl;<sp/>i++)</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>nl<sp/>-<sp/>i;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sbfactor<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(total_usb_frac<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sbfactor<sp/>=<sp/>sqrt(0.5)<sp/>/<sp/>(M_PI<sp/>*<sp/>total_usb_frac);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(total_lsb_frac<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sbfactor<sp/>=<sp/>sqrt(0.5)<sp/>/<sp/>(M_PI<sp/>*<sp/>total_lsb_frac);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>+=<sp/>4<sp/>*<sp/>nl;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp_spectrum[i]<sp/>=<sp/>Y[j]<sp/>*<sp/>sbfactor;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z<sp/>=<sp/>std::exp(-1.0<sp/>*<sp/><ref refid="hops__complex_8c_1ac13fd503dc891a8ca5e7fd9025608c8e" kindref="member">cmplx_unit_I</ref><sp/>*<sp/>(<ref refid="classhops_1_1MHO__ComputePlotData_1a720cf67a5f227bf6cb8e50f544dc0a15" kindref="member">fSBDelay</ref><sp/>*<sp/>(i<sp/>-<sp/>nl)<sp/>*<sp/>M_PI<sp/>/<sp/>(sbd_delta<sp/>*<sp/>2.0<sp/>*<sp/>nl)));</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp_spectrum[i]<sp/>=<sp/>Z<sp/><sp/>*<sp/>cp_spectrum[i];</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//now<sp/>have<sp/>to<sp/>tweak<sp/>the<sp/>section<sp/>exported<sp/>to<sp/>the<sp/>plot<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//depending<sp/>on<sp/>how<sp/>many<sp/>USB/LSB/DSB<sp/>channels<sp/>we<sp/>have<sp/>encountered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xstart;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xend;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncp,<sp/>izero;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nusb<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>nlsb<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>DSB<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xstart<sp/>=<sp/>-bw;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xend<sp/>=<sp/>bw;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncp<sp/>=<sp/>2<sp/>*<sp/>nl;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>izero<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nlsb<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>LSB<sp/>only<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xstart<sp/>=<sp/>-bw;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xend<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncp<sp/>=<sp/>nl;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>izero<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>USB<sp/>only<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xstart<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xend<sp/>=<sp/>bw;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncp<sp/>=<sp/>nl;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>izero<sp/>=<sp/>nl;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>cp_spectrum_out.Resize(ncp);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ncp;<sp/>i++)</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>spec_axis_value<sp/>=<sp/>xstart<sp/>+<sp/>(xend<sp/>-<sp/>xstart)<sp/>*<sp/>i<sp/>/<sp/>ncp;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;<sp/>0<sp/>&gt;(cp_spectrum_out)(i)<sp/>=<sp/>spec_axis_value;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp_spectrum_out[i]<sp/>=<sp/>cp_spectrum[i<sp/>+<sp/>izero];</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//now<sp/>compute<sp/>the<sp/>sbdbox<sp/>for<sp/>each<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yy[3],<sp/>q[3];</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>peak,<sp/>maxv;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nchan;<sp/>ch++)</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//clamp<sp/>idx<sp/>so<sp/>we<sp/>cannot<sp/>exceed<sp/>[0,<sp/>2*nl-1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/><ref refid="max555_8c_1affe776513b24d84b39af8ab0930fef7f" kindref="member">std::max</ref>(maxlag[ch]<sp/>-<sp/>1<sp/>+<sp/>i,<sp/>0);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx<sp/>=<sp/><ref refid="max555_8c_1ac6afabdc09a49a433ee19d8a9486056d" kindref="member">std::min</ref>(idx,<sp/>2<sp/>*<sp/>nl<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yy[i]<sp/>=<sp/>std::abs(sbxsp[ch].at(idx));</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__MathUtilities_1a935a69db3aff7abd3916792739f173d3" kindref="member">MHO_MathUtilities::parabola</ref>(yy,<sp/>-1.0,<sp/>1.0,<sp/>&amp;peak,<sp/>&amp;maxv,<sp/>q);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sbdbox[ch]<sp/>=<sp/>maxlag[ch]<sp/>+<sp/>peak<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&apos;this<sp/>is<sp/>the<sp/>All-channel<sp/>sbdbox</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>sbdbox.push_back(nl<sp/>+<sp/>1<sp/>+<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a720cf67a5f227bf6cb8e50f544dc0a15" kindref="member">fSBDelay</ref><sp/>/<sp/>sbd_delta);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//copy<sp/>this<sp/>into<sp/>the<sp/>accessible<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1aa9a09a34a3d434eeccbea5fbd42a9c59" kindref="member">fSBDBox</ref><sp/>=<sp/>sbdbox;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a8d590fbbb95e665ad7adbf4c5aca1b3c" kindref="member">fNLSBAP</ref><sp/>=<sp/>nlsb_ap;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a5656e55b5bc6be1d5db56d2ddbc6af04" kindref="member">fNUSBAP</ref><sp/>=<sp/>nusb_ap;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cp_spectrum_out;</highlight></codeline>
<codeline lineno="949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a912a6d8b15d8c51cea7bb1b8a808de9f" kindref="member">MHO_ComputePlotData::DumpInfoToJSON</ref>(<ref refid="MHO__JSONHeaderWrapper_8hh_1ad8862af8dd9e65e2990665b6bbfcb6fe" kindref="member">mho_json</ref>&amp;<sp/>plot_dict)</highlight></codeline>
<codeline lineno="952"><highlight class="normal">{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classhops_1_1MHO__ComputePlotData_1ad3fd6e82bab752f9f5d77c7eb0bf9a0b" kindref="member">fValid</ref>)</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1acd8d50c6722941e40e21c59ffba48011" kindref="member">msg_error</ref>(</highlight><highlight class="stringliteral">&quot;fringe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>calculate<sp/>plot<sp/>data,<sp/>data<sp/>invalid&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sbd_amp<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ad8dc0743bc06d78f0b85cdee08b10b89" kindref="member">calc_sbd</ref>();</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mbd_amp<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a88c2d7b6c50f02105efd3c59a7d2dbe7" kindref="member">calc_mbd</ref>();</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dr_amp<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a64cd51debb76a2a74bd63c0fe0563aa3" kindref="member">calc_dr</ref>();</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>FIXME<sp/>--<sp/>move<sp/>the<sp/>residual<sp/>phase<sp/>calc<sp/>elsewhere<sp/>(but<sp/>we<sp/>need<sp/>it<sp/>for<sp/>the<sp/>moment<sp/>to<sp/>set<sp/>the<sp/>fRot<sp/>parameters)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coh_avg_phase<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a15618304ccef76255bc97fe559a8ea97" kindref="member">calc_phase</ref>();</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sbd_xpower<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ad69032b475650994769111f367a47af9" kindref="member">calc_xpower_spec</ref>();</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>phasors<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1adc17cfcfec0b49da0d8c8dcdb326dbca" kindref="member">calc_segs</ref>();</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>phasors.CopyTags(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>phasors.Insert(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;phasors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>std::get&lt;<sp/>0<sp/>&gt;(phasors).Insert(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;channel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>std::get&lt;<sp/>0<sp/>&gt;(phasors).Insert(</highlight><highlight class="stringliteral">&quot;units&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MHz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>std::get&lt;<sp/>1<sp/>&gt;(phasors).Insert(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>std::get&lt;<sp/>1<sp/>&gt;(phasors).Insert(</highlight><highlight class="stringliteral">&quot;units&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//have<sp/>to<sp/>clone<sp/>the<sp/>phasors<sp/>data<sp/>(because<sp/>this<sp/>copy<sp/>will<sp/>go<sp/>out<sp/>of<sp/>scope<sp/>at<sp/>the<sp/>end<sp/>of<sp/>this<sp/>function)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>phasors_clone<sp/>=<sp/>phasors.Clone();</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a3c2a8f188bb3fe6f82f960f1a95c89ac" kindref="member">fContainerStore</ref>-&gt;<ref refid="classhops_1_1MHO__ContainerStore_1af5ad680d1a1fd5e0f21cff97da89ec79" kindref="member">AddObject</ref>(phasors_clone);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a3c2a8f188bb3fe6f82f960f1a95c89ac" kindref="member">fContainerStore</ref>-&gt;<ref refid="classhops_1_1MHO__ContainerStore_1a165afd02427cc03c70e3bae975fc39db" kindref="member">SetShortName</ref>(phasors_clone-&gt;GetObjectUUID(),<sp/></highlight><highlight class="stringliteral">&quot;phasors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>cvis<sp/>=<sp/>calc_corrected_vis();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cvis-&gt;CopyTags(*fSBDArray);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cvis-&gt;Insert(&quot;name&quot;,<sp/>&quot;corrected_visibilities&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ok<sp/>=<sp/>fContainerStore-&gt;AddObject(cvis);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ok<sp/>=<sp/>fContainerStore-&gt;SetShortName(cvis-&gt;GetObjectUUID(),<sp/>&quot;cvis&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coh_avg_phase_deg<sp/>=<sp/>std::fmod(coh_avg_phase<sp/>*<sp/>(180.0<sp/>/<sp/>M_PI),<sp/>360.0);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout&lt;&lt;&quot;coh<sp/>avg<sp/>phase<sp/>deg<sp/>=<sp/>&quot;&lt;&lt;coh_avg_phase_deg&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a262ea17291fe890c7c593f188dc13c1f" kindref="member">Set</ref>(</highlight><highlight class="stringliteral">&quot;/fringe/raw_resid_phase&quot;</highlight><highlight class="normal">,<sp/>coh_avg_phase_deg);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//calculate<sp/>AP<sp/>period</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ap_delta<sp/>=<sp/>std::get&lt;<sp/>TIME_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1af6edda99df6b30130c0d1da47ed384b5" kindref="member">fVisibilities</ref>)(1)<sp/>-<sp/>std::get&lt;<sp/>TIME_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1af6edda99df6b30130c0d1da47ed384b5" kindref="member">fVisibilities</ref>)(0);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>npts<sp/>=<sp/>sbd_amp.GetSize();</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>npts;<sp/>i++)</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;SBD_AMP&quot;</highlight><highlight class="normal">].push_back(sbd_amp(i));</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;SBD_AMP_XAXIS&quot;</highlight><highlight class="normal">].push_back(std::get&lt;<sp/>0<sp/>&gt;(sbd_amp)(i));</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>npts<sp/>=<sp/>mbd_amp.GetSize();</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>npts;<sp/>i++)</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;MBD_AMP&quot;</highlight><highlight class="normal">].push_back(mbd_amp(i));</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;MBD_AMP_XAXIS&quot;</highlight><highlight class="normal">].push_back(std::get&lt;<sp/>0<sp/>&gt;(mbd_amp)(i));</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>npts<sp/>=<sp/>dr_amp.GetSize();</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>npts;<sp/>i++)</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;DLYRATE&quot;</highlight><highlight class="normal">].push_back(dr_amp(i));</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;DLYRATE_XAXIS&quot;</highlight><highlight class="normal">].push_back(std::get&lt;<sp/>0<sp/>&gt;(dr_amp)(i));</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>npts<sp/>=<sp/>sbd_xpower.GetSize();</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>npts;<sp/>i++)</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;XPSPEC-ABS&quot;</highlight><highlight class="normal">].push_back(std::abs(sbd_xpower(i)));</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;XPSPEC-ARG&quot;</highlight><highlight class="normal">].push_back(std::arg(sbd_xpower(i))<sp/>*<sp/>(180.0<sp/>/<sp/>M_PI));</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;XPSPEC_XAXIS&quot;</highlight><highlight class="normal">].push_back(std::get&lt;<sp/>0<sp/>&gt;(sbd_xpower)(i));</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//grab<sp/>the<sp/>fourfit<sp/>channel<sp/>labels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>chan_label_key<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;channel_label&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::string<sp/>&gt;<sp/>channel_labels;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>(&amp;std::get&lt;<sp/>0<sp/>&gt;(phasors))-&gt;GetSize();<sp/>ch++)</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>ch_label;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>key_present<sp/>=<sp/>(&amp;std::get&lt;<sp/>0<sp/>&gt;(phasors))-&gt;RetrieveIndexLabelKeyValue(ch,<sp/>chan_label_key,<sp/>ch_label);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(key_present)</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel_labels.push_back(ch_label);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;ChannelsPlotted&quot;</highlight><highlight class="normal">]<sp/>=<sp/>channel_labels;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//grab<sp/>the<sp/>per-channel/AP<sp/>phasors,<sp/>and<sp/>average<sp/>down<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nplot<sp/>=<sp/>phasors.GetDimension(0);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>naps<sp/>=<sp/>phasors.GetDimension(1);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nseg<sp/>=<sp/>naps;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::vector&lt;<sp/>double<sp/>&gt;<sp/>&gt;<sp/>seg_amp;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>seg_amp.resize(nplot);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::vector&lt;<sp/>double<sp/>&gt;<sp/>&gt;<sp/>seg_arg;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>seg_arg.resize(nplot);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;<sp/>ch_amp;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;<sp/>ch_arg;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//use<sp/>fourfit<sp/>default<sp/>method<sp/>to<sp/>determine<sp/>how<sp/>many<sp/>APs<sp/>to<sp/>average<sp/>together<sp/>(see<sp/>calc_rms.c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fourfit3_8c_1a30d973fc4251d0d79dcc17004ff1a2d8" kindref="member">ap_per_seg</ref><sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/cmdline/ap_per_seg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>apseg;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if(nplot<sp/>==<sp/>2){nplot<sp/>=<sp/>1;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="fourfit3_8c_1a30d973fc4251d0d79dcc17004ff1a2d8" kindref="member">ap_per_seg</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nseg<sp/>=<sp/>200<sp/>/<sp/>nplot;<sp/></highlight><highlight class="comment">//max<sp/>of<sp/>200<sp/>points<sp/>across<sp/>plot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nseg<sp/>&gt;<sp/>naps)</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nseg<sp/>=<sp/>naps;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apseg<sp/>=<sp/>naps<sp/>/<sp/>nseg;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="fourfit3_8c_1a30d973fc4251d0d79dcc17004ff1a2d8" kindref="member">ap_per_seg</ref><sp/>&gt;<sp/>naps)</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apseg<sp/>=<sp/>naps;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apseg<sp/>=<sp/><ref refid="fourfit3_8c_1a30d973fc4251d0d79dcc17004ff1a2d8" kindref="member">ap_per_seg</ref>;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>segments,<sp/>starting<sp/>at<sp/>AP<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>using<sp/>integer<sp/>apseg<sp/>per<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>nseg<sp/>=<sp/>naps<sp/>/<sp/>apseg;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Remainder<sp/>goes<sp/>into<sp/>last<sp/>segment<sp/>(???)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((naps<sp/>%<sp/>apseg)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nseg<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nplot;<sp/>i++)</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>ph<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>phsum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>naps;<sp/>j++)</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ph<sp/>+=<sp/>phasors(i,<sp/>j);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phsum<sp/>+=<sp/>phasors(i,<sp/>j);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>%<sp/>apseg<sp/>==<sp/>apseg<sp/>-<sp/>1<sp/>||<sp/>j<sp/>==<sp/>naps<sp/>-<sp/>1)<sp/></highlight><highlight class="comment">//push<sp/>the<sp/>last<sp/>one<sp/>back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ph<sp/>*=<sp/>1.0<sp/>/<sp/>(double)apseg;<sp/></highlight><highlight class="comment">//average</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seg_amp[i].push_back(std::abs(ph));</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seg_arg[i].push_back(std::arg(ph));</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ph<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phsum<sp/>*=<sp/>1.0<sp/>/<sp/>(double)naps;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch_amp.push_back(std::abs(phsum));</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch_arg.push_back(std::arg(phsum));</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//need<sp/>to<sp/>flatten<sp/>and<sp/>transpose<sp/>this<sp/>data<sp/>to<sp/>match<sp/>the<sp/>plot_data_dir<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;<sp/>transposed_flatted_seg_amp;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;<sp/>transposed_flatted_seg_arg;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>xsize<sp/>=<sp/>seg_amp.size();</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>ysize<sp/>=<sp/>seg_amp[0].size();</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>ysize;<sp/>j++)</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>xsize;<sp/>i++)</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacehops__visualization_1_1picking__aedit_1a8179ee8684a5bbb2d3e99a166d9b3991" kindref="member">amp</ref><sp/>=<sp/>seg_amp[i][j];</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>arg<sp/>=<sp/>seg_arg[i][j];</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transposed_flatted_seg_amp.push_back(<ref refid="namespacehops__visualization_1_1picking__aedit_1a8179ee8684a5bbb2d3e99a166d9b3991" kindref="member">amp</ref>);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transposed_flatted_seg_arg.push_back(arg);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;SEG_AMP&quot;</highlight><highlight class="normal">]<sp/>=<sp/>transposed_flatted_seg_amp;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;SEG_PHS&quot;</highlight><highlight class="normal">]<sp/>=<sp/>transposed_flatted_seg_arg;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;NSeg&quot;</highlight><highlight class="normal">]<sp/>=<sp/>nseg;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;NPlots&quot;</highlight><highlight class="normal">]<sp/>=<sp/>nplot;<sp/></highlight><highlight class="comment">//nchan+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;StartPlot&quot;</highlight><highlight class="normal">]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>the<sp/>&apos;PLOT_INFO&apos;<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::string<sp/>&gt;<sp/>pltheader{</highlight><highlight class="stringliteral">&quot;#Ch&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Freq(MHz)&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Phase&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Ampl&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SbdBox&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="stringliteral">&quot;APsRf&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;APsRm&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;PCdlyRf&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PCdlyRm&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;PCPhsRf&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PCPhsRm&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PCOffRf&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PCOffRm&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PCAmpRf&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;PCAmpRm&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ChIdRf&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TrkRf&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ChIdRm&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="stringliteral">&quot;TrkRm&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;header&quot;</highlight><highlight class="normal">]<sp/>=<sp/>pltheader;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//includes<sp/>the<sp/>&apos;All&apos;<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nplot;<sp/>i++)</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freq<sp/>=<sp/>std::get&lt;<sp/>0<sp/>&gt;(phasors).at(i);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;#Ch&quot;</highlight><highlight class="normal">].push_back(channel_labels[i]);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;Freq(MHz)&quot;</highlight><highlight class="normal">].push_back(freq);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;Phase&quot;</highlight><highlight class="normal">].push_back(ch_arg[i]<sp/>*<sp/>(180.0<sp/>/<sp/>M_PI));</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;Ampl&quot;</highlight><highlight class="normal">].push_back(ch_amp[i]);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;SbdBox&quot;</highlight><highlight class="normal">].push_back(<ref refid="classhops_1_1MHO__ComputePlotData_1aa9a09a34a3d434eeccbea5fbd42a9c59" kindref="member">fSBDBox</ref>[i]);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//just<sp/>the<sp/>normal<sp/>channels<sp/>(no<sp/>&apos;All&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nplot<sp/>-<sp/>1;<sp/>i++)</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>following<sp/>two<sp/>quanties<sp/>are<sp/>mis-named<sp/>in<sp/>the<sp/>plot_data_dir<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//but<sp/>we&apos;ll<sp/>make<sp/>due<sp/>for<sp/>now,<sp/>since<sp/>we<sp/>don&apos;t<sp/>really<sp/>compute<sp/>these<sp/>correctly<sp/>yet...we<sp/>ignore<sp/>the<sp/>min_weight<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>is<sp/>not<sp/>AP&apos;s<sp/>used<sp/>by<sp/>Ref<sp/>station,<sp/>but<sp/>rather<sp/>APs<sp/>with<sp/>USB<sp/>data<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;APsRf&quot;</highlight><highlight class="normal">].push_back(<ref refid="classhops_1_1MHO__ComputePlotData_1a5656e55b5bc6be1d5db56d2ddbc6af04" kindref="member">fNUSBAP</ref>[i]);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>is<sp/>not<sp/>AP&apos;s<sp/>used<sp/>by<sp/>Rem<sp/>station,<sp/>but<sp/>rather<sp/>APs<sp/>with<sp/>LSB<sp/>data<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;APsRm&quot;</highlight><highlight class="normal">].push_back(<ref refid="classhops_1_1MHO__ComputePlotData_1a8d590fbbb95e665ad7adbf4c5aca1b3c" kindref="member">fNLSBAP</ref>[i]);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;PCdlyRf&quot;</highlight><highlight class="normal">].push_back(0.0);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;PCdlyRm&quot;</highlight><highlight class="normal">].push_back(0.0);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;PCPhsRf&quot;</highlight><highlight class="normal">].push_back(0.0);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;PCPhsRm&quot;</highlight><highlight class="normal">].push_back(0.0);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;PCOffRf&quot;</highlight><highlight class="normal">].push_back(0.0);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;PCOffRm&quot;</highlight><highlight class="normal">].push_back(0.0);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;PCAmpRf&quot;</highlight><highlight class="normal">].push_back(0.0);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;PCAmpRm&quot;</highlight><highlight class="normal">].push_back(0.0);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;ChIdRf&quot;</highlight><highlight class="normal">].push_back(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;TrkRf&quot;</highlight><highlight class="normal">].push_back(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;ChIdRm&quot;</highlight><highlight class="normal">].push_back(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;TrkRm&quot;</highlight><highlight class="normal">].push_back(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>station_flag;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>pol;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>polprod<sp/>=<sp/>std::get&lt;<sp/>POLPROD_AXIS<sp/>&gt;(*fVisibilities).at(0);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//export<sp/>reference<sp/>pcal<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>station_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>pol<sp/>=<sp/>polprod;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(polprod.size()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pol<sp/>=<sp/>std::string(1,<sp/>polprod[station_flag]);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a2825555d5dbbde736ac97ebd0349acf7" kindref="member">dump_multitone_pcmodel</ref>(plot_dict,<sp/>station_flag,<sp/>pol);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ad0a04756a84feacf346efba81be620e6" kindref="member">dump_manual_pcmodel</ref>(plot_dict,<sp/>station_flag,<sp/>pol);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//export<sp/>remote<sp/>pcal<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>station_flag<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>pol<sp/>=<sp/>polprod;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(polprod.size()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pol<sp/>=<sp/>std::string(1,<sp/>polprod[station_flag]);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a2825555d5dbbde736ac97ebd0349acf7" kindref="member">dump_multitone_pcmodel</ref>(plot_dict,<sp/>station_flag,<sp/>pol);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ad0a04756a84feacf346efba81be620e6" kindref="member">dump_manual_pcmodel</ref>(plot_dict,<sp/>station_flag,<sp/>pol);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fringe_amp<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/famp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tsum_weights<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/total_summed_weights&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>use<sp/>the<sp/>raw<sp/>phase<sp/>resid,<sp/>because<sp/>it<sp/>is<sp/>unaffected<sp/>by<sp/>the<sp/>&apos;mbd_anchor&apos;<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>resid_phase<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/raw_resid_phase_rad&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>snr<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/snr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freqrms_phase,<sp/>freqrms_amp,<sp/>timerms_phase,<sp/>timerms_amp,<sp/>inc_avg_amp,<sp/>inc_avg_amp_freq;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a6a3eef97503e4c67e2b77f0c84e81dea" kindref="member">calc_freqrms</ref>(phasors,<sp/>resid_phase,<sp/>fringe_amp,<sp/>tsum_weights,<sp/>snr,<sp/>freqrms_phase,<sp/>freqrms_amp,<sp/>inc_avg_amp_freq);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac6f48cfc9dfb458983b92d78fdbda4e7" kindref="member">calc_timerms</ref>(phasors,<sp/>nseg,<sp/>apseg,<sp/>resid_phase,<sp/>fringe_amp,<sp/>tsum_weights,<sp/>snr,<sp/>timerms_phase,<sp/>timerms_amp,<sp/>inc_avg_amp);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;extra&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;freqrms_phase&quot;</highlight><highlight class="normal">]<sp/>=<sp/>freqrms_phase;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;extra&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;freqrms_amp&quot;</highlight><highlight class="normal">]<sp/>=<sp/>freqrms_amp;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;extra&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;timerms_phase&quot;</highlight><highlight class="normal">]<sp/>=<sp/>timerms_phase;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;extra&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;timerms_amp&quot;</highlight><highlight class="normal">]<sp/>=<sp/>timerms_amp;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;extra&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;inc_avg_amp&quot;</highlight><highlight class="normal">]<sp/>=<sp/>inc_avg_amp;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;extra&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;inc_avg_amp_freq&quot;</highlight><highlight class="normal">]<sp/>=<sp/>inc_avg_amp_freq;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1aecaae848aae9625eafba624faf0a17ab" kindref="member">TODO_FIXME_MSG</ref>(</highlight><highlight class="stringliteral">&quot;TODO<sp/>FIXME<sp/>--<sp/>store<sp/>the<sp/>rest<sp/>of<sp/>these<sp/>incoherent/theory<sp/>parameters<sp/>in<sp/>the<sp/>store&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;Set(&quot;/<ref refid="fourfit3_8c_1ab19e738fad8df4a4c38b5e0806566ef0" kindref="member">fringe</ref>/inc_avg_amp_freq&quot;,<sp/>inc_avg_amp_freq);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//stuff<sp/>this<sp/>in<sp/>the<sp/>parameter<sp/>store<sp/>too<sp/>(reorganize<sp/>this<sp/>later)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;Set(&quot;/<ref refid="fourfit3_8c_1ab19e738fad8df4a4c38b5e0806566ef0" kindref="member">fringe</ref>/freqrms_phase&quot;,<sp/>freqrms_phase);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;Set(&quot;/<ref refid="fourfit3_8c_1ab19e738fad8df4a4c38b5e0806566ef0" kindref="member">fringe</ref>/freqrms_amp&quot;,<sp/>freqrms_amp);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;Set(&quot;/<ref refid="fourfit3_8c_1ab19e738fad8df4a4c38b5e0806566ef0" kindref="member">fringe</ref>/timerms_phase&quot;,<sp/>timerms_phase);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;Set(&quot;/<ref refid="fourfit3_8c_1ab19e738fad8df4a4c38b5e0806566ef0" kindref="member">fringe</ref>/timerms_amp&quot;,<sp/>timerms_amp);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//calculate<sp/>the<sp/>theory<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nchan<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;GetAs&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(&quot;/<ref refid="structconfig" kindref="compound">config</ref>/nchannels&quot;);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>th_timerms_phase<sp/>=<sp/>MHO_BasicFringeInfo::calculate_theory_timerms_phase(nseg,<sp/>snr);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>th_timerms_amp<sp/>=<sp/>MHO_BasicFringeInfo::calculate_theory_timerms_amp(nseg,<sp/>snr);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>th_freqrms_phase<sp/>=<sp/>MHO_BasicFringeInfo::calculate_theory_freqrms_phase(nchan,<sp/>snr);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>th_freqrms_amp<sp/>=<sp/>MHO_BasicFringeInfo::calculate_theory_freqrms_amp(nchan,<sp/>snr);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>plot_dict[&quot;extra&quot;][&quot;theory_timerms_phase&quot;]<sp/>=<sp/>th_timerms_phase;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>plot_dict[&quot;extra&quot;][&quot;theory_timerms_amp&quot;]<sp/>=<sp/>th_timerms_amp;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>plot_dict[&quot;extra&quot;][&quot;theory_freqrms_phase&quot;]<sp/>=<sp/>th_freqrms_phase;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>plot_dict[&quot;extra&quot;][&quot;theory_freqrms_amp&quot;]<sp/>=<sp/>th_freqrms_amp;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//stuff<sp/>theory<sp/>values<sp/>in<sp/>the<sp/>parameter<sp/>store<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;Set(&quot;/<ref refid="fourfit3_8c_1ab19e738fad8df4a4c38b5e0806566ef0" kindref="member">fringe</ref>/theory_timerms_phase&quot;,<sp/>th_timerms_phase);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;Set(&quot;/<ref refid="fourfit3_8c_1ab19e738fad8df4a4c38b5e0806566ef0" kindref="member">fringe</ref>/theory_timerms_amp&quot;,<sp/>th_timerms_amp);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;Set(&quot;/<ref refid="fourfit3_8c_1ab19e738fad8df4a4c38b5e0806566ef0" kindref="member">fringe</ref>/theory_freqrms_phase&quot;,<sp/>th_freqrms_phase);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;Set(&quot;/<ref refid="fourfit3_8c_1ab19e738fad8df4a4c38b5e0806566ef0" kindref="member">fringe</ref>/theory_freqrms_amp&quot;,<sp/>th_freqrms_amp);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//calculate<sp/>the<sp/>quality<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>qc<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a2b651788ffe3c13fbb1a9265553992a0" kindref="member">calc_quality_code</ref>();</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;Set(&quot;/<ref refid="fourfit3_8c_1ab19e738fad8df4a4c38b5e0806566ef0" kindref="member">fringe</ref>/quality_code&quot;,<sp/>qc);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>plot_dict[&quot;Quality&quot;]<sp/>=<sp/>qc;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>plot_dict[&quot;extra&quot;][&quot;nlags&quot;]<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;GetAs&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&gt;(&quot;/<ref refid="structconfig" kindref="compound">config</ref>/nlags&quot;);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>errcode<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1acfb96247b28484694255ce935f120c23" kindref="member">calc_error_code</ref>(plot_dict);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>plot_dict[&quot;extra&quot;][&quot;error_code&quot;]<sp/>=<sp/>errcode;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;Set(&quot;/<ref refid="fourfit3_8c_1ab19e738fad8df4a4c38b5e0806566ef0" kindref="member">fringe</ref>/error_code&quot;,<sp/>errcode);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//last<sp/>thing<sp/>is<sp/>apply<sp/>residual<sp/>delay/delay<sp/>rate<sp/>correction<sp/>to<sp/>visibilities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//in<sp/>case<sp/>we<sp/>export<sp/>them<sp/>to<sp/>the<sp/>fringe<sp/>file<sp/>(-X<sp/>option)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1aaac0b3180af5c5345baa9f5c2d37ec11" kindref="member">correct_vis</ref>();</highlight></codeline>
<codeline lineno="1253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1aee323fc80b6f65ab8065fe6a3ed9cf84" kindref="member">MHO_ComputePlotData</ref>::<ref refid="classhops_1_1MHO__ComputePlotData_1a6a3eef97503e4c67e2b77f0c84e81dea" kindref="member">calc_freqrms</ref>(<ref refid="namespacehops_1ae84ae133e425a9e97ee17c8fa9f57a49" kindref="member">phasor_type</ref>&amp;<sp/>phasors,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coh_avg_phase,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fringe_amp,</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_summed_weights,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>snr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>freqrms_phase,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>freqrms_amp,</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>inc_avg_amp_freq)</highlight></codeline>
<codeline lineno="1258"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nchan<sp/>=<sp/>phasors.GetDimension(0)<sp/>-<sp/>1;<sp/></highlight><highlight class="comment">//-1<sp/>is<sp/>for<sp/>the<sp/>&apos;all&apos;<sp/>channel<sp/>tacked<sp/>on<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nap<sp/>=<sp/>phasors.GetDimension(1);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>freqrms_phase<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>freqrms_amp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_avg_amp_freq<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1aecaae848aae9625eafba624faf0a17ab" kindref="member">TODO_FIXME_MSG</ref>(</highlight><highlight class="stringliteral">&quot;TODO<sp/>FIXME<sp/>--<sp/>implement<sp/>amp_corr_fact.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>amp_corr_fact<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nchan;<sp/>ch++)</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sumwt<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ap<sp/>=<sp/>0;<sp/>ap<sp/>&lt;<sp/>nap;<sp/>ap++)</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wt<sp/>=<sp/>(*fWeights)(0,<sp/>ch,<sp/>ap,<sp/>0);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>wt<sp/>*<sp/>phasors(ch,<sp/>ap);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sumwt<sp/>+=<sp/>wt;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inc_avg_amp_freq<sp/>+=<sp/>std::abs(sum)<sp/>*<sp/>amp_corr_fact;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sumwt<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>/=<sp/>sumwt;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>std::arg(sum)<sp/>-<sp/>coh_avg_phase;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>condition<sp/>to<sp/>lie<sp/>in<sp/>[-pi,pi]<sp/>interval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>FIXME<sp/>--<sp/>this<sp/>is<sp/>the<sp/>original<sp/>implementation,<sp/>but<sp/>it<sp/>is<sp/>incorrect!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1aecaae848aae9625eafba624faf0a17ab" kindref="member">TODO_FIXME_MSG</ref>(</highlight><highlight class="stringliteral">&quot;TODO<sp/>FIXME,<sp/>this<sp/>way<sp/>of<sp/>computing<sp/>an<sp/>average<sp/>phase<sp/>angle<sp/>is<sp/>incorrect,<sp/>should<sp/>compute<sp/>the<sp/>average<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;vector<sp/>first,<sp/>then<sp/>take<sp/>the<sp/>angle<sp/>of<sp/>that.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>std::fmod(c,<sp/>2.0<sp/>*<sp/>M_PI);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(c<sp/>&gt;<sp/>M_PI)</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>-=<sp/>2.0<sp/>*<sp/>M_PI;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c<sp/>&lt;<sp/>-M_PI)</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>+=<sp/>2.0<sp/>*<sp/>M_PI;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freqrms_phase<sp/>+=<sp/>c<sp/>*<sp/>c;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>std::abs(sum)<sp/>-<sp/>fringe_amp;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freqrms_amp<sp/>+=<sp/>c<sp/>*<sp/>c;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nchan<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>0/0<sp/>singularity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freqrms_phase<sp/>=<sp/>std::sqrt(freqrms_phase<sp/>/<sp/>(nchan<sp/>-<sp/>2))<sp/>*<sp/>180.<sp/>/<sp/>M_PI;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freqrms_phase<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/>freqrms_amp<sp/>=<sp/>std::sqrt(freqrms_amp<sp/>/<sp/>nchan)<sp/>*<sp/>100.<sp/>/<sp/>fringe_amp;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_avg_amp_freq<sp/>/=<sp/>total_summed_weights;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Noise<sp/>bias<sp/>correction<sp/>?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_avg_amp_freq<sp/>/=<sp/>((1.0<sp/>+<sp/>1.0<sp/>/<sp/>(2.0<sp/>*<sp/>snr<sp/>*<sp/>snr<sp/>/<sp/>(double)nchan)));</highlight></codeline>
<codeline lineno="1323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac6f48cfc9dfb458983b92d78fdbda4e7" kindref="member">MHO_ComputePlotData::calc_timerms</ref>(<ref refid="namespacehops_1ae84ae133e425a9e97ee17c8fa9f57a49" kindref="member">phasor_type</ref>&amp;<sp/>phasors,<sp/>std::size_t<sp/>nseg,<sp/>std::size_t<sp/>apseg,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coh_avg_phase,</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fringe_amp,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_summed_weights,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>snr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>timerms_phase,</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>timerms_amp,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>inc_avg_amp)</highlight></codeline>
<codeline lineno="1328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1aecaae848aae9625eafba624faf0a17ab" kindref="member">TODO_FIXME_MSG</ref>(</highlight><highlight class="stringliteral">&quot;TODO<sp/>FIXME<sp/>--<sp/>implement<sp/>amp_corr_fact.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>amp_corr_fact<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>timerms_phase<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>timerms_amp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_avg_amp<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nplot<sp/>=<sp/>phasors.GetDimension(0);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nchan<sp/>=<sp/>nplot<sp/>-<sp/>1;<sp/></highlight><highlight class="comment">//-1<sp/>is<sp/>for<sp/>the<sp/>&apos;all&apos;<sp/>channel<sp/>tacked<sp/>on<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>naps<sp/>=<sp/>phasors.GetDimension(1);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chan_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>CHANNEL_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totwt,<sp/>totap,<sp/>wt,<sp/>wtf,<sp/>wtf_dsb,<sp/>wt_dsb,<sp/>apwt,<sp/>ap_in_seg,<sp/>usbfrac,<sp/>lsbfrac,<sp/>c;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>totwt<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>totap<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>vsum,<sp/>vsumf,<sp/>wght_phsr;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>net_sideband<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>sidebandlabelkey<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;net_sideband&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>seg<sp/>=<sp/>0;<sp/>seg<sp/>&lt;<sp/>nseg;<sp/>seg++)</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vsum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wt<sp/>=<sp/>0.0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>freqs,<sp/>and<sp/>ap&apos;s<sp/>in<sp/>segment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wt_dsb<sp/>=<sp/>0.0;<sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>freqs,<sp/>and<sp/>ap&apos;s<sp/>in<sp/>segment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>forming<sp/>vector<sp/>sum<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>fr<sp/>=<sp/>0;<sp/>fr<sp/>&lt;<sp/>nchan;<sp/>fr++)</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vsumf<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wtf<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wtf_dsb<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ap_in_seg<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usbfrac<sp/>=<sp/>lsbfrac<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(fr,<sp/>sidebandlabelkey,<sp/>net_sideband);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!key_present)</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1acd8d50c6722941e40e21c59ffba48011" kindref="member">msg_error</ref>(</highlight><highlight class="stringliteral">&quot;fringe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;missing<sp/>net_sideband<sp/>label<sp/>for<sp/>channel<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ap<sp/>=<sp/>seg<sp/>*<sp/>apseg;<sp/>ap<sp/>&lt;<sp/>(seg<sp/>+<sp/>1)<sp/>*<sp/>apseg;<sp/>ap++)</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ap<sp/>&gt;=<sp/>naps)</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apwt<sp/>=<sp/>fabs((*<ref refid="classhops_1_1MHO__ComputePlotData_1a92a2d09064cfaf9440bdad4e6df816ad" kindref="member">fWeights</ref>)(0,<sp/>fr,<sp/>ap,<sp/>0));</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wt<sp/>+=<sp/>apwt;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wtf<sp/>+=<sp/>apwt;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(net_sideband<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;U&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usbfrac<sp/>+=<sp/>apwt;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wtf_dsb<sp/>+=<sp/>apwt;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wt_dsb<sp/>+=<sp/>apwt;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(net_sideband<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;L&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lsbfrac<sp/>+=<sp/>apwt;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wtf_dsb<sp/>+=<sp/>apwt;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wt_dsb<sp/>+=<sp/>apwt;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(apwt<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totap<sp/>+=<sp/>1.0;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wght_phsr<sp/>=<sp/>phasors(fr,<sp/>ap)<sp/>*<sp/>apwt;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vsum<sp/>=<sp/>vsum<sp/>+<sp/>wght_phsr;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vsumf<sp/>=<sp/>vsumf<sp/>+<sp/>wght_phsr;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>std::arg(vsum)<sp/>-<sp/>coh_avg_phase;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>condition<sp/>to<sp/>lie<sp/>in<sp/>[-pi,pi]<sp/>interval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>std::fmod(c,<sp/>2.0<sp/>*<sp/>M_PI);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c<sp/>&gt;<sp/>M_PI)</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>-=<sp/>2.0<sp/>*<sp/>M_PI;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c<sp/>&lt;<sp/>-M_PI)</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>+=<sp/>2.0<sp/>*<sp/>M_PI;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timerms_phase<sp/>+=<sp/>wt_dsb<sp/>*<sp/>c<sp/>*<sp/>c;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Performs<sp/>scalar<sp/>sum<sp/>over<sp/>segments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>of<sp/>vector<sp/>sums<sp/>within<sp/>segments<sp/>and<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>over<sp/>all<sp/>freqs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>std::abs(vsum);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inc_avg_amp<sp/>+=<sp/>c<sp/>*<sp/>amp_corr_fact;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(wt_dsb<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>c<sp/>/<sp/>wt_dsb;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delres_max<sp/>is<sp/>amplitude<sp/>at<sp/>peak<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>c<sp/>*<sp/>amp_corr_fact<sp/>-<sp/>fringe_amp;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timerms_amp<sp/>+=<sp/>wt_dsb<sp/>*<sp/>c<sp/>*<sp/>c;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totwt<sp/>+=<sp/>wt_dsb;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>removes<sp/>noise<sp/>bias<sp/>based<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>SNR<sp/>of<sp/>each<sp/>segment/freq<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_avg_amp<sp/>/=<sp/>((1.0<sp/>+<sp/>(float)nseg<sp/>/<sp/>(2.0<sp/>*<sp/>snr<sp/>*<sp/>snr)));</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_avg_amp<sp/>/=<sp/>totwt;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Correct<sp/>rms<sp/>values<sp/>for<sp/>fringe<sp/>segmenting<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>timerms_phase<sp/>=<sp/>std::sqrt(timerms_phase<sp/>/<sp/>totwt)<sp/>*<sp/>180.<sp/>/<sp/>M_PI;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>timerms_amp<sp/>=<sp/>sqrt(timerms_amp<sp/>/<sp/>totwt)<sp/>*<sp/>100.<sp/>/<sp/>fringe_amp;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal">std::string<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a2b651788ffe3c13fbb1a9265553992a0" kindref="member">MHO_ComputePlotData::calc_quality_code</ref>()</highlight></codeline>
<codeline lineno="1443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//retrieve<sp/>from<sp/>param<sp/>store</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freqrms_phase<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/freqrms_phase&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freqrms_amp<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/freqrms_amp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timerms_phase<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/timerms_phase&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timerms_amp<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/timerms_amp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>th_timerms_phase<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/theory_timerms_phase&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>th_timerms_amp<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/theory_timerms_amp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>th_freqrms_phase<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/theory_freqrms_phase&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>th_freqrms_amp<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/theory_freqrms_amp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>qcode[1];</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>qcode[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(timerms_phase<sp/>&gt;<sp/>11.46<sp/>&amp;&amp;<sp/>th_timerms_phase<sp/>&lt;<sp/>5.73)</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*qcode)--;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(timerms_phase<sp/>&gt;<sp/>22.92<sp/>&amp;&amp;<sp/>th_timerms_phase<sp/>&lt;<sp/>11.46)</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*qcode)--;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(freqrms_phase<sp/>&gt;<sp/>11.46<sp/>&amp;&amp;<sp/>th_freqrms_phase<sp/>&lt;<sp/>5.73)</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*qcode)--;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(freqrms_phase<sp/>&gt;<sp/>22.92<sp/>&amp;&amp;<sp/>th_freqrms_phase<sp/>&lt;<sp/>11.46)</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*qcode)--;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(timerms_amp<sp/>&gt;<sp/>20.0<sp/>&amp;&amp;<sp/>th_timerms_amp<sp/>&lt;<sp/>10.0)</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*qcode)--;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(timerms_amp<sp/>&gt;<sp/>40.0<sp/>&amp;&amp;<sp/>th_timerms_amp<sp/>&lt;<sp/>20.0)</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*qcode)--;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(freqrms_amp<sp/>&gt;<sp/>20.0<sp/>&amp;&amp;<sp/>th_freqrms_amp<sp/>&lt;<sp/>10.0)</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*qcode)--;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(freqrms_amp<sp/>&gt;<sp/>40.0<sp/>&amp;&amp;<sp/>th_freqrms_amp<sp/>&lt;<sp/>20.0)</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*qcode)--;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*qcode<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*qcode<sp/>=<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>prob_false<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/fringe/prob_false_detect&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>fringes,<sp/>0-code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(prob_false<sp/>&gt;<sp/>1.E-4)</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*qcode<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(1,<sp/>qcode[0]);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal">std::string<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1acfb96247b28484694255ce935f120c23" kindref="member">MHO_ComputePlotData::calc_error_code</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="MHO__JSONHeaderWrapper_8hh_1ad8862af8dd9e65e2990665b6bbfcb6fe" kindref="member">mho_json</ref>&amp;<sp/>plot_dict)</highlight></codeline>
<codeline lineno="1500"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1aecaae848aae9625eafba624faf0a17ab" kindref="member">TODO_FIXME_MSG</ref>(</highlight><highlight class="stringliteral">&quot;TODO<sp/>FIXME<sp/>--<sp/>implement<sp/>error<sp/>codes<sp/>other<sp/>than<sp/>G<sp/>and<sp/>H,<sp/>also<sp/>move<sp/>all<sp/>param<sp/>retrieval<sp/>outside<sp/>of<sp/>this<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;function<sp/>and<sp/>pass<sp/>in<sp/>data&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>errcode<sp/>=<sp/>&quot;<sp/>&quot;;<sp/></highlight><highlight class="comment">//default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weak_channel;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;Get(&quot;/control/fit/weak_channel&quot;,<sp/>weak_channel);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>if(!ok)</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weak_channel<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//default<sp/>weak_channel<sp/>threshold<sp/>is<sp/>0.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pc_amp_hcode;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9ffebac9548aa8a8a8ee500d32bb7041" kindref="member">Get</ref>(</highlight><highlight class="stringliteral">&quot;/control/fit/pc_amp_hcode&quot;</highlight><highlight class="normal">,<sp/>pc_amp_hcode);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ok)</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_amp_hcode<sp/>=<sp/>0.005;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//default<sp/>pc_amp_hcode<sp/>is<sp/>0.005</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>snr;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9ffebac9548aa8a8a8ee500d32bb7041" kindref="member">Get</ref>(</highlight><highlight class="stringliteral">&quot;/fringe/snr&quot;</highlight><highlight class="normal">,<sp/>snr);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>inc_avg_amp_freq;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9ffebac9548aa8a8a8ee500d32bb7041" kindref="member">Get</ref>(</highlight><highlight class="stringliteral">&quot;/fringe/inc_avg_amp_freq&quot;</highlight><highlight class="normal">,<sp/>inc_avg_amp_freq);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ref_mk4id<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/>std::string<sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/ref_station/mk4id&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>rem_mk4id<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/>std::string<sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/rem_station/mk4id&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//pass<sp/>the<sp/>pcal<sp/>mode<sp/>that<sp/>was<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>pc_mode<sp/>values<sp/>to<sp/>see<sp/>if<sp/>this<sp/>operator<sp/>should<sp/>be<sp/>built<sp/>at<sp/>all<sp/>(defaults<sp/>to<sp/>true)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>we<sp/>check<sp/>if<sp/>there<sp/>is<sp/>a<sp/>&apos;pc_mode&apos;<sp/>defined<sp/>under<sp/>&apos;/control/station/pc_mode&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>generic_pc_mode<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;manual&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1aad7e1625ba8f112d175e47fd950ccb79" kindref="member">IsPresent</ref>(</highlight><highlight class="stringliteral">&quot;/control/station/pc_mode&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//load<sp/>possible<sp/>generic<sp/>setting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generic_pc_mode<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/>std::string<sp/>&gt;(</highlight><highlight class="stringliteral">&quot;/control/station/pc_mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ref_pc_mode<sp/>=<sp/>generic_pc_mode;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>rem_pc_mode<sp/>=<sp/>generic_pc_mode;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//override<sp/>with<sp/>any<sp/>station<sp/>specific<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ref_station_pcmode_path<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;/control/station/&quot;</highlight><highlight class="normal">)<sp/>+<sp/>ref_mk4id<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/pc_mode&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1aad7e1625ba8f112d175e47fd950ccb79" kindref="member">IsPresent</ref>(ref_station_pcmode_path))</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_pc_mode<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/>std::string<sp/>&gt;(ref_station_pcmode_path);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//override<sp/>with<sp/>any<sp/>station<sp/>specific<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>rem_station_pcmode_path<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;/control/station/&quot;</highlight><highlight class="normal">)<sp/>+<sp/>rem_mk4id<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/pc_mode&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1aad7e1625ba8f112d175e47fd950ccb79" kindref="member">IsPresent</ref>(ref_station_pcmode_path))</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_mode<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9b2fcb5606801e9a3580417245e8ec82" kindref="member">GetAs</ref>&lt;<sp/>std::string<sp/>&gt;(rem_station_pcmode_path);</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Channel<sp/>&lt;<sp/>half<sp/>of<sp/>mean<sp/>for<sp/>G-code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>low_chan<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//need<sp/>fringe<sp/>phasor<sp/>data<sp/>and<sp/>pc_amp<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nchan<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a3a2581bf72f44951d441796b22615401" kindref="member">fFringe</ref>.<ref refid="classhops_1_1MHO__NDArrayWrapper_1acc4ae2c057a3483b89df4cdc7b3ec877" kindref="member">GetDimension</ref>(0);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nchan;<sp/>i++)</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;comparing<sp/>fringe<sp/>amp<sp/>@&quot;&lt;&lt;i&lt;&lt;&quot;:<sp/>&quot;&lt;&lt;fFringe[i]&lt;&lt;<sp/>&quot;<sp/>?<sp/>&quot;<sp/>&lt;&lt;(weak_channel<sp/>*<sp/>inc_avg_amp_freq)&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(<ref refid="classhops_1_1MHO__ComputePlotData_1a3a2581bf72f44951d441796b22615401" kindref="member">fFringe</ref>[i])<sp/>&lt;<sp/>(weak_channel<sp/>*<sp/>inc_avg_amp_freq))</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>low_chan<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>G-code<sp/>means<sp/>a<sp/>weak<sp/>channel<sp/>when<sp/>SNR&gt;20<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(low_chan<sp/>&amp;&amp;<sp/>snr<sp/>&gt;<sp/>20.0)</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errcode<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for(<sp/>std::size_t<sp/>i=0;<sp/>i&lt;nchan;<sp/>i++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//TODO<sp/>FIXME<sp/>--<sp/>get<sp/>rid<sp/>of<sp/>dependence<sp/>on<sp/>plot_dict,<sp/>and<sp/>just<sp/>use<sp/>raw<sp/>pcal<sp/>data<sp/><sp/>directly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//this<sp/>rough<sp/>implementation<sp/>is<sp/>lazy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if(ref_pc_mode<sp/>==<sp/>&quot;multitone&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>pc_amp<sp/>=<sp/>plot_dict[&quot;PLOT_INFO&quot;][&quot;PCAmpRf&quot;][i].get&lt;double&gt;()<sp/>/<sp/>1000.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>pc_amp<sp/>&lt;<sp/>pc_amp_hcode<sp/>||<sp/>pc_amp<sp/>&gt;<sp/>0.500){ref_low_pcal<sp/>=<sp/>true;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if(rem_pc_mode<sp/>==<sp/>&quot;multitone&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>pc_amp<sp/>=<sp/>plot_dict[&quot;PLOT_INFO&quot;][&quot;PCAmpRm&quot;][i].get&lt;double&gt;()<sp/>/<sp/>1000.0<sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>pc_amp<sp/>&lt;<sp/>pc_amp_hcode<sp/>||<sp/>pc_amp<sp/>&gt;<sp/>0.500){rem_low_pcal<sp/>=<sp/>true;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>collection<sp/>of<sp/>pol-products<sp/>used<sp/>in<sp/>this<sp/>fringe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::string<sp/>&gt;<sp/>polprod_set;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9ffebac9548aa8a8a8ee500d32bb7041" kindref="member">Get</ref>(</highlight><highlight class="stringliteral">&quot;/config/polprod_set&quot;</highlight><highlight class="normal">,<sp/>polprod_set);</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//figure<sp/>out<sp/>the<sp/>reference<sp/>and<sp/>remote<sp/>station<sp/>pol<sp/>sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;<sp/>std::string<sp/>&gt;<sp/>ref_pols;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;<sp/>std::string<sp/>&gt;<sp/>rem_pols;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>polprod_set.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_pols.insert(std::string(1,<sp/>polprod_set[i][0]));</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pols.insert(std::string(1,<sp/>polprod_set[i][1]));</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chan_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>CHANNEL_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ref_low_pcal<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rem_low_pcal<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>nchan;<sp/>ch++)</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>chan_ref_pcal_low<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>chan_rem_pcal_low<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//0<sp/>=<sp/>ref,<sp/>1<sp/>=<sp/>rem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pol_iter<sp/>=<sp/>ref_pols.begin();<sp/>pol_iter<sp/>!=<sp/>ref_pols.end();<sp/>pol_iter++)</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>pol<sp/>=<sp/>*pol_iter;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//workspace<sp/>for<sp/>segment<sp/>retrieval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;<sp/>pc_mag_segs;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>pc_mag_key<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ref_mtpc_mag_&quot;</highlight><highlight class="normal"><sp/>+<sp/>pol;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b1<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/>pc_mag_key,<sp/>pc_mag_segs);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b1)</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pc_amp<sp/>=<sp/><ref refid="classhops_1_1MHO__MathUtilities_1ab841024e3cf4596341013f9806392080" kindref="member">MHO_MathUtilities::average</ref>(pc_mag_segs);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pc_amp<sp/>&lt;<sp/>pc_amp_hcode<sp/>||<sp/>pc_amp<sp/>&gt;<sp/>0.500)</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chan_ref_pcal_low<sp/>&amp;=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chan_ref_pcal_low<sp/>&amp;=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pol_iter<sp/>=<sp/>rem_pols.begin();<sp/>pol_iter<sp/>!=<sp/>rem_pols.end();<sp/>pol_iter++)</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>pol<sp/>=<sp/>*pol_iter;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//workspace<sp/>for<sp/>segment<sp/>retrieval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;<sp/>pc_mag_segs;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>pc_mag_key<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;rem_mtpc_mag_&quot;</highlight><highlight class="normal"><sp/>+<sp/>pol;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b1<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/>pc_mag_key,<sp/>pc_mag_segs);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b1)</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pc_amp<sp/>=<sp/><ref refid="classhops_1_1MHO__MathUtilities_1ab841024e3cf4596341013f9806392080" kindref="member">MHO_MathUtilities::average</ref>(pc_mag_segs);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pc_amp<sp/>&lt;<sp/>pc_amp_hcode<sp/>||<sp/>pc_amp<sp/>&gt;<sp/>0.500)</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chan_rem_pcal_low<sp/>&amp;=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chan_rem_pcal_low<sp/>&amp;=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(chan_ref_pcal_low)</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_low_pcal<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(chan_rem_pcal_low)</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_low_pcal<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//only<sp/>care<sp/>about<sp/>&apos;multitone&apos;,<sp/>so<sp/>far<sp/>&apos;normal&apos;<sp/>pc_mode<sp/>has<sp/>not<sp/>been<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ref_low_pcal<sp/>&amp;&amp;<sp/>ref_pc_mode<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;multitone&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errcode<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;H&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rem_low_pcal<sp/>&amp;&amp;<sp/>rem_pc_mode<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;multitone&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errcode<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;H&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(errcode<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1a70d2a69334c19db04365eb32a1d26447" kindref="member">msg_info</ref>(</highlight><highlight class="stringliteral">&quot;fringe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;fringe<sp/>condition<sp/>assigned<sp/>error<sp/>code:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>errcode<sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errcode;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1a2825555d5dbbde736ac97ebd0349acf7" kindref="member">MHO_ComputePlotData::dump_multitone_pcmodel</ref>(<ref refid="MHO__JSONHeaderWrapper_8hh_1ad8862af8dd9e65e2990665b6bbfcb6fe" kindref="member">mho_json</ref>&amp;<sp/>plot_dict,</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>station_flag,<sp/></highlight><highlight class="comment">//0<sp/>=<sp/>reference<sp/>station,<sp/>1<sp/>=<sp/>remote<sp/>station</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>pol<sp/><sp/><sp/></highlight><highlight class="comment">//single<sp/>char<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1690"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//workspace<sp/>for<sp/>segment<sp/>retrieval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;<sp/>pc_mag_segs;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;<sp/>pc_phase_segs;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;<sp/>pc_delay_segs;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>man_pc_phase;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chan_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>CHANNEL_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>pc_mag_key;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>pc_phase_key;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>pc_delay_key;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>manual_pc_phase_key;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(station_flag<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_mag_key<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ref_mtpc_mag_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_phase_key<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ref_mtpc_phase_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_delay_key<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ref_mtpc_delays_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>manual_pc_phase_key<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ref_pcphase_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(station_flag<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_mag_key<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;rem_mtpc_mag_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_phase_key<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;rem_mtpc_phase_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_delay_key<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;rem_mtpc_delays_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>manual_pc_phase_key<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;rem_pcphase_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/>pc_mag_key<sp/>+=<sp/>pol;</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/>pc_phase_key<sp/>+=<sp/>pol;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>pc_delay_key<sp/>+=<sp/>pol;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>manual_pc_phase_key<sp/>+=<sp/>pol;</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sgn<sp/>=<sp/>1.0;<sp/></highlight><highlight class="comment">//does<sp/>this<sp/>need<sp/>to<sp/>flip<sp/>depending<sp/>on<sp/>LSB/USB?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//fourfit<sp/>applies<sp/>the<sp/>ion<sp/>dTEC<sp/>to<sp/>the<sp/>multitone<sp/>pc-phase<sp/>cal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//so<sp/>we<sp/>need<sp/>to<sp/>rotate<sp/>them<sp/>all<sp/>by<sp/>an<sp/>appropriate<sp/>amount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//otherwise<sp/>the<sp/>fringe<sp/>plots<sp/>won&apos;t<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>FIXME<sp/>--<sp/>decide<sp/>if<sp/>this<sp/>is<sp/>the<sp/>behavior<sp/>that<sp/>we<sp/>actually<sp/>want</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ion_diff<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ion_k<sp/>=<sp/><ref refid="classhops_1_1MHO__Constants_1a0fc08eb08a8aa8e84dda488d70033716" kindref="member">MHO_Constants::ion_k</ref>;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bion<sp/>=<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ac1dc6861477ee3ed36c7c20bf2744b36" kindref="member">fParamStore</ref>-&gt;<ref refid="classhops_1_1MHO__ParameterStore_1a9ffebac9548aa8a8a8ee500d32bb7041" kindref="member">Get</ref>(</highlight><highlight class="stringliteral">&quot;/fringe/ion_diff&quot;</highlight><highlight class="normal">,<sp/>ion_diff);</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!bion)</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ion_diff<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//split<sp/>ion<sp/>differential<sp/>phase<sp/>between<sp/>both<sp/>ref<sp/>and<sp/>rem<sp/>stations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//note<sp/>the<sp/>sign<sp/>is<sp/>opposite<sp/>the<sp/>typical<sp/>convention<sp/>(see<sp/>pcalibrate.c<sp/>line<sp/>144)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(station_flag<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ion_diff<sp/>=<sp/>-0.5<sp/>*<sp/>ion_diff;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(station_flag<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ion_diff<sp/>=<sp/>0.5<sp/>*<sp/>ion_diff;</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//extract<sp/>the<sp/>multitone<sp/>pcal<sp/>model<sp/>attached<sp/>to<sp/>the<sp/>visibilities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>chan_ax-&gt;GetSize();<sp/>ch++)</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>channel&apos;s<sp/>frequency<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sky_freq<sp/>=<sp/>chan_ax-&gt;at(ch);<sp/></highlight><highlight class="comment">//not<sp/>quite<sp/>right,<sp/>we<sp/>want<sp/>channel<sp/>center<sp/>freq!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bandwidth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>net_sideband;</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/></highlight><highlight class="stringliteral">&quot;net_sideband&quot;</highlight><highlight class="normal">,<sp/>net_sideband);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!key_present)</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1acd8d50c6722941e40e21c59ffba48011" kindref="member">msg_error</ref>(</highlight><highlight class="stringliteral">&quot;fringe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;missing<sp/>net_sideband<sp/>label<sp/>for<sp/>channel<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ch<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_present<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/></highlight><highlight class="stringliteral">&quot;bandwidth&quot;</highlight><highlight class="normal">,<sp/>bandwidth);</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!key_present)</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="MHO__Message_8hh_1acd8d50c6722941e40e21c59ffba48011" kindref="member">msg_error</ref>(</highlight><highlight class="stringliteral">&quot;fringe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;missing<sp/>bandwidth<sp/>label<sp/>for<sp/>channel<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ch<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eom);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lower_freq;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>upper_freq;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(net_sideband<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;U&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lower_freq<sp/>=<sp/>sky_freq;</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upper_freq<sp/>=<sp/>sky_freq<sp/>+<sp/>bandwidth;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//lower<sp/>sideband</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upper_freq<sp/>=<sp/>sky_freq;</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lower_freq<sp/>=<sp/>sky_freq<sp/>-<sp/>bandwidth;</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>center_freq<sp/>=<sp/>0.5<sp/>*<sp/>(upper_freq<sp/>+<sp/>lower_freq);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b1<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/>pc_mag_key,<sp/>pc_mag_segs);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b2<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/>pc_phase_key,<sp/>pc_phase_segs);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b3<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/>pc_delay_key,<sp/>pc_delay_segs);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b4<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/>manual_pc_phase_key,<sp/>man_pc_phase);</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b1)</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ave_pc_mag<sp/>=<sp/><ref refid="classhops_1_1MHO__MathUtilities_1ab841024e3cf4596341013f9806392080" kindref="member">MHO_MathUtilities::average</ref>(pc_mag_segs);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(station_flag<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;PCAmpRf&quot;</highlight><highlight class="normal">][ch]<sp/>=<sp/>ave_pc_mag<sp/>*<sp/>1000.0;<sp/></highlight><highlight class="comment">//convert<sp/>to<sp/>fourfit<sp/>units<sp/>(?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(station_flag<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;PCAmpRm&quot;</highlight><highlight class="normal">][ch]<sp/>=<sp/>ave_pc_mag<sp/>*<sp/>1000.0;</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b2)</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ave_pc_phase<sp/>=<sp/><ref refid="classhops_1_1MHO__MathUtilities_1a4cb30a17c5a35d05f07e1eff68a8e9be" kindref="member">MHO_MathUtilities::angular_average</ref>(pc_phase_segs);</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b4)<sp/></highlight><highlight class="comment">//rotate<sp/>all<sp/>of<sp/>the<sp/>multitone<sp/>phases<sp/>by<sp/>the<sp/>manual<sp/>applied<sp/>phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>man_phasor<sp/>=<sp/>std::exp(sgn<sp/>*<sp/><ref refid="classhops_1_1MHO__ComputePlotData_1aa2b959043af4e9ac5f6f41be513511b0" kindref="member">fImagUnit</ref><sp/>*<sp/>man_pc_phase);</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta_ion<sp/>=<sp/>theta_ion<sp/>=<sp/>ion_k<sp/>*<sp/>ion_diff<sp/>/<sp/>(1e6<sp/>*<sp/>center_freq);</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/>ion_phasor<sp/>=<sp/>std::exp(<ref refid="classhops_1_1MHO__ComputePlotData_1aa2b959043af4e9ac5f6f41be513511b0" kindref="member">fImagUnit</ref><sp/>*<sp/>theta_ion);</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout&lt;&lt;&quot;ch:&quot;&lt;&lt;ch&lt;&lt;&quot;<sp/>phase<sp/>=<sp/>&quot;&lt;&lt;manual_pc_phase_key&lt;&lt;&quot;<sp/>=<sp/>&quot;&lt;&lt;man_pc_phase&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>pc_phase_segs.size();<sp/>j++)</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;<sp/>double<sp/>&gt;<sp/><ref refid="structphasor" kindref="compound">phasor</ref><sp/>=<sp/>std::exp(<ref refid="classhops_1_1MHO__ComputePlotData_1aa2b959043af4e9ac5f6f41be513511b0" kindref="member">fImagUnit</ref><sp/>*<sp/>pc_phase_segs[j]);</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structphasor" kindref="compound">phasor</ref><sp/>*=<sp/>man_phasor;</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//phasor<sp/>*=<sp/>ion_phasor;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_phase_segs[j]<sp/>=<sp/>std::arg(<ref refid="structphasor" kindref="compound">phasor</ref>);</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(station_flag<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//convert<sp/>to<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;PCPhsRf&quot;</highlight><highlight class="normal">][ch]<sp/>=<sp/>ave_pc_phase<sp/>*<sp/>(180.<sp/>/<sp/>M_PI);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>pc_phase_segs.size();<sp/>j++)</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_phase_segs[j]<sp/>*=<sp/>(180.<sp/>/<sp/>M_PI);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;extra&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;ref_mtpc_phase_segs&quot;</highlight><highlight class="normal">].push_back(pc_phase_segs);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(station_flag<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;PCPhsRm&quot;</highlight><highlight class="normal">][ch]<sp/>=<sp/>ave_pc_phase<sp/>*<sp/>(180.<sp/>/<sp/>M_PI);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>pc_phase_segs.size();<sp/>j++)</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_phase_segs[j]<sp/>*=<sp/>(180.<sp/>/<sp/>M_PI);</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;extra&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;rem_mtpc_phase_segs&quot;</highlight><highlight class="normal">].push_back(pc_phase_segs);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b3)</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ave_pc_delay<sp/>=<sp/><ref refid="classhops_1_1MHO__MathUtilities_1ab841024e3cf4596341013f9806392080" kindref="member">MHO_MathUtilities::average</ref>(pc_delay_segs);</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(station_flag<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;PCdlyRf&quot;</highlight><highlight class="normal">][ch]<sp/>=<sp/>ave_pc_delay<sp/>*<sp/>1e9;<sp/></highlight><highlight class="comment">//convert<sp/>to<sp/>ns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(station_flag<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;PCdlyRm&quot;</highlight><highlight class="normal">][ch]<sp/>=<sp/>ave_pc_delay<sp/>*<sp/>1e9;</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhops_1_1MHO__ComputePlotData_1ad0a04756a84feacf346efba81be620e6" kindref="member">MHO_ComputePlotData::dump_manual_pcmodel</ref>(<ref refid="MHO__JSONHeaderWrapper_8hh_1ad8862af8dd9e65e2990665b6bbfcb6fe" kindref="member">mho_json</ref>&amp;<sp/>plot_dict,</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>station_flag,<sp/></highlight><highlight class="comment">//0<sp/>=<sp/>reference<sp/>station,<sp/>1<sp/>=<sp/>remote<sp/>station</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>pol<sp/><sp/><sp/></highlight><highlight class="comment">//single<sp/>char<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1862"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//workspace<sp/>for<sp/>segment<sp/>retrieval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chan_ax<sp/>=<sp/>&amp;(std::get&lt;<sp/>CHANNEL_AXIS<sp/>&gt;(*<ref refid="classhops_1_1MHO__ComputePlotData_1a0bc26306f1c3992c9fd2a14240cb6e4d" kindref="member">fSBDArray</ref>));</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>pc_mag_key;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>pc_phase_key;</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>pc_delay_key;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(station_flag<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_phase_key<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ref_pcphase_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(station_flag<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_phase_key<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;rem_pcphase_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>pc_phase_key<sp/>+=<sp/>pol;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//extract<sp/>the<sp/>manual<sp/>pcphases<sp/>pcal<sp/>model<sp/>attached<sp/>to<sp/>the<sp/>visibilities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>chan_ax-&gt;GetSize();<sp/>ch++)</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pc_phase;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b1<sp/>=<sp/>chan_ax-&gt;RetrieveIndexLabelKeyValue(ch,<sp/>pc_phase_key,<sp/>pc_phase);</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b1)</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(station_flag<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;PCOffRf&quot;</highlight><highlight class="normal">][ch]<sp/>=<sp/>pc_phase<sp/>*<sp/>(180.<sp/>/<sp/>M_PI);<sp/></highlight><highlight class="comment">//convert<sp/>to<sp/>fourfit<sp/>units<sp/>(?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(station_flag<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot_dict[</highlight><highlight class="stringliteral">&quot;PLOT_INFO&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;PCOffRm&quot;</highlight><highlight class="normal">][ch]<sp/>=<sp/>pc_phase<sp/>*<sp/>(180.<sp/>/<sp/>M_PI);</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hops</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Fringe/src/MHO_ComputePlotData.cc"/>
  </compounddef>
</doxygen>
