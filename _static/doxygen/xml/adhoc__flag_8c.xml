<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="adhoc__flag_8c" kind="file" language="C++">
    <compoundname>adhoc_flag.c</compoundname>
    <includes local="no">assert.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="mk4__util_8h" local="yes">mk4_util.h</includes>
    <includes refid="param__struct_8h" local="yes">param_struct.h</includes>
    <includes refid="adhoc__flag_8h" local="yes">adhoc_flag.h</includes>
    <incdepgraph>
      <node id="45">
        <label>type_303.h</label>
        <link refid="type__303_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>type_212.h</label>
        <link refid="type__212_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>mk4_typedefs.h</label>
        <link refid="mk4__typedefs_8h"/>
      </node>
      <node id="8">
        <label>stdarg.h</label>
      </node>
      <node id="49">
        <label>type_307.h</label>
        <link refid="type__307_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>sys/times.h</label>
      </node>
      <node id="30">
        <label>type_203.h</label>
        <link refid="type__203_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>plot_struct.h</label>
        <link refid="plot__struct_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>general.h</label>
        <link refid="general_8h"/>
      </node>
      <node id="34">
        <label>type_207.h</label>
        <link refid="type__207_8h"/>
      </node>
      <node id="2">
        <label>assert.h</label>
      </node>
      <node id="54">
        <label>stdint.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="39">
        <label>type_221.h</label>
        <link refid="type__221_8h"/>
      </node>
      <node id="7">
        <label>mk4_util.h</label>
        <link refid="mk4__util_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>type_302.h</label>
        <link refid="type__302_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>type_306.h</label>
        <link refid="type__306_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>msg.h</label>
        <link refid="msg_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>type_202.h</label>
        <link refid="type__202_8h"/>
      </node>
      <node id="33">
        <label>type_206.h</label>
        <link refid="type__206_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>param_struct.h</label>
        <link refid="param__struct_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>adhoc_flag.h</label>
        <link refid="adhoc__flag_8h"/>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>type_220.h</label>
        <link refid="type__220_8h"/>
      </node>
      <node id="26">
        <label>type_120.h</label>
        <link refid="type__120_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>sys/types.h</label>
      </node>
      <node id="43">
        <label>type_301.h</label>
        <link refid="type__301_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>type_210.h</label>
        <link refid="type__210_8h"/>
      </node>
      <node id="23">
        <label>type_000.h</label>
        <link refid="type__000_8h"/>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
      <node id="47">
        <label>type_305.h</label>
        <link refid="type__305_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>type_309.h</label>
        <link refid="type__309_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>type_201.h</label>
        <link refid="type__201_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>type_205.h</label>
        <link refid="type__205_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>type_101.h</label>
        <link refid="type__101_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>complex.h</label>
      </node>
      <node id="41">
        <label>type_230.h</label>
        <link refid="type__230_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>hops_config.h</label>
      </node>
      <node id="21">
        <label>mk4_sizes.h</label>
        <link refid="mk4__sizes_8h"/>
      </node>
      <node id="1">
        <label>adhoc_flag.c</label>
        <link refid="adhoc__flag_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>fileset.h</label>
        <link refid="fileset_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>mk4_records.h</label>
        <link refid="mk4__records_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>hops_complex.h</label>
        <link refid="hops__complex_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>type_300.h</label>
        <link refid="type__300_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ctype.h</label>
      </node>
      <node id="46">
        <label>type_304.h</label>
        <link refid="type__304_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>type_308.h</label>
        <link refid="type__308_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>type_200.h</label>
        <link refid="type__200_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>account.h</label>
        <link refid="account_8h"/>
      </node>
      <node id="31">
        <label>type_204.h</label>
        <link refid="type__204_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>type_208.h</label>
        <link refid="type__208_8h"/>
      </node>
      <node id="53">
        <label>T1.h</label>
        <link refid="T1_8h"/>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>type_100.h</label>
        <link refid="type__100_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
      <node id="13">
        <label>fstruct.h</label>
        <link refid="fstruct_8h"/>
      </node>
      <node id="40">
        <label>type_222.h</label>
        <link refid="type__222_8h"/>
      </node>
      <node id="20">
        <label>mk4_data.h</label>
        <link refid="mk4__data_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="adhoc__flag_8c_1a8df5955704b96d4f6a7e5c7b9ece585e" prot="public" static="no">
        <name>ADHOC_FLAG_IMPLEMENTATION</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/c_src/fourfit_libs/ffsearch/src/adhoc_flag.c" line="14" column="9" bodyfile="/home/barrettj/work/projects/hops-git/source/c_src/fourfit_libs/ffsearch/src/adhoc_flag.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Machinery<sp/>to<sp/>support<sp/>adhoc_flag()<sp/>capability</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mk4__util_8h" kindref="compound">mk4_util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="param__struct_8h" kindref="compound">param_struct.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ADHOC_FLAG_IMPLEMENTATION<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="adhoc__flag_8h" kindref="compound">adhoc_flag.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_ADHOC_FLAG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>implementation<sp/>details,<sp/>not<sp/>needed<sp/>by<sp/>caller<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>These<sp/>might<sp/>all<sp/>be<sp/>computable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_NUM_FLAG_FILES<sp/><sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_LEN_FLAG_LINE<sp/><sp/><sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUM_FLAG_LINES<sp/><sp/><sp/><sp/><sp/><sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_NUM_FREQS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AHCOMMENT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;*&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ah_ff_cache_entry<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tfirst,<sp/>tfinal;<sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>and<sp/>last<sp/>times<sp/>of<sp/>the<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ntimes;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>entries<sp/>in<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lindex;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>last<sp/>index<sp/>accessed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbytes;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>char<sp/>data<sp/>per<sp/>table<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*times;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>times<sp/>in<sp/>the<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*table;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>char<sp/>data<sp/>of<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>file<sp/>providing<sp/>the<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">}<sp/>AHFFC_Entry;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>might<sp/>as<sp/>well<sp/>do<sp/>hashed<sp/>searching<sp/>correctly<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>_GNU_SOURCE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__USE_GNU<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="search_8h" kindref="compound">search.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hsearch_data<sp/>htable;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>a<sp/>place<sp/>to<sp/>hold<sp/>flag<sp/>table<sp/>data<sp/>once<sp/>read<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>AHFFC_Entry<sp/>flag_table[MAX_NUM_FLAG_FILES];</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>this<sp/>points<sp/>to<sp/>the<sp/>next<sp/>open<sp/>index<sp/>in<sp/>flag_table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag_table_open<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>this<sp/>increments<sp/>beyond<sp/>unity<sp/>on<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag_table_init<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>Initialize<sp/>the<sp/>machinery<sp/>with<sp/>a<sp/>zero-ed<sp/>table<sp/>and<sp/>a<sp/>hash<sp/>for<sp/>filenames.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_flag_table(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(flag_table,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(flag_table));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>flag_table_init<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>hcreate_r(MAX_NUM_FLAG_FILES,<sp/>&amp;htable);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rv)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;init_flag_table:hcreate_r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;Init<sp/>flag<sp/>tables<sp/>failed(%d),<sp/>no<sp/>flagging<sp/>should<sp/>result&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>rv);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag_table_init<sp/>++;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>Provide<sp/>a<sp/>string<sp/>for<sp/>msg<sp/>purposes;<sp/>each<sp/>byte<sp/>has<sp/>two<sp/>nibbles.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*table_report(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*e,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[2*MAX_NUM_FREQS<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>buf<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n--<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(++b)<sp/>=<sp/>(*e<sp/>&amp;<sp/>0xF0)&gt;&gt;4;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*b<sp/>&lt;<sp/>10)<sp/>*b<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>*b<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>-<sp/>10;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(++b)<sp/>=<sp/>(*e++<sp/>&amp;<sp/>0x0F);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*b<sp/>&lt;<sp/>10)<sp/>*b<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>*b<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>-<sp/>10;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>null<sp/>terminate<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(buf);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>Read<sp/>the<sp/>file<sp/>and<sp/>transfer<sp/>its<sp/>data<sp/>to<sp/>the<sp/>table<sp/>entry.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>If<sp/>we<sp/>run<sp/>into<sp/>any<sp/>issues<sp/>in<sp/>the<sp/>process<sp/>we<sp/>nuke<sp/>the<sp/>table</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>(preventing<sp/>further<sp/>use)<sp/>and<sp/>return<sp/>null<sp/>(for<sp/>no<sp/>flagging).</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>MAX_NUM_FREQS<sp/>and<sp/>NUM_FLAG_LINES<sp/>serve<sp/>as<sp/>starting<sp/>allocations</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>but<sp/>we<sp/>will<sp/>realloc<sp/>as<sp/>needed.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>FIXME:<sp/>sort<sp/>the<sp/>table<sp/>(as<sp/>coded<sp/>requires<sp/>a<sp/>reload).</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>FIXME:<sp/>work<sp/>out<sp/>actual<sp/>number<sp/>of<sp/>freqs<sp/>really<sp/>needed.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>AHFFC_Entry<sp/>*populate_entry(AHFFC_Entry<sp/>*table,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[MAX_LEN_FLAG_LINE];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp<sp/>=<sp/>fopen(file,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bytes<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>malloc(MAX_NUM_FREQS<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>malloc(strlen(file)+2);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*times<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)<sp/>malloc((NUM_FLAG_LINES+2)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>load,<sp/>offset,<sp/>nibble,<sp/>bread,<sp/>addr,<sp/>usb,<sp/>lastusb,<sp/>lastlsb,<sp/>limit;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loaded<sp/>=<sp/>NUM_FLAG_LINES<sp/>+<sp/>2,<sp/>readable<sp/>=<sp/>MAX_NUM_FREQS<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>verify<sp/>pointers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bytes<sp/>||<sp/>!times<sp/>||<sp/>!name)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;populate_entry:malloc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>store<sp/>flag<sp/>file<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>file);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag_table_init++;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((AHFFC_Entry<sp/>*)0);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy((table-&gt;file<sp/>=<sp/>name),<sp/>file);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fp)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;populate_entry:fopen&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>access<sp/>flag<sp/>file<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>2,<sp/>file);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>failure<sp/>doesn&apos;t<sp/>shut<sp/>us<sp/>down<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((AHFFC_Entry<sp/>*)0);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;Loading<sp/>Flag<sp/>Table[%d]<sp/>from<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>table<sp/>-<sp/>flag_table,<sp/>file);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>load<sp/>the<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(load<sp/>=<sp/>0,<sp/>bread<sp/>=<sp/>0;<sp/>fgets(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/>fp);<sp/>load++)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[limit<sp/>=<sp/>(strlen(buf)-1)]<sp/>=<sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>nuke<sp/>nl<sp/>&amp;<sp/>be<sp/>sure<sp/>of<sp/>end<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf[0]<sp/>==<sp/>AHCOMMENT)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>entry:<sp/>%s<sp/>(ignored)&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>buf);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>load--;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">/*<sp/>ignore<sp/>comments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>entry:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>buf);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(load<sp/>&gt;=<sp/>loaded)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loaded<sp/>+=<sp/>NUM_FLAG_LINES;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)<sp/>realloc(times,<sp/>loaded);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!times)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;populate_entry:realloc:times&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>expand<sp/>flag<sp/>file<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>file);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag_table_init++;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((AHFFC_Entry<sp/>*)0);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bread<sp/>+<sp/>MAX_NUM_FREQS<sp/>&gt;=<sp/>readable)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readable<sp/>+=<sp/>MAX_NUM_FREQS;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>realloc(bytes,<sp/>readable);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bytes)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;populate_entry:realloc:bytes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>expand<sp/>flag<sp/>file<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>file);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag_table_init++;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((AHFFC_Entry<sp/>*)0);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sscanf(buf,<sp/></highlight><highlight class="stringliteral">&quot;%lf%n&quot;</highlight><highlight class="normal">,<sp/>&amp;times[load],<sp/>&amp;offset);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(buf[offset]<sp/>&amp;&amp;<sp/>isspace(buf[offset]))<sp/>offset++;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>scan<sp/>the<sp/>bytes<sp/>into<sp/>the<sp/>table<sp/>one<sp/>nibble<sp/>at<sp/>a<sp/>time</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>note<sp/>that<sp/>we<sp/>continue<sp/>with<sp/>the<sp/>last<sp/>byte<sp/>once</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>we<sp/>hit<sp/>the<sp/>end-of-line<sp/>null.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>with:<sp/>%.12f<sp/>%d<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>times[load],<sp/>offset,<sp/>buf<sp/>+<sp/>offset);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastusb<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastlsb<sp/>=<sp/>offset+1;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(addr<sp/>=<sp/>0,<sp/>usb<sp/>=<sp/>1;<sp/>addr<sp/>&lt;<sp/>MAX_NUM_FREQS;<sp/>usb<sp/>=<sp/>!usb)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf[offset])<sp/>nibble<sp/>=<sp/>buf[offset];</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usb)<sp/><sp/><sp/><sp/>nibble<sp/>=<sp/>buf[lastusb];</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nibble<sp/>=<sp/>buf[lastlsb];</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nibble<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>nibble<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>nibble<sp/>-=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nibble<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>nibble<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">)<sp/>nibble<sp/>-=<sp/>(</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>-<sp/>10);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nibble<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>nibble<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">)<sp/>nibble<sp/>-=<sp/>(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>-<sp/>10);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;Illegal<sp/>%x<sp/>line<sp/>%d<sp/>char<sp/>%d<sp/>of<sp/>%s,<sp/>disabling<sp/>flag&quot;</highlight><highlight class="normal">,<sp/>2,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nibble,<sp/>load,<sp/>offset,<sp/>file);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nibble<sp/>=<sp/>0xF;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usb)<sp/>bytes[bread<sp/>+<sp/>addr]<sp/><sp/><sp/><sp/>=<sp/>nibble<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>bytes[bread<sp/>+<sp/>addr++]<sp/>|=<sp/>nibble;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf[offset])<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usb)<sp/>lastusb<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>lastlsb<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>&lt;<sp/>limit)<sp/>offset++;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bread<sp/>+=<sp/>addr;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[bread]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>(raw):<sp/>%.12f<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>times[load],<sp/>bytes<sp/>+<sp/>bread<sp/>-<sp/>addr);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>into:<sp/>%.12f<sp/>%128.128s&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>times[load],</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table_report(bytes<sp/>+<sp/>bread<sp/>-<sp/>addr,<sp/>addr));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>finally,<sp/>fully<sp/>populate<sp/>the<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;tfirst<sp/>=<sp/>times[0];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;tfinal<sp/>=<sp/>times[load-1];</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;ntimes<sp/>=<sp/>load;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;lindex<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>start<sp/>at<sp/>the<sp/>beginning<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;nbytes<sp/>=<sp/>MAX_NUM_FREQS;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;times<sp/>=<sp/>times;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;table<sp/>=<sp/>bytes;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>table-&gt;file<sp/>was<sp/>set<sp/>above<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;Table<sp/>has<sp/>%d<sp/>entries<sp/>from<sp/>%.12f<sp/>to<sp/>%.12f&quot;</highlight><highlight class="normal">,<sp/>1,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>load,<sp/>table-&gt;tfirst,<sp/>table-&gt;tfinal);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(table);</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>Open<sp/>the<sp/>file<sp/>and<sp/>read<sp/>its<sp/>contents.</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>An<sp/>AHFFC_Entry<sp/>suitable<sp/>for<sp/>further<sp/>use<sp/>will<sp/>be<sp/>created</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>and<sp/>returned<sp/>no<sp/>matter<sp/>what.</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>AHFFC_Entry<sp/>*import_file(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file)</highlight></codeline>
<codeline lineno="203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>ENTRY<sp/>attempt,<sp/>*erv;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>AHFFC_Entry<sp/>*usable;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialization<sp/>and<sp/>sanity<sp/>checks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag_table_init<sp/>==<sp/>0)<sp/>init_flag_table();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag_table_init<sp/>&gt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((AHFFC_Entry<sp/>*)0);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>try<sp/>to<sp/>find<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>attempt.key<sp/>=<sp/>file;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>attempt.data<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)flag_table_open;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>hsearch_r(attempt,<sp/>ENTER,<sp/>&amp;erv,<sp/>&amp;htable);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rv)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;import_file:hsearch_r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;Disabling<sp/>all<sp/>flagging<sp/>activity&quot;</highlight><highlight class="normal">,<sp/>3);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag_table_init++;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((AHFFC_Entry<sp/>*)0);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>it<sp/>was<sp/>found,<sp/>then<sp/>we<sp/>can<sp/>just<sp/>use<sp/>it<sp/>provided<sp/>it<sp/>is<sp/>valid<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>(int)(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)(erv-&gt;data);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>usable<sp/>=<sp/>flag_table<sp/>+<sp/>rv;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rv<sp/>&lt;<sp/>flag_table_open)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(usable-&gt;table<sp/>?<sp/>usable<sp/>:<sp/>(AHFFC_Entry<sp/>*)0);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>to<sp/>see<sp/>if<sp/>we<sp/>have<sp/>run<sp/>out<sp/>of<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++flag_table_open<sp/>&gt;=<sp/>MAX_NUM_FLAG_FILES)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;Exhausted<sp/>flag<sp/>table<sp/>storage,<sp/>disabling<sp/>activity&quot;</highlight><highlight class="normal">,<sp/>3);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag_table_init++;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((AHFFC_Entry<sp/>*)0);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>load<sp/>the<sp/>table<sp/>and<sp/>prepare<sp/>for<sp/>first-time<sp/>use<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(populate_entry(usable,<sp/>file));</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>Binary<sp/>search<sp/>for<sp/>the<sp/>correct<sp/>time.<sp/><sp/>The<sp/>first<sp/>and<sp/>final<sp/>indexes</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>are<sp/>guaranteed<sp/>to<sp/>be<sp/>in<sp/>bounds.<sp/><sp/>It<sp/>is<sp/>not<sp/>clear<sp/>if<sp/>this<sp/>is<sp/>needed.</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/>(If<sp/>files<sp/>are<sp/>always<sp/>accessed<sp/>in<sp/>time<sp/>order,<sp/>the<sp/>if..else<sp/>logic</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/>used<sp/>in<sp/>the<sp/>caller<sp/>should<sp/>suffice.)</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binary_search(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*times,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>thyme)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>middle;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>&gt;<sp/>first);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>-<sp/>first<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>middle<sp/>=<sp/>(first<sp/>+<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(times[middle]<sp/>&gt;=<sp/>thyme)<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>=<sp/>middle;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>middle;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;assert<sp/>%.12f<sp/>&lt;=<sp/>%.12f<sp/>&lt;<sp/>%.12f&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>times[first],<sp/>thyme,<sp/>times[</highlight><highlight class="keyword">final</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(times[first]<sp/>&lt;=<sp/>thyme<sp/>&amp;&amp;<sp/>thyme<sp/>&lt;<sp/>times[</highlight><highlight class="keyword">final</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(first);</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>provides<sp/>the<sp/>flagging<sp/>data.</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>On<sp/>the<sp/>first<sp/>invocation,<sp/>it<sp/>locates<sp/>the<sp/>file,<sp/>and<sp/>if<sp/>found<sp/>proceeds</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>to<sp/>allocate<sp/>and<sp/>initialize<sp/>the<sp/>AHFFC_Entry<sp/>for<sp/>future<sp/>use.<sp/><sp/>If<sp/>the</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>file<sp/>is<sp/>not<sp/>found,<sp/>an<sp/>invalid<sp/>table<sp/>entry<sp/>is<sp/>created<sp/>to<sp/>prevent</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/>wasting<sp/>time<sp/>on<sp/>lookups<sp/>in<sp/>subsequent<sp/>invocations.</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/>If<sp/>something<sp/>suitable<sp/>is<sp/>not<sp/>located,<sp/>a<sp/>null<sp/>pointer<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*locate_entry(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>thyme)</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>AHFFC_Entry<sp/>*ep<sp/>=<sp/>import_file(file);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;ahf:<sp/>locate_entry<sp/>%p<sp/>file<sp/>%s<sp/>for<sp/>%.12f<sp/>&lt;<sp/>%.12f<sp/>&lt;<sp/>%.12f&quot;</highlight><highlight class="normal">,<sp/>0,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ep,<sp/>ep-&gt;file,<sp/>ep-&gt;tfirst,<sp/>thyme,<sp/>ep-&gt;tfinal);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ep)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>file<sp/>means<sp/>no<sp/>flagging<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>out<sp/>of<sp/>bounds<sp/>means<sp/>no<sp/>flagging<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thyme<sp/>&lt;<sp/>ep-&gt;tfirst<sp/>||<sp/>thyme<sp/>&gt;<sp/>ep-&gt;tfinal)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>ok,<sp/>we&apos;re<sp/>looking<sp/>for<sp/>something<sp/>actually<sp/>in<sp/>the<sp/>table</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>we&apos;re<sp/>optimizing<sp/>for<sp/>the<sp/>likely<sp/>case<sp/>that<sp/>we&apos;re<sp/>stepping</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>through<sp/>the<sp/>APs<sp/>in<sp/>time<sp/>order</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thyme<sp/>&gt;=<sp/>ep-&gt;times[ep-&gt;lindex]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thyme<sp/><sp/>&lt;<sp/>ep-&gt;times[ep-&gt;lindex<sp/>+<sp/>1])<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no-op,<sp/>really<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>ep-&gt;lindex;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;ahf:%.12f<sp/>-&gt;<sp/>%d<sp/>(case<sp/>1)&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>thyme,<sp/>index);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thyme<sp/>&gt;=<sp/>ep-&gt;times[ep-&gt;lindex<sp/>+<sp/>1]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thyme<sp/><sp/>&lt;<sp/>ep-&gt;times[ep-&gt;lindex<sp/>+<sp/>2])<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>try<sp/>next<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>ep-&gt;lindex+1;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;ahf:%.12f<sp/>-&gt;<sp/>%d<sp/>(case<sp/>2)&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>thyme,<sp/>index);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thyme<sp/>&lt;<sp/>ep-&gt;times[1])<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>back<sp/>to<sp/>start<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;ahf:%.12f<sp/>-&gt;<sp/>%d<sp/>(case<sp/>3)&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>thyme,<sp/>index);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thyme<sp/>&lt;<sp/>ep-&gt;times[ep-&gt;lindex])<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>search<sp/>early<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>binary_search(0,<sp/>ep-&gt;lindex,<sp/>ep-&gt;times,<sp/>thyme);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;ahf:%.12f<sp/>-&gt;<sp/>%d<sp/>(case<sp/>4)&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>thyme,<sp/>index);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thyme<sp/>&gt;=<sp/>ep-&gt;times[ep-&gt;lindex<sp/>+<sp/>1])<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>search<sp/>late<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>binary_search(ep-&gt;lindex<sp/>+<sp/>1,<sp/>ep-&gt;ntimes<sp/>-<sp/>1,<sp/>ep-&gt;times,<sp/>thyme);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;ahf:%.12f<sp/>-&gt;<sp/>%d<sp/>(case<sp/>5)&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>thyme,<sp/>index);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref><sp/>(</highlight><highlight class="stringliteral">&quot;Flag<sp/>table<sp/>indexing<sp/>error&quot;</highlight><highlight class="normal">,<sp/>3);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>should<sp/>not<sp/>happen<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ep-&gt;lindex<sp/>is<sp/>the<sp/>entry<sp/>to<sp/>use<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>(ep-&gt;table<sp/>+<sp/>(ep-&gt;lindex<sp/>=<sp/>index)<sp/>*<sp/>(ep-&gt;nbytes));</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>provides<sp/>the<sp/>flagging<sp/>byte</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/>0xFF<sp/>==<sp/>no<sp/>flagging,<sp/>appropriate<sp/>if<sp/>nothing<sp/>applicable<sp/>is<sp/>found.</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locate_flag(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>thyme,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fr)</highlight></codeline>
<codeline lineno="317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*flag_bytes<sp/>=<sp/>locate_entry(file,<sp/>thyme);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>entry<sp/>means<sp/>no<sp/>flagging<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!flag_bytes)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0xFF);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref>(</highlight><highlight class="stringliteral">&quot;ahf<sp/>bytes:<sp/>%p<sp/>=<sp/>%X&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>flag_bytes,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)flag_bytes[fr]);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>otherwise<sp/>send<sp/>the<sp/>appropriate<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)flag_bytes[fr]);</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/>Main<sp/>entry<sp/>to<sp/>adhoc<sp/>flagging<sp/>of<sp/>data<sp/>via<sp/>files.</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/>On<sp/>entry<sp/>dataum_flag<sp/>is<sp/>1<sp/>if<sp/>the<sp/>data<sp/>is<sp/>&apos;good&apos;</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*<sp/>on<sp/>exit<sp/>*uflag<sp/>and<sp/>*lflag<sp/>are<sp/>set<sp/>if<sp/>the<sp/>USB<sp/>and<sp/>LSB</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>are<sp/>considered<sp/>to<sp/>be<sp/>good<sp/>after<sp/>consulting<sp/>the<sp/>flag<sp/>files.</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/>norm_fx()<sp/>uses<sp/>these<sp/>to<sp/>determine<sp/>if<sp/>data<sp/>is<sp/>present<sp/>by<sp/>pol.</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="adhoc__flag_8h_1ac70c62917cda5c335ac6c085f2d24966" kindref="member">adhoc_flag</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtype__param" kindref="compound">type_param</ref><sp/>*pp,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>datum_flag,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ap,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*uflag,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*lflag)</highlight></codeline>
<codeline lineno="336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>thyme;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>usb_flag,<sp/>lsb_flag;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ref_entry,<sp/>rem_entry;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>invoking<sp/>logic<sp/>presumes<sp/>at<sp/>least<sp/>one<sp/>of<sp/>these<sp/>exists<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(pp-&gt;<ref refid="structtype__param_1abe36cfd1c2a8b0254c2f468c405b8165" kindref="member">ah_flag_files</ref>[0][0]<sp/>||<sp/>pp-&gt;<ref refid="structtype__param_1abe36cfd1c2a8b0254c2f468c405b8165" kindref="member">ah_flag_files</ref>[1][0]);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>use<sp/>param<sp/>to<sp/>convert<sp/>AP<sp/>to<sp/>target<sp/>time<sp/>in<sp/>days<sp/>from<sp/>boy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>thyme<sp/>=<sp/>((ap<sp/>+<sp/>0.5)<sp/>*<sp/>pp-&gt;<ref refid="structtype__param_1aa9dff0ef6fc33863605f4542f887d94d" kindref="member">acc_period</ref><sp/>+<sp/>pp-&gt;<ref refid="structtype__param_1a13e47e88a55cca0124cb10d965e36502" kindref="member">start</ref>)<sp/>/<sp/>8.64e4;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref><sp/>(</highlight><highlight class="stringliteral">&quot;ahf<sp/>thyme:<sp/>%.12f<sp/>ap<sp/>%d<sp/>per<sp/>%f<sp/>start<sp/>%f&quot;</highlight><highlight class="normal">,<sp/>1,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thyme,<sp/>ap,<sp/>pp-&gt;<ref refid="structtype__param_1aa9dff0ef6fc33863605f4542f887d94d" kindref="member">acc_period</ref>,<sp/>pp-&gt;<ref refid="structtype__param_1a13e47e88a55cca0124cb10d965e36502" kindref="member">start</ref>);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>locate<sp/>the<sp/>data<sp/>flag<sp/>byte;<sp/>first<sp/>invocation<sp/>initializes<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>ref_entry<sp/>=<sp/>(pp-&gt;<ref refid="structtype__param_1abe36cfd1c2a8b0254c2f468c405b8165" kindref="member">ah_flag_files</ref>[0][0])</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>locate_flag(pp-&gt;<ref refid="structtype__param_1abe36cfd1c2a8b0254c2f468c405b8165" kindref="member">ah_flag_files</ref>[0],<sp/>thyme,<sp/>fr)<sp/>:<sp/>0xFF;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>rem_entry<sp/>=<sp/>(pp-&gt;<ref refid="structtype__param_1abe36cfd1c2a8b0254c2f468c405b8165" kindref="member">ah_flag_files</ref>[1][0])</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>locate_flag(pp-&gt;<ref refid="structtype__param_1abe36cfd1c2a8b0254c2f468c405b8165" kindref="member">ah_flag_files</ref>[1],<sp/>thyme,<sp/>fr)<sp/>:<sp/>0xFF;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>separate<sp/>the<sp/>bits<sp/>for<sp/>messaging<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>usb_flag<sp/>=<sp/>ref_entry<sp/>&amp;<sp/>rem_entry<sp/>&amp;<sp/>0x55;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>lsb_flag<sp/>=<sp/>ref_entry<sp/>&amp;<sp/>rem_entry<sp/>&amp;<sp/>0xAA;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>and<sp/>finally<sp/>mask<sp/>the<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>*uflag<sp/>=<sp/>datum_flag<sp/>&amp;<sp/>usb_flag;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>*lflag<sp/>=<sp/>datum_flag<sp/>&amp;<sp/>lsb_flag;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="msg_8h_1a02560f9686da0fc5d8020e1a070b884b" kindref="member">msg</ref><sp/>(</highlight><highlight class="stringliteral">&quot;fr-%d<sp/>ap-%d<sp/>r(%02X/%02X)usb(%02X&amp;%02X-&gt;%02X)lsb(%02X&amp;%02X-&gt;%02X)&quot;</highlight><highlight class="normal">,<sp/>1,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fr,<sp/>ap,<sp/>ref_entry,<sp/>rem_entry,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datum_flag,<sp/>usb_flag,<sp/>*uflag,<sp/>datum_flag,<sp/>lsb_flag,<sp/>*lflag);</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_ADHOC_FLAG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*<sp/>eof</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/barrettj/work/projects/hops-git/source/c_src/fourfit_libs/ffsearch/src/adhoc_flag.c"/>
  </compounddef>
</doxygen>
