<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="ffres2pcp__lib_8py" kind="file" language="Python">
    <compoundname>ffres2pcp_lib.py</compoundname>
    <innerclass refid="classvpal_1_1ffres2pcp__lib_1_1Configuration" prot="public">vpal::ffres2pcp_lib::Configuration</innerclass>
    <innerclass refid="classvpal_1_1ffres2pcp__lib_1_1DefaultChannelDefines" prot="public">vpal::ffres2pcp_lib::DefaultChannelDefines</innerclass>
    <innerclass refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData" prot="public">vpal::ffres2pcp_lib::ExperimentReportData</innerclass>
    <innerclass refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases" prot="public">vpal::ffres2pcp_lib::SingleStationPCPhases</innerclass>
    <innernamespace refid="namespacevpal_1_1ffres2pcp__lib">vpal::ffres2pcp_lib</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacevpal_1_1ffres2pcp__lib" refkind="compound"><highlight class="stringliteral">&quot;&quot;&quot;module<sp/>to<sp/>determine<sp/>the<sp/>appropriate<sp/>manual<sp/>p-cal<sp/>phases<sp/>offsets<sp/>for<sp/>each</highlight></codeline>
<codeline lineno="2"><highlight class="stringliteral">station<sp/>during<sp/>an<sp/>experiment<sp/>w.r.t<sp/>to<sp/>a<sp/>network<sp/>reference<sp/>station&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#core<sp/>imports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>division</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>absolute_import</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>builtins<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>str</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>builtins<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>range</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>builtins<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>object</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>json</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>datetime</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#set<sp/>up<sp/>module<sp/>level<sp/>logger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>logging</highlight></codeline>
<codeline lineno="15"><highlight class="normal">ffres2pcp_logger<sp/>=<sp/>logging.getLogger(__name__)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#non-core<sp/>imports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>scipy.stats</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">#hops<sp/>package<sp/>python<sp/>libs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>ffcontrol</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">#local<sp/>imports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>utility</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>report_lib</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>processing</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>fringe_file_manipulation</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="classvpal_1_1ffres2pcp__lib_1_1DefaultChannelDefines" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1DefaultChannelDefines" kindref="compound">DefaultChannelDefines</ref>(object):</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;declare<sp/>fourfit<sp/>channel<sp/>codes<sp/>associated<sp/>with<sp/>different<sp/>observing<sp/>configurations&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1DefaultChannelDefines_1ae1d29e35915bf5d85b1e165257af88bc" kindref="member">__init__</ref>(self):</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1DefaultChannelDefines_1a1924620b2eab2b97c408eed70134dbcf" kindref="member">all</ref>all<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$%&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1DefaultChannelDefines_1a703eb99581d0b5ba6143eb2d23c0a766" kindref="member">vgos</ref>vgos<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;abcdefghijklmnopqrstuvwxyzABCDEF&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1DefaultChannelDefines_1ab6c67ce0d0c1ef0a770a010aa46a7c71" kindref="member">legacy_s</ref>legacy_s<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;abcdef&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1DefaultChannelDefines_1a0e0cedfde8feb7e82c7969ae2ca429b8" kindref="member">legacy_x</ref>legacy_x<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;ghijklmn&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="classvpal_1_1ffres2pcp__lib_1_1Configuration" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration" kindref="compound">Configuration</ref>(<sp/><ref refid="classvpal_1_1report__lib_1_1JsonSerializableObject" kindref="compound">report_lib.JsonSerializableObject</ref><sp/>):</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;configuration<sp/>object<sp/>for<sp/>ffres2pcp&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#default<sp/>values<sp/>for<sp/>init</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1a3a53efe787af21814fa0a6bf2c2905e4" kindref="member">__init__</ref>(self):</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1a4d1ebf19785b5f08e08bf9af4f47c902" kindref="member">exp_directory</ref>exp_directory<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;./&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">#location<sp/>of<sp/>experiment<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1a32720c0daf5e1018e88203dd938877f7" kindref="member">mode</ref>mode<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;VGOS&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">#can<sp/>be<sp/>VGOS<sp/>or<sp/>MIXED_MODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1ab45d9d1c8687e754383cf816c50cb710" kindref="member">network_reference_station</ref>network_reference_station<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">#station<sp/>to<sp/>be<sp/>used<sp/>as<sp/>network<sp/>phase<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1ade9774827dc162fa63fe42eb65daf01f" kindref="member">network_reference_station_pol</ref>network_reference_station_pol<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">#can<sp/>be<sp/>&apos;X&apos;<sp/>(vgos)<sp/>or<sp/>&apos;R&apos;<sp/>(mixed-mode)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1a2d03bd8784775531c1f8f946bf6bf31b" kindref="member">frequency_group</ref>frequency_group<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">#TODO<sp/>mixed-mode<sp/>(S<sp/>or<sp/>X)...needs<sp/>work!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1a0469884ba4524c33178629fa99ca1a07" kindref="member">target_stations</ref>target_stations<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">#list<sp/>of<sp/>vgos<sp/>stations<sp/>to<sp/>generate<sp/>pc_phases<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1a3de3654f327ed94e3c74c728d2ca2ec9" kindref="member">control_file</ref>control_file<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">#initial_control_file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1aedef5f89963216c72a70b4e34ff67af1" kindref="member">num_proc</ref>num_proc<sp/>=<sp/>1<sp/></highlight><highlight class="comment">#number<sp/>of<sp/>processes<sp/>to<sp/>run<sp/>in<sp/>parallel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1a58116f5a7e55709bc5dc290803c6de37" kindref="member">verbosity</ref>verbosity<sp/>=<sp/>0<sp/></highlight><highlight class="comment">#verbostiy<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1a8c158ba4715ca5d7fe93a369ceb5837e" kindref="member">min_snr</ref>min_snr<sp/>=<sp/>30<sp/></highlight><highlight class="comment">#min<sp/>SNR<sp/>allowed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1ae5f9d9dd6a3c6948aaf1d59f91cad7ec" kindref="member">max_snr</ref>max_snr<sp/>=<sp/>1e5<sp/></highlight><highlight class="comment">#max<sp/>SNR<sp/>allowed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1a98b0eeedca7f36f08fc9f012cde938c1" kindref="member">min_qcode</ref>min_qcode<sp/>=<sp/>3<sp/></highlight><highlight class="comment">#minimum<sp/>quality<sp/>code<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1a870263ce7894f54bcc90a8922e3167b4" kindref="member">dtec_tolerance</ref>dtec_tolerance<sp/>=<sp/>1.0</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1a6788744ab7eab93cad667964e1bb2cfb" kindref="member">start_scan_limit</ref>start_scan_limit<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;000-0000&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">#earliest<sp/>scan<sp/>to<sp/>use<sp/>(DOY-HHMM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1a2d2308e90d5ecd956aa3ecb1622cf323" kindref="member">stop_scan_limit</ref>stop_scan_limit<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;999-9999&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">#latest<sp/>scan<sp/>to<sp/>use<sp/>(DOY-HHMM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1ac4af9436d366d3754fb927160960af57" kindref="member">max_number_to_select</ref>max_number_to_select<sp/>=<sp/>0<sp/></highlight><highlight class="comment">#the<sp/>max<sp/>number<sp/>of<sp/>scans<sp/>used<sp/>for<sp/>each<sp/>station<sp/>to<sp/>compute<sp/>the<sp/>pc_phases<sp/>(zero<sp/>=<sp/>unlimited)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1a106ec73dbc74c1df920e1a00346c06da" kindref="member">dtec_nominal_error</ref>dtec_nominal_error<sp/>=<sp/>0.1<sp/></highlight><highlight class="comment">#empirically<sp/>determined<sp/>factor<sp/>for<sp/>search<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1a2eb4cdf3a604e31bc57c9f1d994a5b18" kindref="member">sigma_cut_factor</ref>sigma_cut_factor<sp/>=<sp/>3.0<sp/></highlight><highlight class="comment">#cut<sp/>phase<sp/>corrections<sp/>which<sp/>are<sp/>further<sp/>from<sp/>the<sp/>mean<sp/>than<sp/>sigma*sigma_cut_factor,<sp/>use<sp/>0.0<sp/>to<sp/>disable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1aeeb67b04960ceec76f2498c7a75147d2" kindref="member">use_progress_ticker</ref>use_progress_ticker<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1a4d3505c2aa201ae968cdedc77d208a6d" kindref="member">nchannel_discard_threshold</ref>nchannel_discard_threshold<sp/>=<sp/>5</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1a5f647608f74142f970456e7ed8f20a0f" kindref="member">channel_discard_tolerance</ref>channel_discard_tolerance<sp/>=<sp/>15.0</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration_1a3db22e453afa71581fcdb3253b5a5de5" kindref="member">export_json</ref>(self):</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.__dict__</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases" kindref="compound">SingleStationPCPhases</ref>(<sp/><ref refid="classvpal_1_1report__lib_1_1JsonSerializableObject" kindref="compound">report_lib.JsonSerializableObject</ref><sp/>):</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;container<sp/>class<sp/>for<sp/>the<sp/>pc_phases<sp/>(corrections)<sp/>of<sp/>a<sp/>single<sp/>polarization<sp/>of<sp/>a<sp/>single<sp/>station</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>values<sp/>stored<sp/>in<sp/>this<sp/>class<sp/>must<sp/>be<sp/>corrected<sp/>for<sp/>the<sp/>baseline<sp/>order<sp/>of<sp/>the<sp/>involved<sp/>stations,</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>such<sp/>that<sp/>this<sp/>station<sp/>is<sp/>treated<sp/>as<sp/>if<sp/>it<sp/>were<sp/>always<sp/>a<sp/>remote<sp/>station</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>value<sp/>of<sp/>scan_baselines_used,<sp/>keeps<sp/>track<sp/>of<sp/>which<sp/>scans<sp/>and<sp/>baselines<sp/>were<sp/>used<sp/>when</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>computing<sp/>the<sp/>average<sp/>values<sp/>of<sp/>the<sp/>pc_phases<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1aca185ae58740c8eef59596865249eb13" kindref="member">__init__</ref>(self,<sp/>station_id,<sp/>pol):</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a40589046383e726514d7be855884ae15" kindref="member">station_id</ref>station_id<sp/>=<sp/>station_id<sp/></highlight><highlight class="comment">#station<sp/>mk4<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a73287426374a6e36ae3da5680aab9aab" kindref="member">pol</ref>pol<sp/>=<sp/>pol<sp/></highlight><highlight class="comment">#station<sp/>polarization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ac7b88f295c240951c45ddf5ea9a6ad7c" kindref="member">scan_baselines_used</ref>scan_baselines_used<sp/>=<sp/>set()<sp/></highlight><highlight class="comment">#set<sp/>of<sp/>scan-baseline<sp/>tuples<sp/>inserted<sp/>into<sp/>this<sp/>library<sp/>of<sp/>pc_phases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ac5b795481681728541749443a013859e" kindref="member">pc_phases</ref>pc_phases<sp/>=<sp/>dict()<sp/></highlight><highlight class="comment">#scan-baseline-tuple<sp/>indexed<sp/>dict<sp/>of<sp/>pc-phases<sp/>(which<sp/>are<sp/>channel<sp/>indexed<sp/>dicts<sp/>of<sp/>phase<sp/>offsets)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a642a7074c41a75f034fc8a71a1f2cafb" kindref="member">mean_pc_phases</ref>mean_pc_phases<sp/>=<sp/>dict()<sp/></highlight><highlight class="comment">#a<sp/>channel<sp/>indexed<sp/>dict<sp/>of<sp/>average<sp/>values<sp/>of<sp/>the<sp/>phase<sp/>offsets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a47f9abbde867b6c98ab6086ac534ce0b" kindref="member">stddev_pc_phases</ref>stddev_pc_phases<sp/>=<sp/>dict()<sp/></highlight><highlight class="comment">#a<sp/>channel<sp/>indexed<sp/>dict<sp/>of<sp/>the<sp/>std.<sp/>dev.<sp/>of<sp/>the<sp/>pc_phases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a1523b1a7d79f19785a3508569e44f07e" kindref="member">is_empty</ref>(self):</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;determine<sp/>if<sp/>this<sp/>object<sp/>has<sp/>any<sp/>pc<sp/>phases<sp/>data<sp/>or<sp/>not<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ac5b795481681728541749443a013859e" kindref="member">pc_phases</ref>pc_phases)<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1af6e610f3c94132e21daf5cc57d26391b" kindref="member">add_pc_phases</ref>(self,<sp/>scan_name,<sp/>baseline,<sp/>pol,<sp/>pc_phases_dict):</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>add<sp/>a<sp/>set<sp/>of<sp/>phases<sp/>derived<sp/>from<sp/>a<sp/>scan/baseline<sp/>to<sp/>the<sp/>collection<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan_base_string<sp/>=<sp/>scan_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>baseline</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a73287426374a6e36ae3da5680aab9aab" kindref="member">pol</ref>pol<sp/>==<sp/>pol:</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>scan_base_string<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ac7b88f295c240951c45ddf5ea9a6ad7c" kindref="member">scan_baselines_used</ref>scan_baselines_used:</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ac7b88f295c240951c45ddf5ea9a6ad7c" kindref="member">scan_baselines_used</ref>scan_baselines_used.add(<sp/>scan_base_string<sp/>)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ac5b795481681728541749443a013859e" kindref="member">pc_phases</ref>pc_phases[scan_base_string]<sp/>=<sp/>pc_phases_dict</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a113db7ba79c0d0ecbff91e54719dc58b" kindref="member">export_json</ref>(self):</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>create<sp/>a<sp/>dict<sp/>to<sp/>be<sp/>used<sp/>as<sp/>json<sp/>output<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_dict<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_dict[</highlight><highlight class="stringliteral">&quot;station_id&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a40589046383e726514d7be855884ae15" kindref="member">station_id</ref>station_id</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_dict[</highlight><highlight class="stringliteral">&apos;pol&apos;</highlight><highlight class="normal">]<sp/>=<sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a73287426374a6e36ae3da5680aab9aab" kindref="member">pol</ref>pol</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_dict[</highlight><highlight class="stringliteral">&apos;scan_baselines_used&apos;</highlight><highlight class="normal">]<sp/>=<sp/>list(self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ac7b88f295c240951c45ddf5ea9a6ad7c" kindref="member">scan_baselines_used</ref>scan_baselines_used)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_dict[</highlight><highlight class="stringliteral">&apos;pc_phases&apos;</highlight><highlight class="normal">]<sp/>=<sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ac5b795481681728541749443a013859e" kindref="member">pc_phases</ref>pc_phases</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_dict[</highlight><highlight class="stringliteral">&apos;mean_pc_phases&apos;</highlight><highlight class="normal">]<sp/>=<sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a642a7074c41a75f034fc8a71a1f2cafb" kindref="member">mean_pc_phases</ref>mean_pc_phases</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_dict[</highlight><highlight class="stringliteral">&apos;stddev_pc_phases&apos;</highlight><highlight class="normal">]<sp/>=<sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a47f9abbde867b6c98ab6086ac534ce0b" kindref="member">stddev_pc_phases</ref>stddev_pc_phases</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>json_dict</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a6d975e0d1526393c2e17aa31c0654137" kindref="member">get_channel_n_datapoints</ref>(self):</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>get<sp/>number<sp/>of<sp/>data<sp/>points<sp/>associated<sp/>with<sp/>each<sp/>channel<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_pts<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>scan_base_string<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ac7b88f295c240951c45ddf5ea9a6ad7c" kindref="member">scan_baselines_used</ref>scan_baselines_used:</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcph<sp/>=<sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ac5b795481681728541749443a013859e" kindref="member">pc_phases</ref>pc_phases[scan_base_string]</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ch_key,<sp/>val<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(pcph.items()):</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ch_key<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>n_pts:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_pts[ch_key]<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>np.isnan(val):</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_pts[ch_key]<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n_pts</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a3543f13db1863613b23c584552716b1f" kindref="member">get_mean_phases</ref>(self):</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>get<sp/>mean<sp/>phases<sp/>of<sp/>each<sp/>channel<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ab5778b491816c8e11d58a9b40b3acb83" kindref="member">compute_mean_phases</ref>compute_mean_phases()</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a642a7074c41a75f034fc8a71a1f2cafb" kindref="member">mean_pc_phases</ref>mean_pc_phases</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ab0ffd1911f6b8fcea6b0544e2e8096c6" kindref="member">get_stddev_phases</ref>(self):</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>get<sp/>the<sp/>std.<sp/>dev.<sp/>of<sp/>the<sp/>phases<sp/>of<sp/>each<sp/>channel<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ab5778b491816c8e11d58a9b40b3acb83" kindref="member">compute_mean_phases</ref>compute_mean_phases()</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a47f9abbde867b6c98ab6086ac534ce0b" kindref="member">stddev_pc_phases</ref>stddev_pc_phases</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ab5778b491816c8e11d58a9b40b3acb83" kindref="member">compute_mean_phases</ref>(self):</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>compute<sp/>the<sp/>mean<sp/>phases<sp/>of<sp/>each<sp/>channel<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chan_pc_phases<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>scan_base_string<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ac7b88f295c240951c45ddf5ea9a6ad7c" kindref="member">scan_baselines_used</ref>scan_baselines_used:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcph<sp/>=<sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ac5b795481681728541749443a013859e" kindref="member">pc_phases</ref>pc_phases[scan_base_string]</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ch_key,<sp/>val<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(pcph.items()):</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ch_key<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>chan_pc_phases:</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chan_pc_phases[ch_key]<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>np.isnan(val):</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chan_pc_phases[ch_key].<ref refid="read__control__file_8c_1a6e8445bf8d20289805dd74cc8c79c246" kindref="member">append</ref>(val)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ch_key,<sp/>val_list<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(chan_pc_phases.items()):</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(val_list)<sp/>!=<sp/>0:</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a642a7074c41a75f034fc8a71a1f2cafb" kindref="member">mean_pc_phases</ref>mean_pc_phases[ch_key]<sp/>=<sp/>scipy.stats.circmean(<sp/>np.asarray(val_list),<sp/>high=180.0,<sp/>low=-180.0)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a47f9abbde867b6c98ab6086ac534ce0b" kindref="member">stddev_pc_phases</ref>stddev_pc_phases[ch_key]<sp/>=<sp/>scipy.stats.circstd(<sp/>np.asarray(val_list),<sp/>high=180.0,<sp/>low=-180.0)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a8e867b546d102ed1ef334b47c19d6790" kindref="member">merge</ref>(self,<sp/>obj):</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>merge<sp/>in<sp/>the<sp/>data<sp/>from<sp/>another<sp/>object<sp/>of<sp/>the<sp/>same<sp/>time<sp/>(assuming<sp/>it<sp/>matches<sp/>the<sp/>station<sp/>and<sp/>pol)<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a40589046383e726514d7be855884ae15" kindref="member">station_id</ref>station_id<sp/>==<sp/>obj.station_id<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a73287426374a6e36ae3da5680aab9aab" kindref="member">pol</ref>pol<sp/>==<sp/>obj.pol:</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#add<sp/>the<sp/>set<sp/>of<sp/>scan-baseline-pc_phases<sp/>which<sp/>are<sp/>not<sp/>yet<sp/>present:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key,<sp/>pc_ph<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(obj.pc_phases.items()):</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sc_bl<sp/>=<sp/>key.split(</highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1af6e610f3c94132e21daf5cc57d26391b" kindref="member">add_pc_phases</ref>add_pc_phases(<sp/>sc_bl[0],<sp/>sc_bl[1],<sp/>obj.pol,<sp/>pc_ph)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ad9a212596f829cfa3e3ce5c183f14a18" kindref="member">apply_sigma_cut</ref>(self,<sp/>sigma_cut_factor):</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>we<sp/>expect<sp/>each<sp/>channel<sp/>to<sp/>have<sp/>a<sp/>mean<sp/>phase<sp/>and<sp/>standard<sp/>deviation<sp/>(sigma)</highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>function<sp/>eliminates<sp/>outliers<sp/>by<sp/>iterating<sp/>over<sp/>each<sp/>channel</highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>removing<sp/>all<sp/>data<sp/>points<sp/>which<sp/>lie<sp/>beyond<sp/>the<sp/>range<sp/>of<sp/>sigma_cut_factor*sigma<sp/>from<sp/>the<sp/>channel<sp/>mean<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ab5778b491816c8e11d58a9b40b3acb83" kindref="member">compute_mean_phases</ref>compute_mean_phases()</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_total_removed<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_total<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>scan_base_string<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ac7b88f295c240951c45ddf5ea9a6ad7c" kindref="member">scan_baselines_used</ref>scan_baselines_used:</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcph<sp/>=<sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ac5b795481681728541749443a013859e" kindref="member">pc_phases</ref>pc_phases[scan_base_string]</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chan_entries_to_remove<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ch,<sp/>val<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(pcph.items()):</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_total<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angular_diff<sp/>=<sp/>abs(<sp/>utility.minimum_angular_difference(val,<sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a642a7074c41a75f034fc8a71a1f2cafb" kindref="member">mean_pc_phases</ref>mean_pc_phases[ch])<sp/>)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>angular_diff<sp/>&gt;<sp/>abs(<sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a47f9abbde867b6c98ab6086ac534ce0b" kindref="member">stddev_pc_phases</ref>stddev_pc_phases[ch]*sigma_cut_factor):</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chan_entries_to_remove.append(ch)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_total_removed<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>chan_entries_to_remove:</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcph.pop(ch)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ac5b795481681728541749443a013859e" kindref="member">pc_phases</ref>pc_phases[scan_base_string]<sp/>=<sp/>pcph</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ffres2pcp_logger.info(</highlight><highlight class="stringliteral">&quot;sigma<sp/>cut<sp/>removed:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str(n_total_removed)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>outlier<sp/>values<sp/>out<sp/>of<sp/>a<sp/>total<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str(n_total)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pc_phases<sp/>estimates<sp/>over<sp/>all<sp/>channels<sp/>for<sp/>station:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a40589046383e726514d7be855884ae15" kindref="member">station_id</ref>station_id<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>pol:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1a73287426374a6e36ae3da5680aab9aab" kindref="member">pol</ref>pol)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#recompute<sp/>the<sp/>mean<sp/>phases<sp/>after<sp/>removal<sp/>of<sp/>outliers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases_1ab5778b491816c8e11d58a9b40b3acb83" kindref="member">compute_mean_phases</ref>compute_mean_phases()</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData" kindref="compound">ExperimentReportData</ref>(<sp/><ref refid="classvpal_1_1report__lib_1_1JsonSerializableObject" kindref="compound">report_lib.JsonSerializableObject</ref><sp/>):</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;object<sp/>to<sp/>gather<sp/>all<sp/>station<sp/>data<sp/>for<sp/>a<sp/>particular<sp/>experiment<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a12752c1d1b5375749553365c71349ec4" kindref="member">__init__</ref>(self):</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a4bb2fd7b9dbcb60ea4a7756fe195ed36" kindref="member">config_obj</ref>config_obj<sp/>=<sp/><ref refid="classvpal_1_1ffres2pcp__lib_1_1Configuration" kindref="compound">Configuration</ref>()</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a0c3e7b4115e75e15288964df81fc5534" kindref="member">all_blc</ref>all_blc<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a3b6ee6caa70add9f345e5bbaa9439c40" kindref="member">generated_sspcp</ref>generated_sspcp<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a4ac3d25cb476aa26b56d2ddfdeb0f028" kindref="member">apriori_sspcp</ref>apriori_sspcp<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a2dff28065215164acf39a679f72c71ec" kindref="member">channel_freqs</ref>channel_freqs<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a0955eba7c07c328aae4fa1805f21c831" kindref="member">export_json</ref>(self):</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>dump<sp/>to<sp/>a<sp/>dict<sp/>for<sp/>json<sp/>export<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_dict<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_dict[</highlight><highlight class="stringliteral">&quot;channel_freqs&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a2dff28065215164acf39a679f72c71ec" kindref="member">channel_freqs</ref>channel_freqs</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_dict[</highlight><highlight class="stringliteral">&quot;configuration&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a4bb2fd7b9dbcb60ea4a7756fe195ed36" kindref="member">config_obj</ref>config_obj.<ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a0955eba7c07c328aae4fa1805f21c831" kindref="member">export_json</ref>()</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generated_sspcp_dict<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>st_pol_string,<sp/>obj<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a3b6ee6caa70add9f345e5bbaa9439c40" kindref="member">generated_sspcp</ref>generated_sspcp.items()):</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generated_sspcp_dict[st_pol_string]<sp/>=<sp/>obj.export_json()</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_dict[</highlight><highlight class="stringliteral">&quot;generated_single_station_pc_phases&quot;</highlight><highlight class="normal">]<sp/>=<sp/>generated_sspcp_dict</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apriori_sspcp_dict<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>st_pol_string,<sp/>obj<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a4ac3d25cb476aa26b56d2ddfdeb0f028" kindref="member">apriori_sspcp</ref>apriori_sspcp.items()):</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apriori_sspcp_dict[st_pol_string]<sp/>=<sp/>obj.export_json()</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_dict[</highlight><highlight class="stringliteral">&quot;apriori_single_station_pc_phases&quot;</highlight><highlight class="normal">]<sp/>=<sp/>apriori_sspcp_dict</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blc_json_list<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a0c3e7b4115e75e15288964df81fc5534" kindref="member">all_blc</ref>all_blc:</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blc_json_list.append(x.export_json())</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_dict[</highlight><highlight class="stringliteral">&quot;all_baseline_collections_considered&quot;</highlight><highlight class="normal">]<sp/>=<sp/>blc_json_list</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>json_dict</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a1eecf5e9dc903538a53fecd6dc557a1a" kindref="member">import_json</ref>(self,<sp/>json_dict):</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>reconstruct<sp/>from<sp/>dict<sp/>object<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(json_dict,<sp/>dict):</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a4bb2fd7b9dbcb60ea4a7756fe195ed36" kindref="member">config_obj</ref>config_obj.<ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a1eecf5e9dc903538a53fecd6dc557a1a" kindref="member">import_json</ref>(json_dict[</highlight><highlight class="stringliteral">&quot;configuration&quot;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a2dff28065215164acf39a679f72c71ec" kindref="member">channel_freqs</ref>channel_freqs<sp/>=<sp/>json_dict[</highlight><highlight class="stringliteral">&quot;channel_freqs&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key,<sp/>val<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(json_dict[</highlight><highlight class="stringliteral">&quot;generated_single_station_pc_phases&quot;</highlight><highlight class="normal">].items()):</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>station,<sp/>pol<sp/>=<sp/>key.split(</highlight><highlight class="stringliteral">&apos;_&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/>=<sp/><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases" kindref="compound">SingleStationPCPhases</ref>(station,pol)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj.import_json(val)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a3b6ee6caa70add9f345e5bbaa9439c40" kindref="member">generated_sspcp</ref>generated_sspcp[key]<sp/>=<sp/>obj</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key,<sp/>val<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(json_dict[</highlight><highlight class="stringliteral">&quot;apriori_single_station_pc_phases&quot;</highlight><highlight class="normal">].items()):</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>station,<sp/>pol<sp/>=<sp/>key.split(</highlight><highlight class="stringliteral">&apos;_&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/>=<sp/><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases" kindref="compound">SingleStationPCPhases</ref>(station,pol)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj.import_json(val)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a4ac3d25cb476aa26b56d2ddfdeb0f028" kindref="member">apriori_sspcp</ref>apriori_sspcp[key]<sp/>=<sp/>obj</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blc_json_list<sp/>=<sp/>json_dict[</highlight><highlight class="stringliteral">&quot;all_baseline_collections_considered&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>blc_json_list:</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/>=<sp/><ref refid="classvpal_1_1fringe__file__manipulation_1_1SingleBaselinePolarizationProductCollection" kindref="compound">fringe_file_manipulation.SingleBaselinePolarizationProductCollection</ref>()</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj.import_json(x)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a0c3e7b4115e75e15288964df81fc5534" kindref="member">all_blc</ref>all_blc.<ref refid="read__control__file_8c_1a6e8445bf8d20289805dd74cc8c79c246" kindref="member">append</ref>(obj)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a4011972a1afb05934bb504d2790ac08e" kindref="member">create_report</ref>(self,<sp/>report_filename):</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;dump<sp/>this<sp/>object<sp/>to<sp/>a<sp/>json<sp/>report<sp/>file&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>report_file<sp/>=<sp/>os.path.abspath(report_filename)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>report<sp/>=<sp/>open(report_filename,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>report.write(json.dumps(self,default=report_lib.NestedObjectEncoder,<sp/>indent=2))</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>report.close()</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a2e2d10ec283b4d03bc681164f78c2e6b" kindref="member">load_report</ref>(self,<sp/>report_filename):</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;load<sp/>data<sp/>from<sp/>a<sp/>report<sp/>file<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>report_file<sp/>=<sp/>os.path.abspath(report_filename)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>open(report_file,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>report:</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>json.load(report)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData_1a1eecf5e9dc903538a53fecd6dc557a1a" kindref="member">import_json</ref><ref refid="classvpal_1_1report__lib_1_1JsonSerializableObject_1aa016c5f55c3299e6e7525fb4b31a3377" kindref="member">import_json</ref>import_json(data)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacevpal_1_1ffres2pcp__lib_1a27fbb3356d00d2797310d0ca0e8647d3" kindref="member">compute_vgos_network_reference_station_pc_phases</ref>(single_baseline_pp_collection_obj,<sp/>network_reference_station,<sp/>discard_tolerance=15.0,<sp/>complete_discard_count=5):</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>compute<sp/>the<sp/>(Y-pol)<sp/>pc_phases<sp/>corrections<sp/>for<sp/>the<sp/>station<sp/>being<sp/>used<sp/>as<sp/>the<sp/>network<sp/>reference<sp/>station<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>sbpp<sp/>=<sp/>single_baseline_pp_collection_obj</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#for<sp/>now,<sp/>we<sp/>only<sp/>use<sp/>baselines<sp/>where<sp/>the<sp/>network_reference_station<sp/>comes<sp/>first<sp/>(TODO,<sp/>also<sp/>use<sp/>baselines<sp/>where<sp/>it<sp/>appears<sp/>as<sp/>a<sp/>&apos;remote&apos;<sp/>station)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#by<sp/>default<sp/>we<sp/>assume<sp/>the<sp/>network_reference_station<sp/>is<sp/>the<sp/>&apos;X&apos;<sp/>pol<sp/>and<sp/>we<sp/>are<sp/>computing<sp/>corrections<sp/>for<sp/>&apos;Y&apos;<sp/>pol.<sp/>&apos;Y&apos;<sp/>as<sp/>reference<sp/>is<sp/>not<sp/>currently<sp/>supported</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>net_ref_pc<sp/>=<sp/><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases" kindref="compound">SingleStationPCPhases</ref>(network_reference_station,<sp/></highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#for<sp/>now,<sp/>only<sp/>use<sp/>baselines<sp/>where<sp/>the<sp/>network_reference_station<sp/>is<sp/>also<sp/>the<sp/>&apos;reference&apos;<sp/>station<sp/>(not<sp/>remote)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sbpp.is_complete()<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>network_reference_station<sp/>==<sp/>sbpp.baseline[0]:</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_xx<sp/>=<sp/>sbpp.get_phase_residuals(</highlight><highlight class="stringliteral">&apos;XX&apos;</highlight><highlight class="normal">).phase_corrections</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_xy<sp/>=<sp/>sbpp.get_phase_residuals(</highlight><highlight class="stringliteral">&apos;XY&apos;</highlight><highlight class="normal">).phase_corrections</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_yx<sp/>=<sp/>sbpp.get_phase_residuals(</highlight><highlight class="stringliteral">&apos;YX&apos;</highlight><highlight class="normal">).phase_corrections</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_yy<sp/>=<sp/>sbpp.get_phase_residuals(</highlight><highlight class="stringliteral">&apos;YY&apos;</highlight><highlight class="normal">).phase_corrections</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch_set<sp/>=<sp/>set()</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(pc_xx.keys()):<sp/>ch_set.add(ch)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(pc_xy.keys()):<sp/>ch_set.add(ch)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(pc_yx.keys()):<sp/>ch_set.add(ch)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(pc_yy.keys()):<sp/>ch_set.add(ch)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_pc_phase_y<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#compute<sp/>Y-X<sp/>offsets<sp/>from<sp/>(XX<sp/>-<sp/>YX)<sp/>and<sp/>(XY<sp/>-<sp/>YY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#result<sp/>is<sp/>the<sp/>average<sp/>of<sp/>the<sp/>two<sp/>methods,<sp/>unless<sp/>the<sp/>difference<sp/>exceeds<sp/>the<sp/>discard<sp/>tolerance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#in<sp/>which<sp/>case<sp/>that<sp/>channel<sp/>will<sp/>not<sp/>produce<sp/>any<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>discard_count<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>ch_set:</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>pc_xx<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>ch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>pc_yx<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>ch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>pc_yy<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>ch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>pc_xy:</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res1<sp/>=<sp/>pc_xx[ch]<sp/>-<sp/>pc_yx[ch]</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res2<sp/>=<sp/>pc_xy[ch]<sp/>-<sp/>pc_yy[ch]</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>abs(res2<sp/>-<sp/>res1)<sp/>&lt;=<sp/>discard_tolerance:</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_pc_phase_y[ch]<sp/>=<sp/>((res1<sp/>+<sp/>res2)/2.0)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>discard_count<sp/>+=1</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>ch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>pc_xx<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>ch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>pc_yx:</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res1<sp/>=<sp/>pc_xx[ch]<sp/>-<sp/>pc_yx[ch]</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_pc_phase_y[ch]<sp/>=<sp/>res1</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>ch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>pc_yy<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>ch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>pc_xy:</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res2<sp/>=<sp/>pc_xy[ch]<sp/>-<sp/>pc_yy[ch]</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_pc_phase_y[ch]<sp/>=<sp/>res2</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#if<sp/>we<sp/>have<sp/>more<sp/>than<sp/>a<sp/>certain<sp/>number<sp/>of<sp/>channels<sp/>with<sp/>large<sp/>phase<sp/>dis-agreements,<sp/>we<sp/>completely<sp/>ignore<sp/>this<sp/>scan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>discard_count<sp/>&lt;<sp/>complete_discard_count:</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>net_ref_pc.add_pc_phases(sbpp.scan_name,<sp/>sbpp.baseline,<sp/></highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal">,<sp/>ref_pc_phase_y)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>net_ref_pc</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacevpal_1_1ffres2pcp__lib_1a3b780e99a0cea6d46d4fb9a92c49fa50" kindref="member">generate_station_phase_corrections</ref>(SingleBaselinePolarizationProductCollection_list,<sp/>target_station,<sp/>\</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>network_reference_station,<sp/>dtec_tolerance=1.0,<sp/>network_reference_station_pol=&apos;X&apos;,<sp/>\</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>discard_tolerance=15,<sp/>nchannel_discard_threshold=5):</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>function<sp/>to<sp/>generate<sp/>pc_phases<sp/>for<sp/>station<sp/>in<sp/>an<sp/>experiment</highlight></codeline>
<codeline lineno="333"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>from<sp/>a<sp/>list<sp/>of<sp/>selected<sp/>scans<sp/>(gathered<sp/>into<sp/>SingleScanBaselineCollection)<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>sbppcl<sp/>=<sp/>SingleBaselinePolarizationProductCollection_list</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>station_pc_phases<sp/>=<sp/>dict()<sp/></highlight><highlight class="comment">#<sp/>indexed<sp/>by<sp/>(station,<sp/>pol)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>st<sp/>=<sp/>target_station</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>network_reference_station_pol<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#vgos<sp/>mode,<sp/>so<sp/>add<sp/>&apos;Y&apos;<sp/>pc_phases<sp/>for<sp/>network_reference_station</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stpy<sp/>=<sp/>network_reference_station<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;Y&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>station_pc_phases[<sp/>stpy<sp/>]<sp/>=<sp/><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases" kindref="compound">SingleStationPCPhases</ref>(network_reference_station,<sp/></highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>network_reference_station_pol<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#regular<sp/>VGOS<sp/>session</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>sbpp<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>sbppcl:</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan_name<sp/>=<sp/>sbpp.scan_name</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bl<sp/>=<sp/>sbpp.baseline</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>st<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>bl<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>network_reference_station<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>bl<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>st<sp/>!=<sp/>network_reference_station:</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sbpp.is_complete()<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>sbpp.get_dtec_max_deviation()<sp/>&lt;<sp/>dtec_tolerance:</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#first<sp/>take<sp/>care<sp/>of<sp/>any<sp/>network<sp/>reference<sp/>station<sp/>pc<sp/>corrections<sp/>we<sp/>can<sp/>generate<sp/>from<sp/>this<sp/>scan/baseline<sp/>(only<sp/>if<sp/>VGOS<sp/>mode)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>network_reference_station_pol<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>bl[0]<sp/>==<sp/>network_reference_station:</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_st_pc<sp/>=<sp/><ref refid="namespacevpal_1_1ffres2pcp__lib_1a27fbb3356d00d2797310d0ca0e8647d3" kindref="member">compute_vgos_network_reference_station_pc_phases</ref>(sbpp,<sp/>network_reference_station,)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stpy<sp/>=<sp/>network_reference_station<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;Y&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>station_pc_phases[stpy].<ref refid="fourmer_8c_1a6ddc8dfb244986f7b35b0c290c866488" kindref="member">merge</ref>(ref_st_pc)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#now<sp/>take<sp/>care<sp/>of<sp/>the<sp/>remote<sp/>station<sp/>corrections<sp/>for<sp/>this<sp/>scan/baseline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_x<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_y<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>bl[0]<sp/>==<sp/>network_reference_station<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>bl[1]<sp/>==<sp/>st:</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#normal<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_x<sp/>=<sp/>sbpp.get_phase_residuals(network_reference_station_pol<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal">).phase_corrections<sp/></highlight><highlight class="comment">#needed<sp/>for<sp/>X-pol<sp/>pc_phases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_y<sp/>=<sp/>sbpp.get_phase_residuals(network_reference_station_pol<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal">).phase_corrections<sp/></highlight><highlight class="comment">#needed<sp/>for<sp/>Y-pol<sp/>pc_phases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>bl[1]<sp/>==<sp/>network_reference_station<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>bl[0]<sp/>==<sp/>st:</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#reverse<sp/>case<sp/>(network<sp/>reference<sp/>station<sp/>is<sp/>remote<sp/>station<sp/>on<sp/>this<sp/>baseline)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_x<sp/>=<sp/>{key:val*-1.0<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key,<sp/>val<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(sbpp.get_phase_residuals(</highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal"><sp/>+<sp/>network_reference_station_pol<sp/>).phase_corrections.items())}<sp/></highlight><highlight class="comment">#needed<sp/>for<sp/>X-pol<sp/>pc_phases,<sp/>but<sp/>invert<sp/>the<sp/>sign<sp/>b/c<sp/>the<sp/>baseline<sp/>is<sp/>flipped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_y<sp/>=<sp/>{key:val*-1.0<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key,<sp/>val<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(sbpp.get_phase_residuals(</highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal"><sp/>+<sp/>network_reference_station_pol<sp/>).phase_corrections.items())}<sp/></highlight><highlight class="comment">#needed<sp/>for<sp/>Y-pol<sp/>pc_phases,<sp/>but<sp/>invert<sp/>the<sp/>sign<sp/>b/c<sp/>the<sp/>baseline<sp/>is<sp/>flipped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(pc_x)<sp/>!=<sp/>0:</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stpx<sp/>=<sp/>st<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>stpx<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>station_pc_phases:</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>station_pc_phases[stpx]<sp/>=<sp/><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases" kindref="compound">SingleStationPCPhases</ref>(st,</highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>station_pc_phases[stpx].add_pc_phases(scan_name,<sp/>bl,<sp/></highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal">,<sp/>pc_x)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(pc_y)<sp/>!=<sp/>0:</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stpy<sp/>=<sp/>st<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>stpy<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>station_pc_phases:</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>station_pc_phases[stpy]<sp/>=<sp/><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases" kindref="compound">SingleStationPCPhases</ref>(st,</highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>station_pc_phases[stpy].add_pc_phases(scan_name,<sp/>bl,<sp/></highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal">,<sp/>pc_y)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>network_reference_station_pol<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;R&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#mixed-mode<sp/>session</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>sbpp<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>sbppcl:</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan_name<sp/>=<sp/>sbpp.scan_name</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bl<sp/>=<sp/>sbpp.baseline</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>st<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>bl<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>network_reference_station<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>bl<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>st<sp/>!=<sp/>network_reference_station:</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#only<sp/>take<sp/>care<sp/>of<sp/>the<sp/>remote<sp/>station<sp/>corrections<sp/>for<sp/>this<sp/>scan/baseline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_x<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_y<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>bl[0]<sp/>==<sp/>network_reference_station<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>bl[1]<sp/>==<sp/>st:</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#normal<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_x<sp/>=<sp/>sbpp.get_phase_residuals(network_reference_station_pol<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal">).phase_corrections<sp/></highlight><highlight class="comment">#needed<sp/>for<sp/>X-pol<sp/>pc_phases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_y<sp/>=<sp/>sbpp.get_phase_residuals(network_reference_station_pol<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal">).phase_corrections<sp/></highlight><highlight class="comment">#needed<sp/>for<sp/>Y-pol<sp/>pc_phases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>bl[1]<sp/>==<sp/>network_reference_station<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>bl[0]<sp/>==<sp/>st:</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#reverse<sp/>case<sp/>(network<sp/>reference<sp/>station<sp/>is<sp/>remote<sp/>station<sp/>on<sp/>this<sp/>baseline)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_x<sp/>=<sp/>{key:val*-1.0<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key,<sp/>val<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(sbpp.get_phase_residuals(</highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal"><sp/>+<sp/>network_reference_station_pol<sp/>).phase_corrections.items())}<sp/></highlight><highlight class="comment">#needed<sp/>for<sp/>X-pol<sp/>pc_phases,<sp/>but<sp/>invert<sp/>the<sp/>sign<sp/>b/c<sp/>the<sp/>baseline<sp/>is<sp/>flipped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_y<sp/>=<sp/>{key:val*-1.0<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key,<sp/>val<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(sbpp.get_phase_residuals(</highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal"><sp/>+<sp/>network_reference_station_pol<sp/>).phase_corrections.items())}<sp/></highlight><highlight class="comment">#needed<sp/>for<sp/>Y-pol<sp/>pc_phases,<sp/>but<sp/>invert<sp/>the<sp/>sign<sp/>b/c<sp/>the<sp/>baseline<sp/>is<sp/>flipped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(pc_x)<sp/>!=<sp/>0:</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stpx<sp/>=<sp/>st<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>stpx<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>station_pc_phases:</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>station_pc_phases[stpx]<sp/>=<sp/><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases" kindref="compound">SingleStationPCPhases</ref>(st,</highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>station_pc_phases[stpx].add_pc_phases(scan_name,<sp/>bl,<sp/></highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal">,<sp/>pc_x)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(pc_y)<sp/>!=<sp/>0:</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stpy<sp/>=<sp/>st<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>stpy<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>station_pc_phases:</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>station_pc_phases[stpy]<sp/>=<sp/><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases" kindref="compound">SingleStationPCPhases</ref>(st,</highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>station_pc_phases[stpy].add_pc_phases(scan_name,<sp/>bl,<sp/></highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal">,<sp/>pc_y)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#return<sp/>a<sp/>dict<sp/>of<sp/>pc_phases<sp/>correction<sp/>objects<sp/>for<sp/>the<sp/>target_station<sp/>+<sp/>network_reference_station</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#for<sp/>a<sp/>vgos<sp/>experiment,<sp/>this<sp/>contains<sp/>3<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#for<sp/>mix-mode,<sp/>only<sp/>2<sp/>objects<sp/>(no-ref<sp/>station<sp/>offsets)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>station_pc_phases</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacevpal_1_1ffres2pcp__lib_1afe33d9aa7177c071d1dd27f7ee26a18f" kindref="member">select_collection_subset</ref>(SingleBaselinePolarizationProductCollection_list,<sp/>target_station,<sp/>network_reference_station,<sp/>dtec_nom=0.1,<sp/>max_number_to_select=0):</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;this<sp/>function<sp/>selects<sp/>single<sp/>scan<sp/>baseline<sp/>pol-product<sp/>collections<sp/>for<sp/>a<sp/>particular<sp/>target/reference<sp/>station<sp/>based<sp/>on<sp/>empirical<sp/>method</highlight></codeline>
<codeline lineno="421"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>this<sp/>assumes<sp/>cuts<sp/>in<sp/>min_snr,<sp/>dtec<sp/>deviation,<sp/>etc.<sp/>have<sp/>already<sp/>been<sp/>made&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#dtec_nom<sp/>is<sp/>empircally<sp/>determined<sp/>to<sp/>be<sp/>0.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#if<sp/>max_number_to_select<sp/>is<sp/>zero,<sp/>number<sp/>is<sp/>unlimited</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>sublist<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>sbpp<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>SingleBaselinePolarizationProductCollection_list:</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>target_station<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>sbpp.baseline<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>network_reference_station<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>sbpp.baseline:</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sublist.append(sbpp)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>utility.sort_objects_by_quantity(sublist,<sp/></highlight><highlight class="stringliteral">&quot;dtec_mdev&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>n_scans_collected<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>selected_scans<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#if<sp/>the<sp/>number<sp/>to<sp/>select<sp/>is<sp/>not<sp/>specified,<sp/>we<sp/>max<sp/>it<sp/>out<sp/>to<sp/>all<sp/>of<sp/>the<sp/>scans</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>max_number_to_select<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_number_to_select<sp/>=<sp/>len(sublist)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>n_scans_collected<sp/>&lt;<sp/>max_number_to_select<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>len(sublist)<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#now<sp/>find<sp/>the<sp/>pareto<sp/>front<sp/>for<sp/>this<sp/>sublist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ffres2pcp_pareto<sp/>=<sp/>utility.compute_2d_pareto_front(sublist,<sp/></highlight><highlight class="stringliteral">&quot;min_snr&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dtec_mdev&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#to<sp/>do<sp/>this<sp/>we<sp/>will<sp/>pick<sp/>the<sp/>scan<sp/>that<sp/>maximizes<sp/>the<sp/>value<sp/>of<sp/>min_snr/(dtec_mdev<sp/>+<sp/>0.1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_scan<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_score<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>scan<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>ffres2pcp_pareto:</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>score<sp/>=<sp/>abs(<sp/>(scan.min_snr/(scan.dtec_mdev<sp/>+<sp/>dtec_nom))<sp/>)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>score<sp/>&gt;<sp/>best_score:</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_score<sp/>=<sp/>score</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_scan<sp/>=<sp/>scan</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#collect<sp/>the<sp/>best<sp/>scans<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>best_scan<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_scans_collected<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selected_scans.append(best_scan)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sublist.remove(best_scan)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>selected_scans</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacevpal_1_1ffres2pcp__lib_1a9f03081a02f1a4b4887a1337925d2469" kindref="member">generate_pc_phases</ref>(config_obj,<sp/>report_data_obj=None):</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>main<sp/>function<sp/>for<sp/>ffres2pcp<sp/>to<sp/>generate<sp/>the<sp/>pc_phase<sp/>corrections<sp/>for<sp/>each<sp/>station-pol<sp/>(not<sp/>including<sp/>the<sp/>apriori<sp/>pc_phases)</highlight></codeline>
<codeline lineno="468"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>this<sp/>function<sp/>does:</highlight></codeline>
<codeline lineno="469"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#(1)<sp/>batch<sp/>fourfits<sp/>all<sp/>of<sp/>the<sp/>available<sp/>scans/baselines</highlight></codeline>
<codeline lineno="470"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#(2)<sp/>combines<sp/>the<sp/>generated<sp/>fringe<sp/>files<sp/>into<sp/>collections</highlight></codeline>
<codeline lineno="471"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#(3)<sp/>applies<sp/>some<sp/>selection<sp/>critera<sp/>to<sp/>the<sp/>collections<sp/>to<sp/>generate<sp/>a<sp/>list<sp/>of<sp/>scan<sp/>collections<sp/>for<sp/>each<sp/>station</highlight></codeline>
<codeline lineno="472"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#(4)<sp/>extracts<sp/>the<sp/>pc_phases<sp/>for<sp/>each<sp/>individual<sp/>station<sp/>from<sp/>the<sp/>selected<sp/>scans</highlight></codeline>
<codeline lineno="473"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#(5)<sp/>merges<sp/>the<sp/>reference<sp/>station<sp/>pc_phases<sp/>(from<sp/>all<sp/>baselines/stations)</highlight></codeline>
<codeline lineno="474"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#(6)<sp/>applies<sp/>sigma<sp/>cut<sp/>to<sp/>phase<sp/>correction<sp/>data</highlight></codeline>
<codeline lineno="475"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#(7)<sp/>returns<sp/>a<sp/>dictionary<sp/>of<sp/>SingleStationPCPhases<sp/>indexed<sp/>by<sp/>(station,pol)<sp/>tuples<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_dir<sp/>=<sp/>config_obj.exp_directory</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>netref_station<sp/>=<sp/>config_obj.network_reference_station</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>netref_pol<sp/>=<sp/>config_obj.network_reference_station_pol</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>target_stations<sp/>=<sp/>config_obj.target_stations</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>control_file_path<sp/>=<sp/>os.path.abspath(<sp/>config_obj.control_file<sp/>)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>ffres2pcp_logger.info(</highlight><highlight class="stringliteral">&quot;generating<sp/>pc_phases<sp/>for<sp/>exp_dir:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>exp_dir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>using<sp/>network<sp/>reference<sp/>station:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>netref_station<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>target<sp/>stations:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>target_stations)</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>ffres2pcp_logger.info(</highlight><highlight class="stringliteral">&quot;initial<sp/>control<sp/>file<sp/>is:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>control_file_path)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#force<sp/>all<sp/>fringe<sp/>files<sp/>generated<sp/>to<sp/>save<sp/>the<sp/>control<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#information<sp/>in<sp/>the<sp/>type_222<sp/>records</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>set_commands<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;set<sp/>gen_cf_record<sp/>true&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>min_snr<sp/>=<sp/>config_obj.min_snr</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>max_snr<sp/>=<sp/>config_obj.max_snr</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>verbosity<sp/>=<sp/>config_obj.verbosity</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>valid_qcodes<sp/>=<sp/>[<sp/>x<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(range(config_obj.min_qcode,<sp/>10))<sp/>]</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>num_proc<sp/>=<sp/>config_obj.num_proc</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>config_obj.start_scan_limit</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>stop<sp/>=<sp/>config_obj.stop_scan_limit</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>netref_baselines_only<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>only_complete_blc<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>max_num_scans<sp/>=<sp/>config_obj.max_number_to_select</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>dtec_nom<sp/>=<sp/>config_obj.dtec_nominal_error</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>dtec_tolerance<sp/>=<sp/>config_obj.dtec_tolerance</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>pol_products<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>config_obj.mode<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;VGOS&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pol_products=[</highlight><highlight class="stringliteral">&apos;XX&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;YY&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;XY&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;YX&apos;</highlight><highlight class="normal">]<sp/></highlight><highlight class="comment">#default,<sp/>vgos<sp/>pol<sp/>products</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>only_complete_blc<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>config_obj.mode<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;MIXED_MODE&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pol_products=[</highlight><highlight class="stringliteral">&apos;RX&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;RY&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;XR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;YR&apos;</highlight><highlight class="normal">]<sp/><sp/></highlight><highlight class="comment">#all<sp/>possible<sp/>mixed-mode<sp/>pol<sp/>products,<sp/>but<sp/>only<sp/>2<sp/>used<sp/>per-baseline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>only_complete_blc<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>log_fourfit_processes<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>config_obj.verbosity<sp/>&gt;=3:</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_fourfit_processes<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>config_obj.mode<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;VGOS&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blc_list<sp/>=<sp/>processing.load_batch_cut_and_sort(<sp/>\</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_dir,<sp/>netref_station,<sp/>target_stations,<sp/>control_file_path,<sp/>set_commands,<sp/>min_snr,<sp/>max_snr,<sp/>\</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_qcodes,<sp/>netref_baselines_only,<sp/>num_proc,<sp/>start,<sp/>stop,<sp/>only_complete_blc,<sp/>pol_products,<sp/>frequency_group=config_obj.frequency_group,<sp/>use_progress_ticker=config_obj.use_progress_ticker,<sp/>\</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_fourfit_processes=log_fourfit_processes<sp/>\</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>config_obj.mode<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;MIXED_MODE&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blc_list<sp/>=<sp/>processing.load_batch_cut_and_sort_mixedmode(<sp/>\</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_dir,<sp/>netref_station,<sp/>target_stations,<sp/>control_file_path,<sp/>set_commands,<sp/>min_snr,<sp/>max_snr,<sp/>\</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_qcodes,<sp/>netref_baselines_only,<sp/>num_proc,<sp/>start,<sp/>stop,<sp/>only_complete_blc,<sp/>pol_products,<sp/>frequency_group=config_obj.frequency_group,<sp/>use_progress_ticker=config_obj.use_progress_ticker,<sp/>\</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_fourfit_processes=log_fourfit_processes<sp/>\</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>report_data_obj<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>report_data_obj.all_blc<sp/>=<sp/>blc_list</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#get<sp/>all<sp/>the<sp/>channel/frequency_tuples<sp/>we&apos;ve<sp/>see<sp/>(better<sp/>be<sp/>fixed<sp/>throughout<sp/>the<sp/>session)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chan_freqs<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>n<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(range(0,<sp/>len(blc_list))):<sp/></highlight><highlight class="comment">#this<sp/>is<sp/>a<sp/>crummy<sp/>work<sp/>around<sp/>to<sp/>make<sp/>sure<sp/>we<sp/>get<sp/>all<sp/>the<sp/>channels<sp/>available<sp/>(even<sp/>if<sp/>some<sp/>stations<sp/>have<sp/>channels<sp/>deleted)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(blc_list)<sp/>&gt;<sp/>n:</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>m<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(range(0,<sp/>len(blc_list[n].fringe_objects))):</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch_freq_tups<sp/>=<sp/>(list(blc_list[n].fringe_objects.values())[m]).get_channel_frequency_tuples()</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>ch_freq_tups:</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chan_freqs[x[0]]<sp/>=<sp/>x[2]</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>report_data_obj.channel_freqs<sp/>=<sp/>chan_freqs</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#check<sp/>that<sp/>we<sp/>got<sp/>the<sp/>proper<sp/>number<sp/>of<sp/>channels<sp/>for<sp/>the<sp/>current<sp/>set-up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chan_def<sp/>=<sp/><ref refid="classvpal_1_1ffres2pcp__lib_1_1DefaultChannelDefines" kindref="compound">DefaultChannelDefines</ref>()</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_chans<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>config_obj.mode<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;VGOS&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_chans<sp/>=<sp/>len(chan_def.vgos)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>config_obj.mode<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;MIXED_MODE&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>config_obj.frequency_group<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_chans<sp/>=<sp/>len(chan_def.legacy_x)</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>config_obj.frequency_group<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;S&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_chans<sp/>=<sp/>len(chan_def.legacy_s)</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(report_data_obj.channel_freqs)<sp/>&lt;<sp/>n_chans:</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#didn&apos;t<sp/>locate<sp/>the<sp/>proper<sp/>number<sp/>of<sp/>channels!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ffres2pcp_logger.error(</highlight><highlight class="stringliteral">&quot;Error,<sp/>did<sp/>not<sp/>locate<sp/>the<sp/>proper<sp/>number<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>str(n_chans)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>of<sp/>channel<sp/>defintions,<sp/>only<sp/>found:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str(<sp/>len(report_data_obj.channel_freqs)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#TODO<sp/>FIXME:<sp/>We<sp/>need<sp/>to<sp/>check<sp/>for<sp/>dTEC<sp/>closure<sp/>when<sp/>selecting<sp/>scans<sp/>to<sp/>use...if<sp/>there<sp/>is<sp/>a<sp/>non-closing<sp/>triangle,<sp/>when<sp/>we<sp/>should<sp/>eliminate<sp/>that<sp/>scan<sp/>from<sp/>consideration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#sblc_list<sp/>=<sp/>processing.group_baseline_collections_by_scan(blc_list)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#for<sp/>sblc<sp/>in<sp/>sblc_list:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#select<sp/>useable<sp/>baseline<sp/>collections<sp/>for<sp/>each<sp/>station<sp/>and<sp/>generate<sp/>the<sp/>pc_phases<sp/>corrections<sp/>from<sp/>them,<sp/>then<sp/>merge<sp/>all<sp/>derived<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>all_station_pc_phases<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>target<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>target_stations:</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blc_subset<sp/>=<sp/><ref refid="namespacevpal_1_1ffres2pcp__lib_1afe33d9aa7177c071d1dd27f7ee26a18f" kindref="member">select_collection_subset</ref>(blc_list,<sp/>target,<sp/>netref_station,<sp/>dtec_nom,<sp/>max_num_scans)</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_phases<sp/>=<sp/><ref refid="namespacevpal_1_1ffres2pcp__lib_1a3b780e99a0cea6d46d4fb9a92c49fa50" kindref="member">generate_station_phase_corrections</ref>(blc_subset,<sp/>target,<sp/>netref_station,<sp/>dtec_tolerance,<sp/>netref_pol,<sp/>config_obj.channel_discard_tolerance,<sp/>config_obj.nchannel_discard_threshold)</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key,<sp/>val<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(pc_phases.items()):</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>all_station_pc_phases:</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_station_pc_phases[key].<ref refid="fourmer_8c_1a6ddc8dfb244986f7b35b0c290c866488" kindref="member">merge</ref>(val)</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_station_pc_phases[key]<sp/>=<sp/>val</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#apply<sp/>sigma<sp/>cut<sp/>factor<sp/>if<sp/>it<sp/>is<sp/>non-zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>config_obj.sigma_cut_factor<sp/>!=<sp/>0.0:</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>pc_phases<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(all_station_pc_phases.values()):</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc_phases.apply_sigma_cut(config_obj.sigma_cut_factor)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#look<sp/>over<sp/>all<sp/>station<sp/>pc_phases<sp/>object<sp/>and<sp/>determine<sp/>if<sp/>any<sp/>are<sp/>empty,<sp/>and<sp/>issue<sp/>warning/log<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>stpcp<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(all_station_pc_phases.values()):</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>stpcp.is_empty()<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ffres2pcp_logger.warning(</highlight><highlight class="stringliteral">&quot;No<sp/>new<sp/>pc_phases<sp/>generated<sp/>for<sp/>station:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>stpcp.station_id<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>pol:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>stpcp.pol)</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>all_station_pc_phases</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="comment">#<sp/>def<sp/>get_apriori_pc_phases(control_filename,<sp/>target_stations,<sp/>network_reference_station,<sp/>network_reference_station_pol=&apos;X&apos;,<sp/>frequency_group=&apos;X&apos;):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacevpal_1_1ffres2pcp__lib_1a2914c2633e3fa6c99ca4a07b5fa9ac9c" kindref="member">get_apriori_pc_phases</ref>(ffres2pcp_config):</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>parse<sp/>the<sp/>control<sp/>file<sp/>and<sp/>get<sp/>the<sp/>(a-priori)<sp/>pc_phases<sp/>which<sp/>are<sp/>already<sp/>present<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>control_filename<sp/>=<sp/>ffres2pcp_config.control_file</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>ffres2pcp_config.mode</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>network_reference_station<sp/>=<sp/>ffres2pcp_config.network_reference_station</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>frequency_group<sp/>=<sp/>ffres2pcp_config.frequency_group</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>target_stations<sp/>=<sp/>ffres2pcp_config.target_stations</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#vgos<sp/>default:<sp/>network_reference_station_pol=&apos;X&apos;<sp/>and<sp/>frequency_group=&apos;X&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#for<sp/>mixed<sp/>mode:<sp/>network_reference_station_pol=&apos;R&apos;<sp/>and<sp/>frequency_group<sp/>=<sp/>&apos;X&apos;<sp/>or<sp/>&apos;S&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#returns<sp/>a<sp/>dictionary<sp/>of<sp/>SingleStationPCPhases<sp/>indexed<sp/>by<sp/>station-pol<sp/>pairs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>apriori_pcp_list<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#vgos<sp/>and<sp/>s/x<sp/>channel<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>chan_def<sp/>=<sp/><ref refid="classvpal_1_1ffres2pcp__lib_1_1DefaultChannelDefines" kindref="compound">DefaultChannelDefines</ref>()</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>channels<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>mode<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;VGOS&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels<sp/>=<sp/>chan_def.vgos</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>mode<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;MIXED_MODE&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>frequency_group<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels<sp/>=<sp/>chan_def.legacy_x</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>frequency_group<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;S&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels<sp/>=<sp/>chan_def.legacy_s</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>mode<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;VGOS&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#extract<sp/>the<sp/>apriori<sp/>pc_phases<sp/>for<sp/>the<sp/>reference<sp/>station<sp/>(only<sp/>if<sp/>we<sp/>are<sp/>in<sp/>vgos<sp/>mode)<sp/>from<sp/>the<sp/>original<sp/>control<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#mixed<sp/>mode<sp/>reference<sp/>station<sp/>is<sp/>a<sp/>legacy<sp/>station<sp/>with<sp/>only<sp/>one<sp/>polarization<sp/>(we<sp/>do<sp/>not<sp/>adjust<sp/>any<sp/>pc_phases<sp/>for<sp/>it)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bl_string<sp/>=<sp/>network_reference_station<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;?&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cblock<sp/>=<sp/>ffcontrol.get_control_block(control_filename,<sp/>bl_string,<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/>frequency_group,<sp/>0)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_pc_phase_x<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_pc_phase_y<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>channels:</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>ffcontrol.get_fcode_index(ch)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#nominally<sp/>the<sp/>reference<sp/>station<sp/>x-pol<sp/>shouldn&apos;t<sp/>have<sp/>any<sp/>non-zero<sp/>a<sp/>priori<sp/>pc_phases,<sp/>but<sp/>this<sp/>can<sp/>happen<sp/>(see<sp/>VGOS<sp/>memo<sp/>#51<sp/>for<sp/>reason<sp/>why)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_pc_phase_x[ch]<sp/>=<sp/>cblock.pc_phase[i][0].ref</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_pc_phase_y[ch]<sp/>=<sp/>cblock.pc_phase[i][1].ref</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_pc_x<sp/>=<sp/><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases" kindref="compound">SingleStationPCPhases</ref>(network_reference_station,<sp/></highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_pc_x.add_pc_phases(</highlight><highlight class="stringliteral">&quot;a-priori&quot;</highlight><highlight class="normal">,<sp/>bl_string,<sp/></highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal">,<sp/>ref_pc_phase_x)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refstx<sp/>=<sp/>network_reference_station<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;X&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apriori_pcp_list[refstx]<sp/>=<sp/>ref_pc_x</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_pc_y<sp/>=<sp/><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases" kindref="compound">SingleStationPCPhases</ref>(network_reference_station,<sp/></highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_pc_y.add_pc_phases(</highlight><highlight class="stringliteral">&quot;a-priori&quot;</highlight><highlight class="normal">,<sp/>bl_string,<sp/></highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal">,<sp/>ref_pc_phase_y)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refsty<sp/>=<sp/>network_reference_station<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;Y&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apriori_pcp_list[refsty]<sp/>=<sp/>ref_pc_y</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#now<sp/>for<sp/>other<sp/>stations,<sp/>both<sp/>X/Y<sp/>pol,<sp/>extract<sp/>the<sp/>pc<sp/>phases<sp/>from<sp/>the<sp/>control<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>st<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>target_stations:</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bl_string<sp/>=<sp/>network_reference_station<sp/>+<sp/>st</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#print(control_filename,<sp/>&quot;<sp/>and<sp/>&quot;,<sp/>bl_string,<sp/>&quot;<sp/>and<sp/>&quot;,<sp/>frequency_group)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cblock<sp/>=<sp/>ffcontrol.get_control_block(control_filename,<sp/>bl_string,<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/>frequency_group,<sp/>0)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_phase_x<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_phase_y<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>channels:</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>ffcontrol.get_fcode_index(ch)</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_phase_x[ch]<sp/>=<sp/>cblock.pc_phase[i][0].rem</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_phase_y[ch]<sp/>=<sp/>cblock.pc_phase[i][1].rem</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_x<sp/>=<sp/><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases" kindref="compound">SingleStationPCPhases</ref>(st,<sp/></highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_x.add_pc_phases(</highlight><highlight class="stringliteral">&quot;a-priori&quot;</highlight><highlight class="normal">,<sp/>bl_string,<sp/></highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal">,<sp/>rem_pc_phase_x)</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_y<sp/>=<sp/><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases" kindref="compound">SingleStationPCPhases</ref>(st,<sp/></highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_y.add_pc_phases(</highlight><highlight class="stringliteral">&quot;a-priori&quot;</highlight><highlight class="normal">,<sp/>bl_string,<sp/></highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal">,<sp/>rem_pc_phase_y)</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remstx<sp/>=<sp/>st<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;X&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remsty<sp/>=<sp/>st<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;Y&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apriori_pcp_list[remstx]<sp/>=<sp/>rem_pc_x</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apriori_pcp_list[remsty]<sp/>=<sp/>rem_pc_y</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>mode<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;MIXED_MODE&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#for<sp/>the<sp/>vgos<sp/>stations<sp/>X/Y<sp/>pol,<sp/>extract<sp/>the<sp/>pc<sp/>phases<sp/>from<sp/>the<sp/>control<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>st<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>target_stations:</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bl_string<sp/>=<sp/>network_reference_station<sp/>+<sp/>st</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cblock<sp/>=<sp/>ffcontrol.get_control_block(control_filename,<sp/>bl_string,<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/>frequency_group,<sp/>0)</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_phase_x<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_phase_y<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>channels:</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>ffcontrol.get_fcode_index(ch)</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_phase_x[ch]<sp/>=<sp/>cblock.pc_phase[i][0].rem</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_phase_y[ch]<sp/>=<sp/>cblock.pc_phase[i][1].rem</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_x<sp/>=<sp/><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases" kindref="compound">SingleStationPCPhases</ref>(st,<sp/></highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_x.add_pc_phases(</highlight><highlight class="stringliteral">&quot;a-priori&quot;</highlight><highlight class="normal">,<sp/>bl_string,<sp/></highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal">,<sp/>rem_pc_phase_x)</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_y<sp/>=<sp/><ref refid="classvpal_1_1ffres2pcp__lib_1_1SingleStationPCPhases" kindref="compound">SingleStationPCPhases</ref>(st,<sp/></highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_y.add_pc_phases(</highlight><highlight class="stringliteral">&quot;a-priori&quot;</highlight><highlight class="normal">,<sp/>bl_string,<sp/></highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal">,<sp/>rem_pc_phase_y)</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remstx<sp/>=<sp/>st<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;X&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remsty<sp/>=<sp/>st<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;Y&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apriori_pcp_list[remstx]<sp/>=<sp/>rem_pc_x</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apriori_pcp_list[remsty]<sp/>=<sp/>rem_pc_y</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apriori_pcp_list</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment">#<sp/>def<sp/>get_apriori_pc_phases(control_filename,<sp/>target_stations,<sp/>network_reference_station,<sp/>network_reference_station_pol=&apos;X&apos;,<sp/>frequency_group=&apos;X&apos;):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;<sp/>parse<sp/>the<sp/>control<sp/>file<sp/>and<sp/>get<sp/>the<sp/>(a-priori)<sp/>pc_phases<sp/>which<sp/>are<sp/>already<sp/>present<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>#vgos<sp/>default:<sp/>network_reference_station_pol=&apos;X&apos;<sp/>and<sp/>frequency_group=&apos;X&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>#for<sp/>mixed<sp/>mode:<sp/>network_reference_station_pol=&apos;R&apos;<sp/>and<sp/>frequency_group<sp/>=<sp/>&apos;X&apos;<sp/>or<sp/>&apos;S&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>#returns<sp/>a<sp/>dictionary<sp/>of<sp/>SingleStationPCPhases<sp/>indexed<sp/>by<sp/>station-pol<sp/>pairs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>apriori_pcp_list<sp/>=<sp/>dict()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>#vgos<sp/>and<sp/>s/x<sp/>channel<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>chan_def<sp/>=<sp/>DefaultChannelDefines()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>channels<sp/>=<sp/>&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>if<sp/>network_reference_station_pol<sp/>==<sp/>&apos;X&apos;<sp/>and<sp/>frequency_group<sp/>==<sp/>&apos;X&apos;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels<sp/>=<sp/>chan_def.vgos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>if<sp/>network_reference_station_pol<sp/>==<sp/>&apos;R&apos;<sp/>and<sp/>frequency_group<sp/>==<sp/>&apos;X&apos;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels<sp/>=<sp/>chan_def.legacy_x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>if<sp/>network_reference_station_pol<sp/>==<sp/>&apos;R&apos;<sp/>and<sp/>frequency_group<sp/>==<sp/>&apos;S&apos;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels<sp/>=<sp/>chan_def.legacy_s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>if<sp/>network_reference_station_pol<sp/>==<sp/>&apos;X&apos;<sp/>and<sp/>frequency_group<sp/>==<sp/>&apos;X&apos;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>extract<sp/>the<sp/>apriori<sp/>pc_phases_y<sp/>for<sp/>the<sp/>reference<sp/>station<sp/>(only<sp/>if<sp/>we<sp/>are<sp/>in<sp/>vgos<sp/>mode)<sp/>from<sp/>the<sp/>original<sp/>control<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bl_string<sp/>=<sp/>network_reference_station<sp/>+<sp/>&apos;?&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cblock<sp/>=<sp/>ffcontrol.get_control_block(control_filename,<sp/>bl_string,<sp/>&apos;<sp/>&apos;,<sp/>frequency_group,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_pc_phase_y<sp/>=<sp/>dict()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>ch<sp/>in<sp/>channels:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>ffcontrol.get_fcode_index(ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_pc_phase_y[ch]<sp/>=<sp/>cblock.pc_phase[i][1].ref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_pc_y<sp/>=<sp/>SingleStationPCPhases(network_reference_station,<sp/>&apos;Y&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_pc_y.add_pc_phases(&quot;a-priori&quot;,<sp/>bl_string,<sp/>&apos;Y&apos;,<sp/>ref_pc_phase_y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refsty<sp/>=<sp/>network_reference_station<sp/>+<sp/>&quot;_&quot;<sp/>+<sp/>&quot;Y&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apriori_pcp_list[refsty]<sp/>=<sp/>ref_pc_y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>#<sp/>if<sp/>network_reference_station_pol<sp/>==<sp/>&apos;R&apos;<sp/>and<sp/>(frequency_group<sp/>==<sp/>&apos;X&apos;<sp/>or<sp/>frequency_group<sp/>==<sp/>&apos;S&apos;):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/>#<sp/>extract<sp/>the<sp/>apriori<sp/>pc_phases_y<sp/>for<sp/>the<sp/>reference<sp/>station<sp/>(only<sp/>if<sp/>we<sp/>are<sp/>in<sp/>vgos<sp/>mode)<sp/>from<sp/>the<sp/>original<sp/>control<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/>bl_string<sp/>=<sp/>network_reference_station<sp/>+<sp/>&apos;?&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/>cblock<sp/>=<sp/>ffcontrol.get_control_block(control_filename,<sp/>bl_string,<sp/>&apos;<sp/>&apos;,<sp/>frequency_group,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/>ref_pc_phase_r<sp/>=<sp/>dict()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/>for<sp/>ch<sp/>in<sp/>channels:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>ffcontrol.get_fcode_index(ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_pc_phase_r[ch]<sp/>=<sp/>cblock.pc_phase[i][1].ref<sp/>#from<sp/>control.h:<sp/>(L/R<sp/>=<sp/>X/Y),<sp/>indexed<sp/>as<sp/>0/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/>ref_pc_r<sp/>=<sp/>SingleStationPCPhases(network_reference_station,<sp/>&apos;R&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/>ref_pc_r.add_pc_phases(&quot;a-priori&quot;,<sp/>bl_string,<sp/>&apos;R&apos;,<sp/>ref_pc_phase_r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/>refstr<sp/>=<sp/>network_reference_station<sp/>+<sp/>&quot;_&quot;<sp/>+<sp/>&quot;R&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/>apriori_pcp_list[refstr]<sp/>=<sp/>ref_pc_r</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>#now<sp/>for<sp/>other<sp/>stations<sp/>X/Y<sp/>pol,<sp/>extract<sp/>the<sp/>pc<sp/>phases<sp/>from<sp/>the<sp/>control<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>for<sp/>st<sp/>in<sp/>target_stations:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bl_string<sp/>=<sp/>network_reference_station<sp/>+<sp/>st</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cblock<sp/>=<sp/>ffcontrol.get_control_block(control_filename,<sp/>bl_string,<sp/>&apos;<sp/>&apos;,<sp/>&apos;X&apos;,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_phase_x<sp/>=<sp/>dict()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_phase_y<sp/>=<sp/>dict()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>ch<sp/>in<sp/>channels:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>ffcontrol.get_fcode_index(ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_phase_x[ch]<sp/>=<sp/>cblock.pc_phase[i][0].rem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_phase_y[ch]<sp/>=<sp/>cblock.pc_phase[i][1].rem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_x<sp/>=<sp/>SingleStationPCPhases(st,<sp/>&apos;X&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_x.add_pc_phases(&quot;a-priori&quot;,<sp/>bl_string,<sp/>&apos;X&apos;,<sp/>rem_pc_phase_x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_y<sp/>=<sp/>SingleStationPCPhases(st,<sp/>&apos;Y&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rem_pc_y.add_pc_phases(&quot;a-priori&quot;,<sp/>bl_string,<sp/>&apos;Y&apos;,<sp/>rem_pc_phase_y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remstx<sp/>=<sp/>st<sp/>+<sp/>&quot;_&quot;<sp/>+<sp/>&quot;X&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remsty<sp/>=<sp/>st<sp/>+<sp/>&quot;_&quot;<sp/>+<sp/>&quot;Y&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apriori_pcp_list[remstx]<sp/>=<sp/>rem_pc_x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apriori_pcp_list[remsty]<sp/>=<sp/>rem_pc_y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>return<sp/>apriori_pcp_list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacevpal_1_1ffres2pcp__lib_1a49b5f4e95debec18598caadaf3d52c33" kindref="member">sum_mean_pc_phases</ref>(pcp_obj_a,<sp/>pcp_obj_b):</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;sums<sp/>the<sp/>mean<sp/>phases<sp/>of<sp/>the<sp/>two<sp/>SingleStationPCPhases<sp/>objects<sp/>and</highlight></codeline>
<codeline lineno="752"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>returns<sp/>a<sp/>channel<sp/>indexed<sp/>dictionary<sp/>of<sp/>the<sp/>summed<sp/>values<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>ma<sp/>=<sp/>pcp_obj_a.get_mean_phases()</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>mb<sp/>=<sp/>pcp_obj_b.get_mean_phases()</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_a_set<sp/>=<sp/>set(<sp/>ma.keys()<sp/>)</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_b_set<sp/>=<sp/>set(<sp/>mb.keys()<sp/>)</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>channels<sp/>=<sp/>ch_a_set.union(ch_b_set)</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>summed_pcp<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>channels:</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>0.0</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>0.0</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>ma:</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>ma[ch]</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>mb:</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>mb[ch]</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>summed_pcp[ch]<sp/>=<sp/>a+b</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>summed_pcp</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacevpal_1_1ffres2pcp__lib_1a7a733f4bb7af241fad3856b166640e52" kindref="member">channel_sort_key</ref>(ch_val_pair):</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;sort<sp/>channel<sp/>value<sp/>pairs<sp/>in<sp/>channel<sp/>order&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>chans<sp/>=<sp/>list(</highlight><highlight class="stringliteral">&apos;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$%&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#locate<sp/>index<sp/>of<sp/>a<sp/>and<sp/>b<sp/>in<sp/>all<sp/>channel<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>a_index<sp/>=<sp/>chans.index(<sp/>ch_val_pair[0]<sp/>)</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_index</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacevpal_1_1ffres2pcp__lib_1a45476d98f4404467c934a051e9a86e47" kindref="member">compute_final_pcphases</ref>(apriori_pc_phases,<sp/>generated_pc_phases):</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;given<sp/>both<sp/>the<sp/>a-priori<sp/>and<sp/>generated<sp/>SingleStationPCPhases,<sp/>sum<sp/>and<sp/>round<sp/>their<sp/>values</highlight></codeline>
<codeline lineno="789"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>to<sp/>obtain<sp/>the<sp/>corrections<sp/>necessary<sp/>for<sp/>the<sp/>control<sp/>file<sp/>output&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#first<sp/>determine<sp/>all<sp/>of<sp/>the<sp/>unique<sp/>station-pol<sp/>pairs<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>ap_keys<sp/>=<sp/>list(apriori_pc_phases.keys())</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>gen_keys<sp/>=<sp/>list(generated_pc_phases.keys())</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>all_keys<sp/>=<sp/>set(ap_keys).union(<sp/>set(gen_keys)<sp/>)</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>final_pc_values<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>all_keys:</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>apriori_pc_phases<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>generated_pc_phases:</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>final_pc_values[key]<sp/>=<sp/><ref refid="namespacevpal_1_1ffres2pcp__lib_1a49b5f4e95debec18598caadaf3d52c33" kindref="member">sum_mean_pc_phases</ref>(apriori_pc_phases[key],<sp/>generated_pc_phases[key])</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>apriori_pc_phases<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>generated_pc_phases:</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>final_pc_values[key]<sp/>=<sp/>apriori_pc_phases[key].get_mean_phases()</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>apriori_pc_phases<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>generated_pc_phases:</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>final_pc_values[key]<sp/>=<sp/>generated_pc_phases[key].get_mean_phases()</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>all_keys,<sp/>final_pc_values</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacevpal_1_1ffres2pcp__lib_1a78de69d567ade8910fc0336696303d5d" kindref="member">construct_control_file_lines</ref>(apriori_pc_phases,<sp/>generated_pc_phases,<sp/>frequency_group=&apos;X&apos;,<sp/>mode=&apos;VGOS&apos;):</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;given<sp/>both<sp/>the<sp/>a-priori<sp/>and<sp/>generated<sp/>SingleStationPCPhases,<sp/>sum<sp/>and<sp/>round<sp/>their<sp/>values</highlight></codeline>
<codeline lineno="816"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>to<sp/>obtain<sp/>the<sp/>corrections<sp/>necessary<sp/>for<sp/>the<sp/>control<sp/>file<sp/>output,<sp/>then<sp/>output<sp/>formatted<sp/>lines<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>all_keys,<sp/>final_pc_values<sp/>=<sp/><ref refid="namespacevpal_1_1ffres2pcp__lib_1a45476d98f4404467c934a051e9a86e47" kindref="member">compute_final_pcphases</ref>(apriori_pc_phases,<sp/>generated_pc_phases)</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#first<sp/>determine<sp/>all<sp/>of<sp/>the<sp/>unique<sp/>station-pol<sp/>pairs<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>ap_keys<sp/>=<sp/>list(apriori_pc_phases.keys())</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>gen_keys<sp/>=<sp/>list(generated_pc_phases.keys())</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>all_keys<sp/>=<sp/>set(ap_keys).union(<sp/>set(gen_keys)<sp/>)</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>all_pols<sp/>=<sp/>[</highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>pc_keyword<sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;X&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;<sp/><sp/>pc_phases_x<sp/>&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Y&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;<sp/><sp/>pc_phases_y<sp/>&apos;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>all_stations<sp/>=<sp/>set()</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>station_select<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>all_keys:</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>st<sp/>=<sp/>key[0]</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_stations.add(st)</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>mode<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;VGOS&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>station_select[st]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;if<sp/>station<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>st<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>mode<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;MIXED_MODE&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>station_select[st]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;if<sp/>station<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>st<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>f_group<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>frequency_group<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>cf_lines<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>st<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>sorted(list(all_stations)):</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>station_lines<sp/>=<sp/>station_select[st]</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>p<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>all_pols:</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stpol<sp/>=<sp/>st<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>p</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>stpol<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>all_keys:</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcp_line<sp/>=<sp/>pc_keyword[p]</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stpolpc<sp/>=<sp/>final_pc_values[stpol]</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch_val_pair_list<sp/>=<sp/>list(stpolpc.items())</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch_val_pair_list.sort(key=channel_sort_key)</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chans<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcp_values<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ch,<sp/>val<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>ch_val_pair_list:</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chans<sp/>+=<sp/>ch</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcp_values<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(<sp/>round(val,1)<sp/>)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcp_line<sp/>+=<sp/><sp/>chans<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>pcp_values<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>station_lines<sp/>+=<sp/>pcp_line</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>count<sp/>!=<sp/>0:</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf_lines<sp/>+=<sp/>station_lines</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf_lines<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cf_lines</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacevpal_1_1ffres2pcp__lib_1a48ff7228c7cbb76971a30659d53ccdca" kindref="member">generate_ffres2pcp_control_file</ref>(config_obj,<sp/>output_control_filename):</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;create<sp/>the<sp/>control<sp/>file<sp/>with<sp/>the<sp/>necessary<sp/>pc_phases<sp/>correction<sp/>lines<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#report<sp/>data<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>report_data<sp/>=<sp/><ref refid="classvpal_1_1ffres2pcp__lib_1_1ExperimentReportData" kindref="compound">ExperimentReportData</ref>()</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>report_data.config_obj<sp/>=<sp/>config_obj</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#retrieve<sp/>pre-existing<sp/>pc_phases<sp/>from<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#apriori_pcp<sp/>=<sp/>get_apriori_pc_phases(<sp/>os.path.abspath(config_obj.control_file),<sp/>config_obj.target_stations,<sp/>config_obj.network_reference_station,<sp/>config_obj.network_reference_station_pol,<sp/>config_obj.frequency_group)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>apriori_pcp<sp/>=<sp/><ref refid="namespacevpal_1_1ffres2pcp__lib_1a2914c2633e3fa6c99ca4a07b5fa9ac9c" kindref="member">get_apriori_pc_phases</ref>(config_obj)</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>report_data.apriori_sspcp<sp/>=<sp/>apriori_pcp</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#generate<sp/>station<sp/>pc_phases<sp/>for<sp/>this<sp/>experiment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>all_station_pcp<sp/>=<sp/><ref refid="namespacevpal_1_1ffres2pcp__lib_1a9f03081a02f1a4b4887a1337925d2469" kindref="member">generate_pc_phases</ref>(config_obj,<sp/>report_data)</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>report_data.generated_sspcp<sp/>=<sp/>all_station_pcp</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#create<sp/>the<sp/>formatted<sp/>control<sp/>file<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>cf_lines<sp/>=<sp/><ref refid="namespacevpal_1_1ffres2pcp__lib_1a78de69d567ade8910fc0336696303d5d" kindref="member">construct_control_file_lines</ref>(apriori_pcp,<sp/>all_station_pcp,<sp/>config_obj.frequency_group,<sp/>config_obj.mode)</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#remove<sp/>previous<sp/>pc_phases<sp/>lines<sp/>from<sp/>control<sp/>file,<sp/>and<sp/>update<sp/>with<sp/>new<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>string_list<sp/>=<sp/>[</highlight><highlight class="stringliteral">&apos;pc_phases_&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>string_list.append(</highlight><highlight class="stringliteral">&apos;pc_delay_&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>string_list.append(</highlight><highlight class="stringliteral">&apos;pc_phase_offset_&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>ffcontrol.remove_lines_and_append_control_file(os.path.abspath(config_obj.control_file),<sp/>output_control_filename,<sp/>cf_lines,<sp/>string_list)</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#generate<sp/>a<sp/>report<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>date_string<sp/>=<sp/>datetime.datetime.now().strftime(</highlight><highlight class="stringliteral">&apos;%b-%d-%I%M%p-%G&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>report_data.create_report(</highlight><highlight class="stringliteral">&quot;./ffres2pcp-report-&quot;</highlight><highlight class="normal"><sp/>+<sp/>date_string<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.json&quot;</highlight><highlight class="normal">)</highlight></codeline>
    </programlisting>
    <location file="/home/barrettj/work/projects/hops-git/source/python_src/vpal_module/vpal/ffres2pcp_lib.py"/>
  </compounddef>
</doxygen>
