<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="pcc__delay__fitting_8py" kind="file" language="Python">
    <compoundname>pcc_delay_fitting.py</compoundname>
    <innerclass refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter" prot="public">vpal::pcc_delay_fitting::BandDelayFitter</innerclass>
    <innerclass refid="classvpal_1_1pcc__delay__fitting_1_1BasinhoppingStep" prot="public">vpal::pcc_delay_fitting::BasinhoppingStep</innerclass>
    <innerclass refid="classvpal_1_1pcc__delay__fitting_1_1DelayFitResults" prot="public">vpal::pcc_delay_fitting::DelayFitResults</innerclass>
    <innerclass refid="classvpal_1_1pcc__delay__fitting_1_1PhasorFitData" prot="public">vpal::pcc_delay_fitting::PhasorFitData</innerclass>
    <innernamespace refid="namespacevpal_1_1pcc__delay__fitting">vpal::pcc_delay_fitting</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacevpal_1_1pcc__delay__fitting" refkind="compound"><highlight class="stringliteral">&quot;&quot;&quot;library<sp/>to<sp/>handle<sp/>the<sp/>calculation<sp/>of<sp/>proxy-cable-calibration<sp/>delays<sp/>from<sp/>phase-cal<sp/>data<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#core<sp/>imports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>print_function</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>absolute_import</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>division</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>builtins<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>next</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>builtins<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>str</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>builtins<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>object</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>builtins<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>range</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>datetime</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>math</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>cmath</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>copy</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>logging</highlight></codeline>
<codeline lineno="19"><highlight class="normal">pcc_fit_logger<sp/>=<sp/>logging.getLogger(__name__)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.utility<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>limit_periodic_quantity_to_range</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.utility<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>minimum_angular_difference</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">#non-core<sp/>imports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>scipy.optimize</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>scipy.stats</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">PICOSECOND<sp/>=<sp/>1e-12</highlight></codeline>
<codeline lineno="30"><highlight class="normal">EPS<sp/>=<sp/>1e-15</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="classvpal_1_1pcc__delay__fitting_1_1PhasorFitData" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1pcc__delay__fitting_1_1PhasorFitData" kindref="compound">PhasorFitData</ref>(object):</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;container<sp/>class<sp/>to<sp/>work-around<sp/>scipy.optimize<sp/>requirements<sp/>on<sp/>function<sp/>args&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1pcc__delay__fitting_1_1PhasorFitData_1aeefe4ad1ad3e7102e6ebc888579476ce" kindref="member">__init__</ref>(self,<sp/>ref_freq,<sp/>freq_phasor_pair_list):</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1PhasorFitData_1a7e804f1dde9f4868425ff05937996b0f" kindref="member">reference_frequency</ref>reference_frequency<sp/>=<sp/>ref_freq</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1PhasorFitData_1a4cb6db8546d7414f761ad4f35aa235ea" kindref="member">tone_phasors</ref>tone_phasors<sp/>=<sp/>freq_phasor_pair_list</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1pcc__delay__fitting_1_1PhasorFitData_1a857adbc547c4b5f625c72b5400635b51" kindref="member">get_mean_phase</ref>(self):</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phase_list<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>fq_ph<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1PhasorFitData_1a4cb6db8546d7414f761ad4f35aa235ea" kindref="member">tone_phasors</ref>tone_phasors:</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>cmath.phase(fq_ph[1])</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phase_list.append(angle)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scipy.stats.circmean(<sp/>np.array(phase_list),<sp/>low=-1.0*math.pi,<sp/>high=math.pi)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1pcc__delay__fitting_1_1PhasorFitData_1a48b8938d31f52d955cf64a9837551f4b" kindref="member">get_phase_std</ref>(self):</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phase_list<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>fq_ph<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1PhasorFitData_1a4cb6db8546d7414f761ad4f35aa235ea" kindref="member">tone_phasors</ref>tone_phasors:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>cmath.phase(fq_ph[1])</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phase_list.append(angle)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scipy.stats.circstd(<sp/>np.array(phase_list),<sp/>high=math.pi,<sp/>low=-1.0*math.pi)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="classvpal_1_1pcc__delay__fitting_1_1DelayFitResults" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1pcc__delay__fitting_1_1DelayFitResults" kindref="compound">DelayFitResults</ref>(object):</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;container<sp/>class<sp/>to<sp/>store<sp/>the<sp/>delay-fit<sp/>results<sp/>for<sp/>a<sp/>particular<sp/>pol-band&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1pcc__delay__fitting_1_1DelayFitResults_1a8ab0b48bcc2c301129cf81acbad5cfa8" kindref="member">__init__</ref>(self,<sp/>fit_data):</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1DelayFitResults_1af4d4b682a69787f40887e656b79a328f" kindref="member">fit_data</ref>fit_data<sp/>=<sp/>fit_data<sp/></highlight><highlight class="comment">#data<sp/>to<sp/>be<sp/>fit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1DelayFitResults_1a907965aa23fe92d1af5af543b31f4c01" kindref="member">valid</ref>valid<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">#fit<sp/>success/failure<sp/>indicator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1DelayFitResults_1a6d59c2920f9eaef9c623911f6d427f57" kindref="member">delay</ref>delay<sp/>=<sp/>0<sp/></highlight><highlight class="comment">#delay<sp/>fit<sp/>to<sp/>data<sp/>(sec)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1DelayFitResults_1aaec1d0da419bae6ffc0eb8e4ec062054" kindref="member">phase_offset</ref>phase_offset<sp/>=<sp/>0<sp/></highlight><highlight class="comment">#phase<sp/>at<sp/>the<sp/>reference<sp/>frequency<sp/>(radians)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1DelayFitResults_1a32dd00864fde4038348801dd840e2487" kindref="member">model_dc_phase</ref>model_dc_phase<sp/>=<sp/>0<sp/></highlight><highlight class="comment">#phase<sp/>extrapolated<sp/>to<sp/>DC<sp/>(radians)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1DelayFitResults_1af7f395750f370391f6345e3c53651d2f" kindref="member">phase_rmse</ref>phase_rmse<sp/>=<sp/>0<sp/></highlight><highlight class="comment">#root-mean-squared<sp/>error<sp/>of<sp/>the<sp/>fit(radians)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1DelayFitResults_1a2147e3605b25ec20808a4444c7510171" kindref="member">residuals</ref>residuals<sp/>=<sp/>[]<sp/></highlight><highlight class="comment">#phase<sp/>residuals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="classvpal_1_1pcc__delay__fitting_1_1BasinhoppingStep" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1pcc__delay__fitting_1_1BasinhoppingStep" kindref="compound">BasinhoppingStep</ref>(object):</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>defines<sp/>the<sp/>stepsizes<sp/>to<sp/>be<sp/>taken<sp/>when<sp/>using<sp/>the<sp/>basin<sp/>hopping<sp/>algorithm<sp/>to<sp/>find<sp/>the<sp/>delay/phase&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1pcc__delay__fitting_1_1BasinhoppingStep_1a3d4b3042206a7a82ff544ad0130ff363" kindref="member">__init__</ref>(self,<sp/>stepsize_delay=PICOSECOND,<sp/>stepsize_phase=3.0*(math.pi/180.0)<sp/>):</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1BasinhoppingStep_1a887d69c6677a261605d7af8f11b64b07" kindref="member">delay_step</ref>delay_step<sp/>=<sp/>stepsize_delay</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1BasinhoppingStep_1ad5e43e3ee7b883cab71242e52fe6ec78" kindref="member">phase_step</ref>phase_step<sp/>=<sp/>stepsize_phase</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1pcc__delay__fitting_1_1BasinhoppingStep_1a23367ac5f30a09bd746cd6f557d1776b" kindref="member">__call__</ref>(self,<sp/>x):</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[0]<sp/>+=<sp/>np.random.uniform(-self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1BasinhoppingStep_1a887d69c6677a261605d7af8f11b64b07" kindref="member">delay_step</ref>delay_step,<sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1BasinhoppingStep_1a887d69c6677a261605d7af8f11b64b07" kindref="member">delay_step</ref>delay_step)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[1]<sp/>+=<sp/>np.random.uniform(-self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1BasinhoppingStep_1ad5e43e3ee7b883cab71242e52fe6ec78" kindref="member">phase_step</ref>phase_step,<sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1BasinhoppingStep_1ad5e43e3ee7b883cab71242e52fe6ec78" kindref="member">phase_step</ref>phase_step)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacevpal_1_1pcc__delay__fitting_1a78bd17f46cf88b8bc693aa996aeec4a6" kindref="member">calc_delay_phasor</ref>(delay,<sp/>phase_offset,<sp/>reference_frequency,<sp/>frequency):</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;compute<sp/>complex<sp/>number<sp/>associated<sp/>with<sp/>a<sp/>particular<sp/>delay/phase_offset,frequency<sp/>and<sp/>reference_frequency<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>val<sp/>=<sp/>cmath.exp(1j*(<sp/>2.0*math.pi*delay*(frequency<sp/>-<sp/>reference_frequency)<sp/>+<sp/>phase_offset)<sp/>)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter" kindref="compound">BandDelayFitter</ref>(object):</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter_1af44d5ef820f0b371ea47bd661977e220" kindref="member">__init__</ref>(self):</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter_1a0dedb8a0b4dd21f3b94bd20bb65af65f" kindref="member">basinhopping_niter</ref>basinhopping_niter<sp/>=<sp/>10</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter_1ac37060d31ac54e6091ff6a50b1a33404" kindref="member">channel_bandwidth</ref>channel_bandwidth<sp/>=<sp/>32e6</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter_1a24205adaa2e5fef1a4d0582e7c2ed2fe" kindref="member">fit_band_delay</ref>(self,<sp/>tone_phasors,<sp/>ref_frequency,<sp/>cut_threshold=0.0,<sp/>verbosity=0):</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#now<sp/>lets<sp/>fit<sp/>the<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fit_data<sp/>=<sp/><ref refid="classvpal_1_1pcc__delay__fitting_1_1PhasorFitData" kindref="compound">PhasorFitData</ref>(ref_frequency,<sp/>tone_phasors)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="classvpal_1_1pcc__delay__fitting_1_1DelayFitResults" kindref="compound">DelayFitResults</ref>(fit_data)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#if<sp/>not<sp/>more<sp/>than<sp/>1<sp/>data<sp/>point<sp/>then<sp/>do<sp/>not<sp/>try<sp/>to<sp/>fit<sp/>this<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(tone_phasors)<sp/>&lt;<sp/>2:</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.valid<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter_1a7617960ce6f4c668be7bb399fa5cff78" kindref="member">get_initial_band_delay</ref>get_initial_band_delay(fit_data.tone_phasors,<sp/>fit_data.reference_frequency)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phase_offset<sp/>=<sp/>fit_data.get_mean_phase()<sp/></highlight><highlight class="comment">#this<sp/>works<sp/>under<sp/>the<sp/>assumption<sp/>the<sp/>ref_freq<sp/>is<sp/>in<sp/>the<sp/>center<sp/>of<sp/>the<sp/>band<sp/>(true<sp/>for<sp/>now),<sp/>but<sp/>we<sp/>may<sp/>need<sp/>to<sp/>make<sp/>this<sp/>more<sp/>robust</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param<sp/>=<sp/>[delay,<sp/>phase_offset]</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stepper<sp/>=<sp/><ref refid="classvpal_1_1pcc__delay__fitting_1_1BasinhoppingStep" kindref="compound">BasinhoppingStep</ref>()</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#re-seed<sp/>the<sp/>(singleton)<sp/>random<sp/>number<sp/>generator<sp/>which<sp/>scipy.optimize<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#this<sp/>affects<sp/>the<sp/>results<sp/>on<sp/>the<sp/>~1ps<sp/>level<sp/>(less<sp/>than<sp/>our<sp/>error),<sp/>and<sp/>is<sp/>mainly<sp/>done<sp/>for<sp/>consistency/repeatability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>np.random.seed(1)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#initial<sp/>fit<sp/>is<sp/>done<sp/>using<sp/>basin-hopping<sp/>(stochastic<sp/>fitter)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>scipy.optimize.basinhopping(self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter_1a8dac4ad213fe13e8c5dd9bf0858ae764" kindref="member">fit_function1</ref>fit_function1,<sp/>param,<sp/>niter=self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter_1a0dedb8a0b4dd21f3b94bd20bb65af65f" kindref="member">basinhopping_niter</ref>basinhopping_niter,<sp/>minimizer_kwargs={</highlight><highlight class="stringliteral">&quot;method&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Nelder-Mead&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;args&quot;</highlight><highlight class="normal"><sp/>:<sp/>(fit_data,)},<sp/>take_step=stepper)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#now<sp/>try<sp/>to<sp/>strip<sp/>outliers,<sp/>which<sp/>have<sp/>residuals<sp/>which<sp/>are<sp/>larger<sp/>than<sp/>some<sp/>factor*sigma,<sp/>score</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ph_resid<sp/>=<sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter_1a97d6bd9169adb5fc6f1b5dde0870c39b" kindref="member">get_phase_residuals</ref>get_phase_residuals(fit_data,<sp/>param[0],<sp/>param[1])</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ph_resid_angles<sp/>=<sp/>[x[1]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>ph_resid]</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_cut<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>n<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(range(0,len(ph_resid_angles))):</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>n<sp/>&lt;<sp/>len(fit_data.tone_phasors):</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(ph_resid_angles[n])<sp/>&lt;<sp/>cut_threshold*math.sqrt(fit_data.tone_phasors[n][2].get_phase_variance())<sp/>)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>(cut_threshold<sp/>==<sp/>0.0):</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fit_data.tone_phasors[n][3]<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fit_data.tone_phasors[n][3]<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">#flip<sp/>use-flag<sp/>to<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_cut<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>scipy.optimize.basinhopping(self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter_1a8dac4ad213fe13e8c5dd9bf0858ae764" kindref="member">fit_function1</ref>fit_function1,<sp/>param,<sp/>niter=self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter_1a0dedb8a0b4dd21f3b94bd20bb65af65f" kindref="member">basinhopping_niter</ref>basinhopping_niter,<sp/>minimizer_kwargs={</highlight><highlight class="stringliteral">&quot;method&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Nelder-Mead&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;args&quot;</highlight><highlight class="normal"><sp/>:<sp/>(fit_data,)},<sp/>take_step=stepper)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#then,<sp/>a<sp/>refined<sp/>estimate<sp/>is<sp/>done<sp/>locally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param<sp/>=<sp/>ret.x</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display_fit_info<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>verbosity<sp/>&gt;=<sp/>3:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display_fit_info<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#use<sp/>Nelder-Mead<sp/>instead<sp/>of<sp/>CG<sp/>as<sp/>it<sp/>is<sp/>more<sp/>stable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>init_simplex<sp/>=<sp/>[]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>init_simplex.append([param[0],<sp/>param[1]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>init_simplex.append([param[0]<sp/>+<sp/>stepper.delay_step*0.1,<sp/>param[1]<sp/>])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>init_simplex.append([param[0],<sp/>param[1]<sp/>+<sp/>stepper.phase_step*0.1<sp/>])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>ret<sp/>=<sp/>scipy.optimize.minimize(self.fit_function1,<sp/>param,<sp/>args=(fit_data,),<sp/>method=&quot;Nelder-Mead&quot;,<sp/>options<sp/>=<sp/>{&apos;initial_simplex&apos;:init_simplex,<sp/>&apos;disp&apos;:display_fit_info}<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>scipy.optimize.minimize(self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter_1a8dac4ad213fe13e8c5dd9bf0858ae764" kindref="member">fit_function1</ref>fit_function1,<sp/>param,<sp/>args=(fit_data,),<sp/>method=</highlight><highlight class="stringliteral">&quot;Nelder-Mead&quot;</highlight><highlight class="normal">,<sp/>options<sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;disp&apos;</highlight><highlight class="normal">:display_fit_info}<sp/>)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#ret<sp/>=<sp/>scipy.optimize.minimize(self.fit_function3,<sp/>param,<sp/>args=(fit_data,),<sp/>method=&quot;CG&quot;,<sp/>options<sp/>=<sp/>{&apos;disp&apos;:display_fit_info}<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.valid<sp/>=<sp/>ret.success</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.delay<sp/>=<sp/>ret.x[0]</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.phase_offset<sp/>=<sp/>ret.x[1]</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.model_dc_phase<sp/>=<sp/>cmath.phase(<sp/>cmath.exp(1j*result.phase_offset)*cmath.exp(-1j*(2.0*math.pi*(result.delay)*ref_frequency)<sp/>)<sp/><sp/>)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#compute<sp/>the<sp/>residuals,<sp/>and<sp/>root-mean-squared<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.residuals<sp/>=<sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter_1a97d6bd9169adb5fc6f1b5dde0870c39b" kindref="member">get_phase_residuals</ref>get_phase_residuals(fit_data,<sp/>result.delay,<sp/>result.phase_offset)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rmse<sp/>=<sp/>0.0</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_resid<sp/>=<sp/>len(result.residuals)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>n_resid<sp/>!=<sp/>0:</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>frq_resid<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>result.residuals:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ra<sp/>=<sp/>frq_resid[1]</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rmse<sp/>+=<sp/>ra*ra</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.phase_rmse<sp/>=<sp/>math.sqrt(rmse/n_resid)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#if<sp/>the<sp/>data<sp/>is<sp/>so<sp/>bad<sp/>that<sp/>there<sp/>are<sp/>only<sp/>3<sp/>un-cut<sp/>phasors,<sp/>then<sp/>flag<sp/>this<sp/>result<sp/>as<sp/>invalid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(fit_data.tone_phasors)<sp/>-<sp/>n_cut<sp/>&lt;=<sp/>3:</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.valid<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter_1a97d6bd9169adb5fc6f1b5dde0870c39b" kindref="member">get_phase_residuals</ref>(self,<sp/>fit_data,<sp/>delay,<sp/>phase_offset):</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_freq<sp/>=<sp/>fit_data.reference_frequency</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>residuals<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>a_pair<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>fit_data.tone_phasors:</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freq<sp/>=<sp/>a_pair[0]</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phasor<sp/>=<sp/>a_pair[1]</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model_angle<sp/>=<sp/>cmath.phase(<sp/><ref refid="namespacevpal_1_1pcc__delay__fitting_1a78bd17f46cf88b8bc693aa996aeec4a6" kindref="member">calc_delay_phasor</ref>(delay,<sp/>phase_offset,<sp/>ref_freq,<sp/>freq)<sp/>)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phasor_angle<sp/>=<sp/>cmath.phase(phasor)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resid_angle<sp/>=<sp/><ref refid="namespacevpal_1_1utility_1a6e3fe15a7b56e13bc0b65dbcc4f8d331" kindref="member">minimum_angular_difference</ref>(model_angle,<sp/>phasor_angle,<sp/>low_value=-1*math.pi,<sp/>high_value=math.pi)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>residuals.append([freq,<sp/>resid_angle])</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>residuals</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter_1a8dac4ad213fe13e8c5dd9bf0858ae764" kindref="member">fit_function1</ref>(self,<sp/>par,<sp/>fit_data):</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;a<sp/>fit<sp/>function<sp/>to<sp/>be<sp/>optimized<sp/>when<sp/>fitting<sp/>for<sp/>the<sp/>band<sp/>delay<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>par[0]<sp/>is<sp/>the<sp/>delay,<sp/>par[1]<sp/>is<sp/>phase_offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>objective<sp/>sum<sp/>is<sp/>maximized<sp/>when<sp/>all<sp/>the<sp/>phasors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>are<sp/>aligned<sp/>by<sp/>the<sp/>delay<sp/>model<sp/>along<sp/>the<sp/>same<sp/>direction(phase)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference_frequency<sp/>=<sp/>fit_data.reference_frequency</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/>par[0]</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phase_offset<sp/>=<sp/>par[1]</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#unweighted<sp/>sum,<sp/>all<sp/>non-zero<sp/>phasors<sp/>contribute<sp/>equally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cobjsum<sp/>=<sp/>complex(0,0)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>a_pair<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>fit_data.tone_phasors:</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freq<sp/>=<sp/>a_pair[0]</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phasor<sp/>=<sp/>a_pair[1]</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>abs(phasor)<sp/>&gt;<sp/>EPS<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>a_pair[3]<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conj_model<sp/>=<sp/><ref refid="namespacevpal_1_1pcc__delay__fitting_1a78bd17f46cf88b8bc693aa996aeec4a6" kindref="member">calc_delay_phasor</ref>(delay,<sp/>phase_offset,<sp/>reference_frequency,<sp/>freq).<ref refid="hops__complex_8h_1a7d6cb6e72f48dcd2a81c74aa618fcb5b" kindref="member">conjugate</ref>()</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cobjsum<sp/>+=<sp/>conj_model*(phasor/abs(phasor))</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1.0*cobjsum.real</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter_1aa2b4880144fac8d8b8068cf6e979103e" kindref="member">fit_function2</ref>(self,<sp/>par,<sp/>fit_data):</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;a<sp/>fit<sp/>function<sp/>to<sp/>be<sp/>optimized<sp/>when<sp/>fitting<sp/>for<sp/>the<sp/>band<sp/>delay<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>par[0]<sp/>is<sp/>the<sp/>delay,<sp/>par[1]<sp/>is<sp/>phase_offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>objective<sp/>sum<sp/>is<sp/>maximized<sp/>when<sp/>all<sp/>the<sp/>phasors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>are<sp/>aligned<sp/>by<sp/>the<sp/>delay<sp/>model<sp/>along<sp/>the<sp/>same<sp/>direction(phase)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference_frequency<sp/>=<sp/>fit_data.reference_frequency</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/>par[0]</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phase_offset<sp/>=<sp/>par[1]</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#weighted<sp/>sum,<sp/>all<sp/>phasors<sp/>are<sp/>weighted<sp/>by<sp/>their<sp/>amplitude</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cobjsum<sp/>=<sp/>complex(0,0)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abssum<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>a_pair<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>fit_data.tone_phasors:</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freq<sp/>=<sp/>a_pair[0]</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phasor<sp/>=<sp/>a_pair[1]</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>abs(phasor)<sp/>&gt;<sp/>EPS<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>a_pair[3]<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abssum<sp/>+=<sp/>abs(phasor)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conj_model<sp/>=<sp/><ref refid="namespacevpal_1_1pcc__delay__fitting_1a78bd17f46cf88b8bc693aa996aeec4a6" kindref="member">calc_delay_phasor</ref>(delay,<sp/>phase_offset,<sp/>reference_frequency,<sp/>freq).<ref refid="hops__complex_8h_1a7d6cb6e72f48dcd2a81c74aa618fcb5b" kindref="member">conjugate</ref>()</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cobjsum<sp/>+=<sp/>conj_model*phasor</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>(cobjsum.imag)*(cobjsum.imag)/(absum*absum)<sp/>)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter_1a0889f80f81ed2b95eb6d62ae33b8d765" kindref="member">fit_function3</ref>(self,<sp/>par,<sp/>fit_data):</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;a<sp/>fit<sp/>function<sp/>to<sp/>be<sp/>optimized<sp/>when<sp/>fitting<sp/>for<sp/>the<sp/>band<sp/>delay<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>par[0]<sp/>is<sp/>the<sp/>delay,<sp/>par[1]<sp/>is<sp/>phase_offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>objective<sp/>sum<sp/>is<sp/>maximized<sp/>when<sp/>all<sp/>the<sp/>phasors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>are<sp/>aligned<sp/>by<sp/>the<sp/>delay<sp/>model<sp/>along<sp/>the<sp/>same<sp/>direction(phase)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference_frequency<sp/>=<sp/>fit_data.reference_frequency</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/>par[0]</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phase_offset<sp/>=<sp/>par[1]</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#unweighted<sp/>sum,<sp/>all<sp/>non-zero<sp/>phasors<sp/>contribute<sp/>equally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chi2sum<sp/>=<sp/>0.0</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>a_pair<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>fit_data.tone_phasors:</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>a_pair[3]<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freq<sp/>=<sp/>a_pair[0]</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phasor<sp/>=<sp/>a_pair[1]</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ph_var<sp/>=<sp/>a_pair[2].get_phase_variance()</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model<sp/>=<sp/><ref refid="namespacevpal_1_1pcc__delay__fitting_1a78bd17f46cf88b8bc693aa996aeec4a6" kindref="member">calc_delay_phasor</ref>(delay,<sp/>phase_offset,<sp/>reference_frequency,<sp/>freq)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/><ref refid="namespacevpal_1_1utility_1a6e3fe15a7b56e13bc0b65dbcc4f8d331" kindref="member">minimum_angular_difference</ref>(<sp/>cmath.phase(phasor),<sp/>cmath.phase(model),<sp/>-1.0*math.pi,<sp/>math.pi)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chi2sum<sp/>+=<sp/>delta*delta/ph_var</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chi2sum</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter_1a7617960ce6f4c668be7bb399fa5cff78" kindref="member">get_initial_band_delay</ref>(self,<sp/>phasor_freq_pairs,<sp/>reference_frequency):</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;estimate<sp/>intial<sp/>values<sp/>for<sp/>the<sp/>band<sp/>delay<sp/>and<sp/>phase&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#this<sp/>is<sp/>pretty<sp/>slow<sp/>~O(N^2)<sp/>and<sp/>simplistic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay_estimates<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>phasor_freq_pairs:</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>y<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>phasor_freq_pairs:</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta_freq<sp/>=<sp/>y[0]<sp/>-<sp/>x[0]</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>delta_freq<sp/>&gt;<sp/>self.<ref refid="classvpal_1_1pcc__delay__fitting_1_1BandDelayFitter_1ac37060d31ac54e6091ff6a50b1a33404" kindref="member">channel_bandwidth</ref>channel_bandwidth:</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle1<sp/>=<sp/>cmath.phase(y[1])</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle2<sp/>=<sp/>cmath.phase(x[1])</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>abs(angle2<sp/>-<sp/>angle1)<sp/>&lt;<sp/>math.pi:</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta_phase<sp/>=<sp/><ref refid="namespacevpal_1_1utility_1a6e3fe15a7b56e13bc0b65dbcc4f8d331" kindref="member">minimum_angular_difference</ref>(angle1,<sp/>angle2,<sp/>low_value=-1.0*math.pi,<sp/>high_value=math.pi)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay_estimates.append(delta_phase/(2.0*math.pi*delta_freq))</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#get<sp/>median<sp/>delay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(delay_estimates)<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/>np.median(delay_estimates)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>delay</highlight></codeline>
    </programlisting>
    <location file="/home/barrettj/work/projects/hops-git/source/python_src/vpal_module/vpal/pcc_delay_fitting.py"/>
  </compounddef>
</doxygen>
