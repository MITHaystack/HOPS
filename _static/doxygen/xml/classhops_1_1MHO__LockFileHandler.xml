<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classhops_1_1MHO__LockFileHandler" kind="class" language="C++" prot="public">
    <compoundname>hops::MHO_LockFileHandler</compoundname>
    <includes refid="MHO__LockFileHandler_8hh" local="no">MHO_LockFileHandler.hh</includes>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classhops_1_1MHO__LockFileHandler_1a294308ce057a3680ff5dc8e04192ba07" prot="private" static="yes" mutable="no">
        <type><ref refid="classhops_1_1MHO__LockFileHandler" kindref="compound">MHO_LockFileHandler</ref> *</type>
        <definition>MHO_LockFileHandler * hops::MHO_LockFileHandler::fInstance</definition>
        <argsstring></argsstring>
        <name>fInstance</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="230" column="36" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" bodystart="227" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhops_1_1MHO__LockFileHandler_1a8f0651f0201d6a2fade62134e3f3bc03" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hops::MHO_LockFileHandler::fDirectory</definition>
        <argsstring></argsstring>
        <name>fDirectory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="234" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhops_1_1MHO__LockFileHandler_1a3a3e50aca94f850d58d3effcb5e7da73" prot="private" static="no" mutable="no">
        <type><ref refid="classhops_1_1MHO__DirectoryInterface" kindref="compound">MHO_DirectoryInterface</ref></type>
        <definition>MHO_DirectoryInterface hops::MHO_LockFileHandler::fDirInterface</definition>
        <argsstring></argsstring>
        <name>fDirInterface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="235" column="32" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhops_1_1MHO__LockFileHandler_1afd84f9f28f010d3fa0f87480f91cae3f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool hops::MHO_LockFileHandler::fEnableLegacyMode</definition>
        <argsstring></argsstring>
        <name>fEnableLegacyMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="238" column="14" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhops_1_1MHO__LockFileHandler_1a4cec6c5e81009e2a1a89c1616e363172" prot="private" static="no" mutable="no">
        <type><ref refid="structhops_1_1lockfile__data" kindref="compound">lockfile_data</ref></type>
        <definition>lockfile_data hops::MHO_LockFileHandler::fProcessLockFileData</definition>
        <argsstring></argsstring>
        <name>fProcessLockFileData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="232" column="23" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhops_1_1MHO__LockFileHandler_1ae3388550eb2f6056c447f0ff21bb4d74" prot="private" static="no" mutable="no">
        <type><ref refid="classhops_1_1MHO__Tokenizer" kindref="compound">MHO_Tokenizer</ref></type>
        <definition>MHO_Tokenizer hops::MHO_LockFileHandler::fTokenizer</definition>
        <argsstring></argsstring>
        <name>fTokenizer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="236" column="23" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" bodystart="236" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1ac4f095ebb6d76a0606fae2ffb38daa5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hops::MHO_LockFileHandler::MHO_LockFileHandler</definition>
        <argsstring>(MHO_LockFileHandler &amp;&amp;)=delete</argsstring>
        <name>MHO_LockFileHandler</name>
        <param>
          <type><ref refid="classhops_1_1MHO__LockFileHandler" kindref="compound">MHO_LockFileHandler</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="64" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1af77735f650ef61ac0a45db7868b35162" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hops::MHO_LockFileHandler::MHO_LockFileHandler</definition>
        <argsstring>(MHO_LockFileHandler const &amp;)=delete</argsstring>
        <name>MHO_LockFileHandler</name>
        <param>
          <type><ref refid="classhops_1_1MHO__LockFileHandler" kindref="compound">MHO_LockFileHandler</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="63" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1a44f7b1499660fcc6ef23e3a24308c763" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hops::MHO_LockFileHandler::DisableLegacyMode</definition>
        <argsstring>()</argsstring>
        <name>DisableLegacyMode</name>
        <briefdescription>
<para>Disables legacy mode by setting fEnableLegacyMode to false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="94" column="14" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1a88820eb8d60605ffa83682fde3d57fe2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hops::MHO_LockFileHandler::EnableLegacyMode</definition>
        <argsstring>()</argsstring>
        <name>EnableLegacyMode</name>
        <briefdescription>
<para>configure the lock handler to write legacy type_2xx file (e.g. GE.X.1.ABCDEF) naming convention. or to use the new file naming convention (.frng extension) legacy mode is enabled by default </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="89" column="14" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1a09d5931b3f0d7b0a5bd1d65bbf695fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhops_1_1MHO__LockFileHandler" kindref="compound">MHO_LockFileHandler</ref> &amp;</type>
        <definition>MHO_LockFileHandler&amp; hops::MHO_LockFileHandler::operator=</definition>
        <argsstring>(MHO_LockFileHandler &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classhops_1_1MHO__LockFileHandler" kindref="compound">MHO_LockFileHandler</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="66" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1ac6d86964596269bbbbfbf0cb44f9adeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhops_1_1MHO__LockFileHandler" kindref="compound">MHO_LockFileHandler</ref> &amp;</type>
        <definition>MHO_LockFileHandler&amp; hops::MHO_LockFileHandler::operator=</definition>
        <argsstring>(MHO_LockFileHandler const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classhops_1_1MHO__LockFileHandler" kindref="compound">MHO_LockFileHandler</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="65" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1a355c37825e5e948589ba4871d1a91465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hops::MHO_LockFileHandler::RemoveWriteLock</definition>
        <argsstring>()</argsstring>
        <name>RemoveWriteLock</name>
        <briefdescription>
<para>Removes a write lock from the file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="108" column="14" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/src/MHO_LockFileHandler.cc" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1ad335247a398f32c8f08fe6a43c04bb02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hops::MHO_LockFileHandler::WaitForWriteLock</definition>
        <argsstring>(std::string directory, int &amp;next_seq_no)</argsstring>
        <name>WaitForWriteLock</name>
        <param>
          <type>std::string</type>
          <declname>directory</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>next_seq_no</declname>
        </param>
        <briefdescription>
<para>Waits for and acquires a write lock on the specified directory, setting it as the current directory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>directory</parametername>
</parameternamelist>
<parameterdescription>
<para>The directory to acquire the write lock on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>next_seq_no</parametername>
</parameternamelist>
<parameterdescription>
<para>(int&amp;) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer representing the result of the operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="104" column="13" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/src/MHO_LockFileHandler.cc" bodystart="55" bodyend="59"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1aabef93e20d0d0403518d8dc08de627a3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhops_1_1MHO__LockFileHandler" kindref="compound">MHO_LockFileHandler</ref> &amp;</type>
        <definition>static MHO_LockFileHandler&amp; hops::MHO_LockFileHandler::GetInstance</definition>
        <argsstring>()</argsstring>
        <name>GetInstance</name>
        <briefdescription>
<para>provide public access to the only static instance </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Reference to the singleton instance of <ref refid="classhops_1_1MHO__LockFileHandler" kindref="compound">MHO_LockFileHandler</ref> </para>
</simplesect>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="74" column="36" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" bodystart="74" bodyend="81"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1a88abbc6b8ca36a43e560c3e573b987b3" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hops::MHO_LockFileHandler::at_front</definition>
        <argsstring>(const char *directory, char *lockfile_name, lockfile_data *lock_data, int cand_seq_no)</argsstring>
        <name>at_front</name>
        <param>
          <type>const char *</type>
          <declname>directory</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>lockfile_name</declname>
        </param>
        <param>
          <type><ref refid="structhops_1_1lockfile__data" kindref="compound">lockfile_data</ref> *</type>
          <declname>lock_data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cand_seq_no</declname>
        </param>
        <briefdescription>
<para>Checks if a process has priority to create a lock file in a given directory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>directory</parametername>
</parameternamelist>
<parameterdescription>
<para>Input directory path where lock files are stored </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lockfile_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Output lock file name if created </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lock_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Output lock file data if created </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cand_seq_no</parametername>
</parameternamelist>
<parameterdescription>
<para>Candidate sequence number for the new lock file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Status code indicating success or error (LOCK_STATUS_OK, LOCK_PARSE_ERROR, LOCK_STALE_ERROR, LOCK_FILE_ERROR) </para>
</simplesect>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="177" column="20" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/src/MHO_LockFileHandler.cc" bodystart="309" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1ad47abca10469d84b9dc8496a2138800c" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hops::MHO_LockFileHandler::check_stale</definition>
        <argsstring>(lockfile_data *other)</argsstring>
        <name>check_stale</name>
        <param>
          <type><ref refid="structhops_1_1lockfile__data" kindref="compound">lockfile_data</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Checks if another lockfile is stale and returns appropriate status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to another <ref refid="structhops_1_1lockfile__data" kindref="compound">lockfile_data</ref> structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>LOCK_STATUS_OK if stale, LOCK_STALE_ERROR otherwise. </para>
</simplesect>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="156" column="20" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/src/MHO_LockFileHandler.cc" bodystart="161" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1a6fc4557b963a532c7b2c15646a031f82" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hops::MHO_LockFileHandler::create_lockfile</definition>
        <argsstring>(const char *directory, char *lockfile_name, lockfile_data *lock_data, int max_seq_no)</argsstring>
        <name>create_lockfile</name>
        <param>
          <type>const char *</type>
          <declname>directory</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>lockfile_name</declname>
        </param>
        <param>
          <type><ref refid="structhops_1_1lockfile__data" kindref="compound">lockfile_data</ref> *</type>
          <declname>lock_data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_seq_no</declname>
        </param>
        <briefdescription>
<para>Creates a lockfile in the specified directory with given name and data, using current process ID, hostname, and timestamp. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>directory</parametername>
</parameternamelist>
<parameterdescription>
<para>Input directory path where the lockfile will be created </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lockfile_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Output buffer for the generated lockfile name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lock_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store lockfile metadata (validity, seq_number, pid, time_sec) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_seq_no</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum file extent number seen at time of lock file creation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure </para>
</simplesect>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="147" column="20" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/src/MHO_LockFileHandler.cc" bodystart="235" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1a55472fb34e657872f36c99d2a52aca65" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hops::MHO_LockFileHandler::HandleSignal</definition>
        <argsstring>(int signal_value)</argsstring>
        <name>HandleSignal</name>
        <param>
          <type>int</type>
          <declname>signal_value</declname>
        </param>
        <briefdescription>
<para>Removes write lock and resets signal handler to default before re-sending the signal to the process. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signal_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Signal value to be handled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="117" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/src/MHO_LockFileHandler.cc" bodystart="28" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1a25ae701b60631a23e16da92335c07b0d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hops::MHO_LockFileHandler::init_lockfile_data</definition>
        <argsstring>(lockfile_data *data)</argsstring>
        <name>init_lockfile_data</name>
        <param>
          <type><ref refid="structhops_1_1lockfile__data" kindref="compound">lockfile_data</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Initializes <ref refid="structhops_1_1lockfile__data" kindref="compound">lockfile_data</ref> struct to default values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structhops_1_1lockfile__data" kindref="compound">lockfile_data</ref> struct to initialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="125" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/src/MHO_LockFileHandler.cc" bodystart="61" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1abc08ac87d1d73a2b7cad29601861db99" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hops::MHO_LockFileHandler::lock_has_priority</definition>
        <argsstring>(lockfile_data *ours, lockfile_data *other)</argsstring>
        <name>lock_has_priority</name>
        <param>
          <type><ref refid="structhops_1_1lockfile__data" kindref="compound">lockfile_data</ref> *</type>
          <declname>ours</declname>
        </param>
        <param>
          <type><ref refid="structhops_1_1lockfile__data" kindref="compound">lockfile_data</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Determines priority between two lock processes based on PID and timestamps. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ours</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to our <ref refid="structhops_1_1lockfile__data" kindref="compound">lockfile_data</ref> structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to another process&apos;s <ref refid="structhops_1_1lockfile__data" kindref="compound">lockfile_data</ref> structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>LOCK_PROCESS_HAS_PRIORITY, LOCK_PROCESS_NO_PRIORITY or LOCK_STALE_ERROR based on comparison results. </para>
</simplesect>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="166" column="20" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/src/MHO_LockFileHandler.cc" bodystart="186" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1a052ae37976617010c817e87b3d2ab326" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hops::MHO_LockFileHandler::parse_lockfile_name</definition>
        <argsstring>(char *lockfile_name_base, lockfile_data *result)</argsstring>
        <name>parse_lockfile_name</name>
        <param>
          <type>char *</type>
          <declname>lockfile_name_base</declname>
        </param>
        <param>
          <type><ref refid="structhops_1_1lockfile__data" kindref="compound">lockfile_data</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Parses a lockfile name into its constituent components and stores them in result. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lockfile_name_base</parametername>
</parameternamelist>
<parameterdescription>
<para>Input lockfile name to be parsed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>(lockfile_data*) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, LOCK_PARSE_ERROR on failure </para>
</simplesect>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="135" column="20" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/src/MHO_LockFileHandler.cc" bodystart="93" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1aed8f1d6229d3e24200736891dec79171" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hops::MHO_LockFileHandler::remove_lockfile</definition>
        <argsstring>(lockfile_data *other)</argsstring>
        <name>remove_lockfile</name>
        <param>
          <type><ref refid="structhops_1_1lockfile__data" kindref="compound">lockfile_data</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Removes a lockfile if it&apos;s valid and outputs debug message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>(lockfile_data*) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="185" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/src/MHO_LockFileHandler.cc" bodystart="83" bodyend="91"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1a53774cb4ba81d3f6ed6cbcdc8f680e2e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hops::MHO_LockFileHandler::MHO_LockFileHandler</definition>
        <argsstring>()</argsstring>
        <name>MHO_LockFileHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="210" column="9" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" bodystart="210" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1afae297b425e8b62d03be51ef027b6ac0" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual hops::MHO_LockFileHandler::~MHO_LockFileHandler</definition>
        <argsstring>()</argsstring>
        <name>~MHO_LockFileHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="227" column="17" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" bodystart="227" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1aa67fac0c6b9adc6d322fc0a316af7f35" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hops::MHO_LockFileHandler::get_max_seq_number</definition>
        <argsstring>(std::string dir)</argsstring>
        <name>get_max_seq_number</name>
        <param>
          <type>std::string</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Finds and returns the maximum sequence number among fringe files in the given directory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Input directory path where fringe files are located </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Maximum sequence number found among fringe files </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>check for max sequence number on disk</para>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="201" column="13" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/src/MHO_LockFileHandler.cc" bodystart="488" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1a1530662c23df2801cee00ee3e2eba7ed" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hops::MHO_LockFileHandler::SetDirectory</definition>
        <argsstring>(std::string dir)</argsstring>
        <name>SetDirectory</name>
        <param>
          <type>std::string</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Setter for directory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The new directory path to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="208" column="14" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/src/MHO_LockFileHandler.cc" bodystart="36" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__LockFileHandler_1a0b6e33dbbbf9c04b6acf8049011daa6d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hops::MHO_LockFileHandler::wait_for_write_lock</definition>
        <argsstring>(int &amp;next_seq_no)</argsstring>
        <name>wait_for_write_lock</name>
        <param>
          <type>int &amp;</type>
          <declname>next_seq_no</declname>
        </param>
        <briefdescription>
<para>Waits for this process to be at the front of the write queue and returns the next sequence number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>next_seq_no</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter: Next sequence number after acquiring the lock </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>LOCK_STATUS_OK on success, error codes otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="193" column="13" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/src/MHO_LockFileHandler.cc" bodystart="440" bodyend="486"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class <ref refid="classhops_1_1MHO__LockFileHandler" kindref="compound">MHO_LockFileHandler</ref> uses the singleton pattern. </para>
    </briefdescription>
    <detaileddescription>
<para>ported version of fourfit write lock mechanism the only three functions user needs to call via the instance: (1) enable/disable legacy mode (2) wait for lock</para>
<para><simplesect kind="author"><para>J. Barrett - <ulink url="mailto:barrettj@mit.edu">barrettj@mit.edu</ulink> </para>
</simplesect>
<simplesect kind="date"><para>Tue Jan 30 23:48:59 2024 -0500<itemizedlist>
<listitem><para>write out the data file (3) remove lock </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" line="59" column="1" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Utilities/include/MHO_LockFileHandler.hh" bodystart="60" bodyend="239"/>
    <listofallmembers>
      <member refid="classhops_1_1MHO__LockFileHandler_1a88abbc6b8ca36a43e560c3e573b987b3" prot="private" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>at_front</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1ad47abca10469d84b9dc8496a2138800c" prot="private" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>check_stale</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1a6fc4557b963a532c7b2c15646a031f82" prot="private" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>create_lockfile</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1a44f7b1499660fcc6ef23e3a24308c763" prot="public" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>DisableLegacyMode</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1a88820eb8d60605ffa83682fde3d57fe2" prot="public" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>EnableLegacyMode</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1a8f0651f0201d6a2fade62134e3f3bc03" prot="private" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>fDirectory</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1a3a3e50aca94f850d58d3effcb5e7da73" prot="private" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>fDirInterface</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1afd84f9f28f010d3fa0f87480f91cae3f" prot="private" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>fEnableLegacyMode</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1a294308ce057a3680ff5dc8e04192ba07" prot="private" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>fInstance</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1a4cec6c5e81009e2a1a89c1616e363172" prot="private" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>fProcessLockFileData</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1ae3388550eb2f6056c447f0ff21bb4d74" prot="private" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>fTokenizer</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1aa67fac0c6b9adc6d322fc0a316af7f35" prot="private" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>get_max_seq_number</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1aabef93e20d0d0403518d8dc08de627a3" prot="public" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>GetInstance</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1a55472fb34e657872f36c99d2a52aca65" prot="private" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>HandleSignal</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1a25ae701b60631a23e16da92335c07b0d" prot="private" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>init_lockfile_data</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1abc08ac87d1d73a2b7cad29601861db99" prot="private" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>lock_has_priority</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1af77735f650ef61ac0a45db7868b35162" prot="public" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>MHO_LockFileHandler</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1ac4f095ebb6d76a0606fae2ffb38daa5b" prot="public" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>MHO_LockFileHandler</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1a53774cb4ba81d3f6ed6cbcdc8f680e2e" prot="private" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>MHO_LockFileHandler</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1ac6d86964596269bbbbfbf0cb44f9adeb" prot="public" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>operator=</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1a09d5931b3f0d7b0a5bd1d65bbf695fd1" prot="public" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>operator=</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1a052ae37976617010c817e87b3d2ab326" prot="private" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>parse_lockfile_name</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1aed8f1d6229d3e24200736891dec79171" prot="private" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>remove_lockfile</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1a355c37825e5e948589ba4871d1a91465" prot="public" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>RemoveWriteLock</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1a1530662c23df2801cee00ee3e2eba7ed" prot="private" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>SetDirectory</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1a0b6e33dbbbf9c04b6acf8049011daa6d" prot="private" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>wait_for_write_lock</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1ad335247a398f32c8f08fe6a43c04bb02" prot="public" virt="non-virtual"><scope>hops::MHO_LockFileHandler</scope><name>WaitForWriteLock</name></member>
      <member refid="classhops_1_1MHO__LockFileHandler_1afae297b425e8b62d03be51ef027b6ac0" prot="private" virt="virtual"><scope>hops::MHO_LockFileHandler</scope><name>~MHO_LockFileHandler</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
