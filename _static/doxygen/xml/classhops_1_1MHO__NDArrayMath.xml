<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classhops_1_1MHO__NDArrayMath" kind="class" language="C++" prot="public">
    <compoundname>hops::MHO_NDArrayMath</compoundname>
    <includes refid="MHO__NDArrayMath_8hh" local="no">MHO_NDArrayMath.hh</includes>
    <innerclass refid="structhops_1_1MHO__NDArrayMath_1_1Divide" prot="public">hops::MHO_NDArrayMath::Divide</innerclass>
    <innerclass refid="structhops_1_1MHO__NDArrayMath_1_1Divide_3_01numerator_00_011_01_4" prot="public">hops::MHO_NDArrayMath::Divide&lt; numerator, 1 &gt;</innerclass>
    <innerclass refid="structhops_1_1MHO__NDArrayMath_1_1PowerOfTwo" prot="public">hops::MHO_NDArrayMath::PowerOfTwo</innerclass>
    <innerclass refid="structhops_1_1MHO__NDArrayMath_1_1PowerOfTwo_3_010_01_4" prot="public">hops::MHO_NDArrayMath::PowerOfTwo&lt; 0 &gt;</innerclass>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhops_1_1MHO__NDArrayMath_1a33a5ad3b8ebe5438975d8621d2074451" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hops::MHO_NDArrayMath::MHO_NDArrayMath</definition>
        <argsstring>()</argsstring>
        <name>MHO_NDArrayMath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" line="21" column="9" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__NDArrayMath_1aec03f8bef3d4f5fc7621cd2243c8048e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual hops::MHO_NDArrayMath::~MHO_NDArrayMath</definition>
        <argsstring>()</argsstring>
        <name>~MHO_NDArrayMath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" line="22" column="17" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" bodystart="22" bodyend="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classhops_1_1MHO__NDArrayMath_1a2836d4f44464ef608693e6c135225dc3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>RANK</declname>
            <defname>RANK</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool hops::MHO_NDArrayMath::CheckIndexValidity</definition>
        <argsstring>(const std::size_t *DimSize, const std::size_t *Index)</argsstring>
        <name>CheckIndexValidity</name>
        <param>
          <type>const std::size_t *</type>
          <declname>DimSize</declname>
        </param>
        <param>
          <type>const std::size_t *</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
<para>Checks if all indices in Index are within valid range for a multidimensional array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DimSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array containing the dimensions of the multidimensional array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array containing the indices of the element being accessed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean indicating whether all indices are valid (true if valid, false otherwise). </para>
</simplesect>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" line="153" column="41" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" bodystart="153" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__NDArrayMath_1a012fb814ec1b88585c5787d75a5e7ec6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>RANK</declname>
            <defname>RANK</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool hops::MHO_NDArrayMath::DecrementIndices</definition>
        <argsstring>(const std::size_t *DimSize, std::size_t *Index)</argsstring>
        <name>DecrementIndices</name>
        <param>
          <type>const std::size_t *</type>
          <declname>DimSize</declname>
        </param>
        <param>
          <type>std::size_t *</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
<para>Decrements indices in a multidimensional by one, array using row major indexing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DimSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array containing the dimensions of the multidimensional array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array containing the current indices. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if successful decrement, false if underflowed the 0-th dimension. </para>
</simplesect>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" line="286" column="34" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" bodystart="286" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__NDArrayMath_1ab5c2043e13c2807d8c419e393074cacc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>RANK</declname>
            <defname>RANK</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool hops::MHO_NDArrayMath::DecrementIndices</definition>
        <argsstring>(const std::size_t *DimSize, std::size_t *Index, std::size_t diff)</argsstring>
        <name>DecrementIndices</name>
        <param>
          <type>const std::size_t *</type>
          <declname>DimSize</declname>
        </param>
        <param>
          <type>std::size_t *</type>
          <declname>Index</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>diff</declname>
        </param>
        <briefdescription>
<para>Decrements indices in a multidimensional array by amount specified in diff, or until an underflow is reached. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RANK</parametername>
</parameternamelist>
<parameterdescription>
<para>Template parameter RANK </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DimSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array containing the dimensions of the multidimensional array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array containing the current indices of the multidimensional array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>diff</parametername>
</parameternamelist>
<parameterdescription>
<para>(std::size_t) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if decrementing was successful, false if all dimensions have underflowed. </para>
</simplesect>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" line="315" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" bodystart="315" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__NDArrayMath_1a7170348c937f0889373a601bfafcb562" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>RANK</declname>
            <defname>RANK</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool hops::MHO_NDArrayMath::IncrementIndices</definition>
        <argsstring>(const std::size_t *DimSize, std::size_t *Index)</argsstring>
        <name>IncrementIndices</name>
        <param>
          <type>const std::size_t *</type>
          <declname>DimSize</declname>
        </param>
        <param>
          <type>std::size_t *</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
<para>Increment multi-dimensional indices by one in row-major order, accounting for roll-over. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DimSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array containing dimension sizes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array containing current indices </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if increment was successful, false if overflow occurred </para>
</simplesect>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" line="237" column="34" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" bodystart="237" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__NDArrayMath_1aede86722c5719c30af0ad9c5e8c0b911" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>RANK</declname>
            <defname>RANK</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool hops::MHO_NDArrayMath::IncrementIndices</definition>
        <argsstring>(const std::size_t *DimSize, std::size_t *Index, std::size_t diff)</argsstring>
        <name>IncrementIndices</name>
        <param>
          <type>const std::size_t *</type>
          <declname>DimSize</declname>
        </param>
        <param>
          <type>std::size_t *</type>
          <declname>Index</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>diff</declname>
        </param>
        <briefdescription>
<para>Increment multi-dimensional indices by the amount in diff (accounting for roll-over) and return true if successful, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RANK</parametername>
</parameternamelist>
<parameterdescription>
<para>Template parameter RANK </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DimSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array containing dimension sizes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array of indices to increment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>diff</parametername>
</parameternamelist>
<parameterdescription>
<para>(std::size_t) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean indicating success (true) or failure (false) </para>
</simplesect>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" line="265" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" bodystart="265" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__NDArrayMath_1a0bf38727a5b9b3bb9b2556660ffdf5cc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>static std::size_t hops::MHO_NDArrayMath::Modulus</definition>
        <argsstring>(std::size_t arg, std::size_t n)</argsstring>
        <name>Modulus</name>
        <param>
          <type>std::size_t</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Calculates the modulus of two integers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>First integer operand </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Second integer operand (modulus) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of arg modulo n </para>
</simplesect>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" line="32" column="28" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" bodystart="32" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__NDArrayMath_1a9375d983e27399dd59273fbb217f647c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>RANK</declname>
            <defname>RANK</defname>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>static std::size_t hops::MHO_NDArrayMath::OffsetFromRowMajorIndex</definition>
        <argsstring>(const std::size_t *DimSize, const std::size_t *Index)</argsstring>
        <name>OffsetFromRowMajorIndex</name>
        <param>
          <type>const std::size_t *</type>
          <declname>DimSize</declname>
        </param>
        <param>
          <type>const std::size_t *</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
<para>Calculates offset into a multidimensional array using row-major indexing. </para>
        </briefdescription>
        <detaileddescription>
<para>for a multidimensional array (using row major indexing) which has the dimensions specified in DimSize, this function computes the offset from the first element given the indices in the array Index <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RANK</parametername>
</parameternamelist>
<parameterdescription>
<para>Template parameter RANK </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DimSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array containing dimension sizes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array of indices. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Offset from the first element (given the input indices). </para>
</simplesect>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" line="47" column="35" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" bodystart="47" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__NDArrayMath_1aa36cede9266610c324253d4c310ca143" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>RANK</declname>
            <defname>RANK</defname>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>static std::size_t hops::MHO_NDArrayMath::OffsetFromStrideIndex</definition>
        <argsstring>(const std::size_t *Strides, const std::size_t *Index)</argsstring>
        <name>OffsetFromStrideIndex</name>
        <param>
          <type>const std::size_t *</type>
          <declname>Strides</declname>
        </param>
        <param>
          <type>const std::size_t *</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
<para>Calculates offset for a given index into a multidimensional array using row-major indexing/strides. </para>
        </briefdescription>
        <detaileddescription>
<para>for a multidimensional array (using row major indexing) which has the strides specified in Strides, this function computes the offset from the first element given the indices in the array Index <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RANK</parametername>
</parameternamelist>
<parameterdescription>
<para>Template parameter RANK </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Strides</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of strides for each dimension </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>Indices for each dimension </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Offset from the first element (given the indices) </para>
</simplesect>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" line="71" column="35" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" bodystart="71" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__NDArrayMath_1a9bf3652152bd62e6992cfc273cdd25eb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>RANK</declname>
            <defname>RANK</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void hops::MHO_NDArrayMath::OffsetsForReversedIndices</definition>
        <argsstring>(const std::size_t *DimSize, std::size_t *ReversedIndex)</argsstring>
        <name>OffsetsForReversedIndices</name>
        <param>
          <type>const std::size_t *</type>
          <declname>DimSize</declname>
        </param>
        <param>
          <type>std::size_t *</type>
          <declname>ReversedIndex</declname>
        </param>
        <briefdescription>
<para>Calculates reversed indices offsets for the given dimensions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RANK</parametername>
</parameternamelist>
<parameterdescription>
<para>Template parameter RANK </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DimSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array of dimension sizes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ReversedIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Output array to store reversed index offsets </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" line="214" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" bodystart="214" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__NDArrayMath_1a276a03d33e9dcaaa731637bbc7fee940" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>RANK</declname>
            <defname>RANK</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void hops::MHO_NDArrayMath::RowMajorIndexFromOffset</definition>
        <argsstring>(std::size_t offset, const std::size_t *DimSize, std::size_t *Index)</argsstring>
        <name>RowMajorIndexFromOffset</name>
        <param>
          <type>std::size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const std::size_t *</type>
          <declname>DimSize</declname>
        </param>
        <param>
          <type>std::size_t *</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
<para>Function RowMajorIndexFromOffset. </para>
        </briefdescription>
        <detaileddescription>
<para>for a multidimensional array (using row major indexing) which has the dimensions specified in DimSize, this function computes the indices of the elements which has the given offset from the first element <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RANK</parametername>
</parameternamelist>
<parameterdescription>
<para>Template parameter RANK </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>(std::size_t) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DimSize</parametername>
</parameternamelist>
<parameterdescription>
<para>(const std::size_t*) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>(std::size_t*) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" line="121" column="28" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" bodystart="121" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__NDArrayMath_1a3886c4d4b43173698528a5c518c829a2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>RANK</declname>
            <defname>RANK</defname>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>static std::size_t hops::MHO_NDArrayMath::StrideFromRowMajorIndex</definition>
        <argsstring>(std::size_t selected_dim, const std::size_t *DimSize)</argsstring>
        <name>StrideFromRowMajorIndex</name>
        <param>
          <type>std::size_t</type>
          <declname>selected_dim</declname>
        </param>
        <param>
          <type>const std::size_t *</type>
          <declname>DimSize</declname>
        </param>
        <briefdescription>
<para>Calculates stride for a given dimension in a row-major indexed multidimensional array. </para>
        </briefdescription>
        <detaileddescription>
<para>for a multidimensional array (using row major indexing) which has the dimensions specified in DimSize, this function computes the stride between consecutive elements in the selected dimension given that the other indices are fixed the first element given the indices in the array Index <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RANK</parametername>
</parameternamelist>
<parameterdescription>
<para>Template parameter RANK </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>selected_dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Selected dimension index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DimSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Array containing dimensions sizes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Stride value as std::size_t </para>
</simplesect>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" line="95" column="35" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" bodystart="95" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__NDArrayMath_1af0a51b2aa3f1a6afe9db3515106fa4e8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>RANK</declname>
            <defname>RANK</defname>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>static std::size_t hops::MHO_NDArrayMath::TotalArraySize</definition>
        <argsstring>(const std::size_t *DimSize)</argsstring>
        <name>TotalArraySize</name>
        <param>
          <type>const std::size_t *</type>
          <declname>DimSize</declname>
        </param>
        <briefdescription>
<para>Calculates total size of an array given its dimensions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DimSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array of dimension sizes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Total size of the array as a std::size_t. </para>
</simplesect>
<simplesect kind="note"><para>This is a static function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" line="173" column="48" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" bodystart="173" bodyend="181"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>utility functions for multidimensional array access </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="date"><para>Sun Jan 24 14:53:01 2021 -0500 </para>
</simplesect>
<simplesect kind="author"><para>J. Barrett - <ulink url="mailto:barrettj@mit.edu">barrettj@mit.edu</ulink> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" line="18" column="1" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Containers/include/MHO_NDArrayMath.hh" bodystart="19" bodyend="327"/>
    <listofallmembers>
      <member refid="classhops_1_1MHO__NDArrayMath_1a2836d4f44464ef608693e6c135225dc3" prot="public" virt="non-virtual"><scope>hops::MHO_NDArrayMath</scope><name>CheckIndexValidity</name></member>
      <member refid="classhops_1_1MHO__NDArrayMath_1a012fb814ec1b88585c5787d75a5e7ec6" prot="public" virt="non-virtual"><scope>hops::MHO_NDArrayMath</scope><name>DecrementIndices</name></member>
      <member refid="classhops_1_1MHO__NDArrayMath_1ab5c2043e13c2807d8c419e393074cacc" prot="public" virt="non-virtual"><scope>hops::MHO_NDArrayMath</scope><name>DecrementIndices</name></member>
      <member refid="classhops_1_1MHO__NDArrayMath_1a7170348c937f0889373a601bfafcb562" prot="public" virt="non-virtual"><scope>hops::MHO_NDArrayMath</scope><name>IncrementIndices</name></member>
      <member refid="classhops_1_1MHO__NDArrayMath_1aede86722c5719c30af0ad9c5e8c0b911" prot="public" virt="non-virtual"><scope>hops::MHO_NDArrayMath</scope><name>IncrementIndices</name></member>
      <member refid="classhops_1_1MHO__NDArrayMath_1a33a5ad3b8ebe5438975d8621d2074451" prot="public" virt="non-virtual"><scope>hops::MHO_NDArrayMath</scope><name>MHO_NDArrayMath</name></member>
      <member refid="classhops_1_1MHO__NDArrayMath_1a0bf38727a5b9b3bb9b2556660ffdf5cc" prot="public" virt="non-virtual"><scope>hops::MHO_NDArrayMath</scope><name>Modulus</name></member>
      <member refid="classhops_1_1MHO__NDArrayMath_1a9375d983e27399dd59273fbb217f647c" prot="public" virt="non-virtual"><scope>hops::MHO_NDArrayMath</scope><name>OffsetFromRowMajorIndex</name></member>
      <member refid="classhops_1_1MHO__NDArrayMath_1aa36cede9266610c324253d4c310ca143" prot="public" virt="non-virtual"><scope>hops::MHO_NDArrayMath</scope><name>OffsetFromStrideIndex</name></member>
      <member refid="classhops_1_1MHO__NDArrayMath_1a9bf3652152bd62e6992cfc273cdd25eb" prot="public" virt="non-virtual"><scope>hops::MHO_NDArrayMath</scope><name>OffsetsForReversedIndices</name></member>
      <member refid="classhops_1_1MHO__NDArrayMath_1a276a03d33e9dcaaa731637bbc7fee940" prot="public" virt="non-virtual"><scope>hops::MHO_NDArrayMath</scope><name>RowMajorIndexFromOffset</name></member>
      <member refid="classhops_1_1MHO__NDArrayMath_1a3886c4d4b43173698528a5c518c829a2" prot="public" virt="non-virtual"><scope>hops::MHO_NDArrayMath</scope><name>StrideFromRowMajorIndex</name></member>
      <member refid="classhops_1_1MHO__NDArrayMath_1af0a51b2aa3f1a6afe9db3515106fa4e8" prot="public" virt="non-virtual"><scope>hops::MHO_NDArrayMath</scope><name>TotalArraySize</name></member>
      <member refid="classhops_1_1MHO__NDArrayMath_1aec03f8bef3d4f5fc7621cd2243c8048e" prot="public" virt="virtual"><scope>hops::MHO_NDArrayMath</scope><name>~MHO_NDArrayMath</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
