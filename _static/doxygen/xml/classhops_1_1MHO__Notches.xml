<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classhops_1_1MHO__Notches" kind="class" language="C++" prot="public">
    <compoundname>hops::MHO_Notches</compoundname>
    <basecompoundref refid="classhops_1_1MHO__UnaryOperator" prot="public" virt="non-virtual">hops::MHO_UnaryOperator&lt; visibility_type &gt;</basecompoundref>
    <includes refid="MHO__Notches_8hh" local="no">MHO_Notches.hh</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhops_1_1MHO__Notches_1a6df992fd076e205f1f2c8626b8b2c945" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hops::MHO_Notches::fBandwidthKey</definition>
        <argsstring></argsstring>
        <name>fBandwidthKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" line="110" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhops_1_1MHO__Notches_1aaf93f47b18806568d6bee2ff5260b1de" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hops::MHO_Notches::fLowerSideband</definition>
        <argsstring></argsstring>
        <name>fLowerSideband</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" line="112" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhops_1_1MHO__Notches_1a76a0d6efed3ad4cf13d1c677b610c050" prot="private" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; hops::MHO_Notches::fNotchBoundaries</definition>
        <argsstring></argsstring>
        <name>fNotchBoundaries</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" line="117" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhops_1_1MHO__Notches_1af03a8e7078fc9b2e2f3dcceecde3c944" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::pair&lt; double, double &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; double, double &gt; &gt; hops::MHO_Notches::fNotches</definition>
        <argsstring></argsstring>
        <name>fNotches</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" line="118" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhops_1_1MHO__Notches_1ac3e7ebbda20f860dd5b4966e7b8907b2" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hops::MHO_Notches::fSidebandLabelKey</definition>
        <argsstring></argsstring>
        <name>fSidebandLabelKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" line="111" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhops_1_1MHO__Notches_1af89076c2cfa64da587b5a6efaa083d63" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hops::MHO_Notches::fUpperSideband</definition>
        <argsstring></argsstring>
        <name>fUpperSideband</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" line="113" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhops_1_1MHO__Notches_1acc035133f961dc7353579005aa94d77b" prot="private" static="no" mutable="no">
        <type><ref refid="namespacehops_1a74fe9c8c1d011d62f4fd08db2f915d01" kindref="member">weight_type</ref> *</type>
        <definition>weight_type* hops::MHO_Notches::fWeights</definition>
        <argsstring></argsstring>
        <name>fWeights</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" line="115" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" bodystart="115" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhops_1_1MHO__Notches_1a4cc44934dd9b029173494453552bba08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hops::MHO_Notches::MHO_Notches</definition>
        <argsstring>()</argsstring>
        <name>MHO_Notches</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" line="36" column="9" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/src/MHO_Notches.cc" bodystart="8" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__Notches_1a101392d7b193d003580e7189261991b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>hops::MHO_Notches::~MHO_Notches</definition>
        <argsstring>()</argsstring>
        <name>~MHO_Notches</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" line="37" column="17" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/src/MHO_Notches.cc" bodystart="16" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__Notches_1a8e55e851f3119852ec6fa38788256993" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hops::MHO_Notches::SetNotchBoundaries</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;notch_boundary_list)</argsstring>
        <name>SetNotchBoundaries</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>notch_boundary_list</declname>
        </param>
        <briefdescription>
<para>Setter for notch (locations along frequency axis where visibilities are zeroed out) boundaries. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notch_boundary_list</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector of double values, must come in pairs of (lower, upper) representing notch boundaries. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" line="51" column="14" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" bodystart="51" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__Notches_1a51911446d6255d4bd3c711b5c85ce38d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hops::MHO_Notches::SetWeights</definition>
        <argsstring>(weight_type *weights)</argsstring>
        <name>SetWeights</name>
        <param>
          <type><ref refid="namespacehops_1a74fe9c8c1d011d62f4fd08db2f915d01" kindref="member">weight_type</ref> *</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
<para>Setter for weights. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Input weight values of type weight_type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" line="44" column="14" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" bodystart="44" bodyend="44"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classhops_1_1MHO__Notches_1aca8bd61c4eb530e7f62efd65a0c679ae" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool hops::MHO_Notches::ExecuteInPlace</definition>
        <argsstring>(visibility_type *in) override</argsstring>
        <name>ExecuteInPlace</name>
        <reimplements refid="classhops_1_1MHO__UnaryOperator_1a198308dde4b15a2b103e615db44804f3">ExecuteInPlace</reimplements>
        <param>
          <type><ref refid="namespacehops_1afcc97dd4e78b9092817b1dbb0c561e78" kindref="member">visibility_type</ref> *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Applies filter to channels and spectral points based on defined notches. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Input visibility data containing channel axis and frequency axis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if execution is successful, false otherwise. </para>
</simplesect>
<simplesect kind="note"><para>This is a virtual function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" line="98" column="22" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/src/MHO_Notches.cc" bodystart="18" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__Notches_1acf4540e8c2c9306f1002a6f7127547b0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool hops::MHO_Notches::ExecuteOutOfPlace</definition>
        <argsstring>(const visibility_type *in, visibility_type *out) override</argsstring>
        <name>ExecuteOutOfPlace</name>
        <reimplements refid="classhops_1_1MHO__UnaryOperator_1a4c07658f7e43763056e4e116d845a6bf">ExecuteOutOfPlace</reimplements>
        <param>
          <type>const <ref refid="namespacehops_1afcc97dd4e78b9092817b1dbb0c561e78" kindref="member">visibility_type</ref> *</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespacehops_1afcc97dd4e78b9092817b1dbb0c561e78" kindref="member">visibility_type</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Copies input visibility data and executes in-place processing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Const reference to input visibility_type data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>(visibility_type*) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean result of ExecuteInPlace operation on copied output data. </para>
</simplesect>
<simplesect kind="note"><para>This is a virtual function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" line="107" column="22" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/src/MHO_Notches.cc" bodystart="102" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__Notches_1a529b2e1ac53f502ae35f85d770c393fa" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool hops::MHO_Notches::InitializeInPlace</definition>
        <argsstring>(visibility_type *in) override</argsstring>
        <name>InitializeInPlace</name>
        <reimplements refid="classhops_1_1MHO__UnaryOperator_1a02cd45309143ea2ba35a1ce42b86ad20">InitializeInPlace</reimplements>
        <param>
          <type><ref refid="namespacehops_1afcc97dd4e78b9092817b1dbb0c561e78" kindref="member">visibility_type</ref> *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Initializes <ref refid="classhops_1_1MHO__Notches" kindref="compound">MHO_Notches</ref> in-place using provided visibility_type pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to visibility_type for initialization. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if initialization is successful. </para>
</simplesect>
<simplesect kind="note"><para>This is a virtual function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" line="80" column="22" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/src/MHO_Notches.cc" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__Notches_1ae3e54e43f821a52a2ccb452e9ffb07e2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool hops::MHO_Notches::InitializeOutOfPlace</definition>
        <argsstring>(const visibility_type *in, visibility_type *out) override</argsstring>
        <name>InitializeOutOfPlace</name>
        <reimplements refid="classhops_1_1MHO__UnaryOperator_1a8ddd25cb2e815e6e3f5acbf5d0b61058">InitializeOutOfPlace</reimplements>
        <param>
          <type>const <ref refid="namespacehops_1afcc97dd4e78b9092817b1dbb0c561e78" kindref="member">visibility_type</ref> *</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespacehops_1afcc97dd4e78b9092817b1dbb0c561e78" kindref="member">visibility_type</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Initializes out-of-place visibility data from input pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Const pointer to input visibility_type data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>(visibility_type*) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean indicating successful initialization. </para>
</simplesect>
<simplesect kind="note"><para>This is a virtual function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" line="89" column="22" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/src/MHO_Notches.cc" bodystart="113" bodyend="116"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class <ref refid="classhops_1_1MHO__Notches" kindref="compound">MHO_Notches</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>operator which &apos;notches&apos; out probablatic chunks of visiblities in frequency space</para>
<para><simplesect kind="author"><para>J. Barrett - <ulink url="mailto:barrettj@mit.edu">barrettj@mit.edu</ulink> </para>
</simplesect>
<simplesect kind="date"><para>Tue Apr 2 09:41:24 AM EDT 2024 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>hops::MHO_Operator</label>
        <link refid="classhops_1_1MHO__Operator"/>
      </node>
      <node id="2">
        <label>hops::MHO_UnaryOperator&lt; visibility_type &gt;</label>
        <link refid="classhops_1_1MHO__UnaryOperator"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>hops::MHO_Notches</label>
        <link refid="classhops_1_1MHO__Notches"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>hops::MHO_Operator</label>
        <link refid="classhops_1_1MHO__Operator"/>
      </node>
      <node id="2">
        <label>hops::MHO_UnaryOperator&lt; visibility_type &gt;</label>
        <link refid="classhops_1_1MHO__UnaryOperator"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>hops::MHO_Notches</label>
        <link refid="classhops_1_1MHO__Notches"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" line="33" column="1" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_Notches.hh" bodystart="34" bodyend="119"/>
    <listofallmembers>
      <member refid="classhops_1_1MHO__UnaryOperator_1a704c4cb4154241356da3eb744ebfea74" prot="public" virt="virtual"><scope>hops::MHO_Notches</scope><name>Execute</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1a7e4f90ac93ffc15a3a120e49d3d3a37b" prot="public" virt="pure-virtual"><scope>hops::MHO_Notches</scope><name>Execute</name></member>
      <member refid="classhops_1_1MHO__Notches_1aca8bd61c4eb530e7f62efd65a0c679ae" prot="protected" virt="virtual"><scope>hops::MHO_Notches</scope><name>ExecuteInPlace</name></member>
      <member refid="classhops_1_1MHO__Notches_1acf4540e8c2c9306f1002a6f7127547b0" prot="protected" virt="virtual"><scope>hops::MHO_Notches</scope><name>ExecuteOutOfPlace</name></member>
      <member refid="classhops_1_1MHO__Notches_1a6df992fd076e205f1f2c8626b8b2c945" prot="private" virt="non-virtual"><scope>hops::MHO_Notches</scope><name>fBandwidthKey</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1aeebfd2ffd335365a3c03182cc7c9521c" prot="protected" virt="non-virtual"><scope>hops::MHO_Notches</scope><name>fInPlace</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1aea3536242de828361a2f10b879c50388" prot="protected" virt="non-virtual"><scope>hops::MHO_Notches</scope><name>fInPlaceArgs</name></member>
      <member refid="classhops_1_1MHO__Notches_1aaf93f47b18806568d6bee2ff5260b1de" prot="private" virt="non-virtual"><scope>hops::MHO_Notches</scope><name>fLowerSideband</name></member>
      <member refid="classhops_1_1MHO__Notches_1a76a0d6efed3ad4cf13d1c677b610c050" prot="private" virt="non-virtual"><scope>hops::MHO_Notches</scope><name>fNotchBoundaries</name></member>
      <member refid="classhops_1_1MHO__Notches_1af03a8e7078fc9b2e2f3dcceecde3c944" prot="private" virt="non-virtual"><scope>hops::MHO_Notches</scope><name>fNotches</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1a487fb22e2a815461fe05048439ec6c20" prot="protected" virt="non-virtual"><scope>hops::MHO_Notches</scope><name>fOutOfPlaceArgs</name></member>
      <member refid="classhops_1_1MHO__Notches_1ac3e7ebbda20f860dd5b4966e7b8907b2" prot="private" virt="non-virtual"><scope>hops::MHO_Notches</scope><name>fSidebandLabelKey</name></member>
      <member refid="classhops_1_1MHO__Notches_1af89076c2cfa64da587b5a6efaa083d63" prot="private" virt="non-virtual"><scope>hops::MHO_Notches</scope><name>fUpperSideband</name></member>
      <member refid="classhops_1_1MHO__Notches_1acc035133f961dc7353579005aa94d77b" prot="private" virt="non-virtual"><scope>hops::MHO_Notches</scope><name>fWeights</name></member>
      <member refid="classhops_1_1MHO__Operator_1ae944174d27ebc2a0978b3bad9e97cfca" prot="public" virt="non-virtual"><scope>hops::MHO_Notches</scope><name>GetName</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1aa7dbd018a8e2ab56ee718f703cd8df0e" prot="public" virt="virtual"><scope>hops::MHO_Notches</scope><name>Initialize</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1ac4e4bb8c8e69204cf7b9dd8989f4e17a" prot="public" virt="pure-virtual"><scope>hops::MHO_Notches</scope><name>Initialize</name></member>
      <member refid="classhops_1_1MHO__Notches_1a529b2e1ac53f502ae35f85d770c393fa" prot="protected" virt="virtual"><scope>hops::MHO_Notches</scope><name>InitializeInPlace</name></member>
      <member refid="classhops_1_1MHO__Notches_1ae3e54e43f821a52a2ccb452e9ffb07e2" prot="protected" virt="virtual"><scope>hops::MHO_Notches</scope><name>InitializeOutOfPlace</name></member>
      <member refid="classhops_1_1MHO__Notches_1a4cc44934dd9b029173494453552bba08" prot="public" virt="non-virtual"><scope>hops::MHO_Notches</scope><name>MHO_Notches</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1af6ccdf30e87b4a31347593d22dab2f99" prot="public" virt="non-virtual"><scope>hops::MHO_Notches</scope><name>MHO_Operator</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1a56a30a66a2fab5e8f005a3aa3f8ff796" prot="public" virt="non-virtual"><scope>hops::MHO_Notches</scope><name>MHO_UnaryOperator</name></member>
      <member refid="classhops_1_1MHO__Operator_1a42a5df950d1464de705cf1f8a98957a9" prot="public" virt="virtual"><scope>hops::MHO_Notches</scope><name>Priority</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1a272c2bda0dfa7a7a8c4de4a063fa124b" prot="public" virt="virtual"><scope>hops::MHO_Notches</scope><name>SetArgs</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1a6acead8f2593c70c45f89201bc503d39" prot="public" virt="virtual"><scope>hops::MHO_Notches</scope><name>SetArgs</name></member>
      <member refid="classhops_1_1MHO__Operator_1a258fbfb617f811155923b477066fed85" prot="public" virt="non-virtual"><scope>hops::MHO_Notches</scope><name>SetName</name></member>
      <member refid="classhops_1_1MHO__Notches_1a8e55e851f3119852ec6fa38788256993" prot="public" virt="non-virtual"><scope>hops::MHO_Notches</scope><name>SetNotchBoundaries</name></member>
      <member refid="classhops_1_1MHO__Operator_1ae336e78d21bfcdcb355bc9c057411859" prot="public" virt="virtual"><scope>hops::MHO_Notches</scope><name>SetPriority</name></member>
      <member refid="classhops_1_1MHO__Notches_1a51911446d6255d4bd3c711b5c85ce38d" prot="public" virt="non-virtual"><scope>hops::MHO_Notches</scope><name>SetWeights</name></member>
      <member refid="classhops_1_1MHO__Notches_1a101392d7b193d003580e7189261991b1" prot="public" virt="virtual"><scope>hops::MHO_Notches</scope><name>~MHO_Notches</name></member>
      <member refid="classhops_1_1MHO__Operator_1a22d862ce42973f29cb9ec79619fe6242" prot="public" virt="virtual"><scope>hops::MHO_Notches</scope><name>~MHO_Operator</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1a6a16ae57bd76c4934860582d175f4e7f" prot="public" virt="virtual"><scope>hops::MHO_Notches</scope><name>~MHO_UnaryOperator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
