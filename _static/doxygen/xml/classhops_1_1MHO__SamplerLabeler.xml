<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classhops_1_1MHO__SamplerLabeler" kind="class" language="C++" prot="public">
    <compoundname>hops::MHO_SamplerLabeler</compoundname>
    <basecompoundref refid="classhops_1_1MHO__UnaryOperator" prot="public" virt="non-virtual">hops::MHO_UnaryOperator&lt; XArrayType &gt;</basecompoundref>
    <includes refid="MHO__SamplerLabeler_8hh" local="no">MHO_SamplerLabeler.hh</includes>
    <templateparamlist>
      <param>
        <type>typename XArrayType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhops_1_1MHO__SamplerLabeler_1afae76ac77399fa7e090d2d6f72bf3520" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hops::MHO_SamplerLabeler&lt; XArrayType &gt;::fChannelLabelKey</definition>
        <argsstring></argsstring>
        <name>fChannelLabelKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" line="151" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhops_1_1MHO__SamplerLabeler_1a8b2f30acc0d2b22fd850501d931c101c" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hops::MHO_SamplerLabeler&lt; XArrayType &gt;::fComma</definition>
        <argsstring></argsstring>
        <name>fComma</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" line="150" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhops_1_1MHO__SamplerLabeler_1a8cb5ff5623a5bebf1127964cf29ebd2f" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, int &gt;</type>
        <definition>std::map&lt; std::string, int &gt; hops::MHO_SamplerLabeler&lt; XArrayType &gt;::fRefChanToSamplerID</definition>
        <argsstring></argsstring>
        <name>fRefChanToSamplerID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" line="147" column="18" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhops_1_1MHO__SamplerLabeler_1a7bbf57c475afca2f11565ad17a6472bb" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; hops::MHO_SamplerLabeler&lt; XArrayType &gt;::fRefSamplerChanSets</definition>
        <argsstring></argsstring>
        <name>fRefSamplerChanSets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" line="145" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhops_1_1MHO__SamplerLabeler_1a333831c67614f485285662003c61b575" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hops::MHO_SamplerLabeler&lt; XArrayType &gt;::fRefSamplerIndexKey</definition>
        <argsstring></argsstring>
        <name>fRefSamplerIndexKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" line="152" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhops_1_1MHO__SamplerLabeler_1a81b2991b60a16d2dbcc933579e89cfde" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, int &gt;</type>
        <definition>std::map&lt; std::string, int &gt; hops::MHO_SamplerLabeler&lt; XArrayType &gt;::fRemChanToSamplerID</definition>
        <argsstring></argsstring>
        <name>fRemChanToSamplerID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" line="148" column="18" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhops_1_1MHO__SamplerLabeler_1add9bd2764c957348f924662e433483da" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; hops::MHO_SamplerLabeler&lt; XArrayType &gt;::fRemSamplerChanSets</definition>
        <argsstring></argsstring>
        <name>fRemSamplerChanSets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" line="146" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhops_1_1MHO__SamplerLabeler_1a09f78c6fca9e63043a9a58b41cc559c0" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hops::MHO_SamplerLabeler&lt; XArrayType &gt;::fRemSamplerIndexKey</definition>
        <argsstring></argsstring>
        <name>fRemSamplerIndexKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" line="153" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhops_1_1MHO__SamplerLabeler_1ac76e5dbd2e17a3b2f19584a3f25a222b" prot="private" static="no" mutable="no">
        <type><ref refid="classhops_1_1MHO__Tokenizer" kindref="compound">MHO_Tokenizer</ref></type>
        <definition>MHO_Tokenizer hops::MHO_SamplerLabeler&lt; XArrayType &gt;::fTokenizer</definition>
        <argsstring></argsstring>
        <name>fTokenizer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" line="154" column="23" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" bodystart="154" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhops_1_1MHO__SamplerLabeler_1a84bffa68bffd9aedc39e3635203e7f6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hops::MHO_SamplerLabeler&lt; XArrayType &gt;::MHO_SamplerLabeler</definition>
        <argsstring>()</argsstring>
        <name>MHO_SamplerLabeler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" line="37" column="9" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" bodystart="37" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__SamplerLabeler_1a48c51c50a3940b8860b4137d430ef2b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual hops::MHO_SamplerLabeler&lt; XArrayType &gt;::~MHO_SamplerLabeler</definition>
        <argsstring>()</argsstring>
        <name>~MHO_SamplerLabeler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" line="45" column="17" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__SamplerLabeler_1a36860e1e6476c684c02683920d32de5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hops::MHO_SamplerLabeler&lt; XArrayType &gt;::SetReferenceStationSamplerChannelSets</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;channel_sets)</argsstring>
        <name>SetReferenceStationSamplerChannelSets</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>channel_sets</declname>
        </param>
        <briefdescription>
<para>Setter for reference station sampler channel sets. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_sets</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector of string channel set names </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" line="52" column="14" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__SamplerLabeler_1ac2380afdf13577519ddcdda9d9da0313" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hops::MHO_SamplerLabeler&lt; XArrayType &gt;::SetRemoteStationSamplerChannelSets</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;channel_sets)</argsstring>
        <name>SetRemoteStationSamplerChannelSets</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>channel_sets</declname>
        </param>
        <briefdescription>
<para>Setter for remote station sampler channel sets. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_sets</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector of strings representing channel sets </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" line="62" column="14" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" bodystart="62" bodyend="65"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classhops_1_1MHO__SamplerLabeler_1a1047dfaf9275903a968897850362f018" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool hops::MHO_SamplerLabeler&lt; XArrayType &gt;::ExecuteInPlace</definition>
        <argsstring>(XArrayType *in) override</argsstring>
        <name>ExecuteInPlace</name>
        <reimplements refid="classhops_1_1MHO__UnaryOperator_1a198308dde4b15a2b103e615db44804f3">ExecuteInPlace</reimplements>
        <param>
          <type>XArrayType *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Function ExecuteInPlace - actual implementation, map channel label (e.g. &apos;a&apos;, &apos;b&apos;, etc.) to sampler index for both reference and remote stations, and attaches label to visibility data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>(XArrayType*) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return value (bool) </para>
</simplesect>
<simplesect kind="note"><para>This is a virtual function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" line="95" column="22" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" bodystart="95" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__SamplerLabeler_1a27d976c6a5f2bac6917f994f679a3826" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool hops::MHO_SamplerLabeler&lt; XArrayType &gt;::ExecuteOutOfPlace</definition>
        <argsstring>(const XArrayType *in, XArrayType *out) override</argsstring>
        <name>ExecuteOutOfPlace</name>
        <reimplements refid="classhops_1_1MHO__UnaryOperator_1a4c07658f7e43763056e4e116d845a6bf">ExecuteOutOfPlace</reimplements>
        <param>
          <type>const XArrayType *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>XArrayType *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Copies input array and executes in-place operation on output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Const reference to input XArrayType </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to output XArrayType </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of ExecuteInPlace operation on out </para>
</simplesect>
<simplesect kind="note"><para>This is a virtual function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" line="137" column="22" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" bodystart="137" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__SamplerLabeler_1a0837feeb0c3c1d3683fa069d699881dd" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool hops::MHO_SamplerLabeler&lt; XArrayType &gt;::InitializeInPlace</definition>
        <argsstring>(XArrayType *in) override</argsstring>
        <name>InitializeInPlace</name>
        <reimplements refid="classhops_1_1MHO__UnaryOperator_1a02cd45309143ea2ba35a1ce42b86ad20">InitializeInPlace</reimplements>
        <param>
          <type>XArrayType *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Initializes in-place mapping for channel labels to sampler indices. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Input XArrayType pointer for initializing in-place. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if initialization is successful, false otherwise. </para>
</simplesect>
<simplesect kind="note"><para>This is a virtual function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" line="75" column="22" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__SamplerLabeler_1a97acd9d00fa18e7e381adfbeca94eaa0" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool hops::MHO_SamplerLabeler&lt; XArrayType &gt;::InitializeOutOfPlace</definition>
        <argsstring>(const XArrayType *, XArrayType *) override</argsstring>
        <name>InitializeOutOfPlace</name>
        <reimplements refid="classhops_1_1MHO__UnaryOperator_1a8ddd25cb2e815e6e3f5acbf5d0b61058">InitializeOutOfPlace</reimplements>
        <param>
          <type>const XArrayType *</type>
        </param>
        <param>
          <type>XArrayType *</type>
        </param>
        <briefdescription>
<para>Initializes output array in-place from input array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>!in</parametername>
</parameternamelist>
<parameterdescription>
<para>Const reference to input XArrayType </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>!out</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to output XArrayType </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean indicating success of initialization </para>
</simplesect>
<simplesect kind="note"><para>This is a virtual function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" line="85" column="22" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" bodystart="85" bodyend="85"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classhops_1_1MHO__SamplerLabeler_1a1c6e7c449975d1c10497bc787c197ac5" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hops::MHO_SamplerLabeler&lt; XArrayType &gt;::ConstructChannelToSamplerIDMap</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;chan_set, std::map&lt; std::string, int &gt; &amp;chan2id)</argsstring>
        <name>ConstructChannelToSamplerIDMap</name>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>chan_set</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, int &gt; &amp;</type>
          <declname>chan2id</declname>
        </param>
        <briefdescription>
<para>Constructs a map from channel labels to sampler IDs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan_set</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector of channel label strings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chan2id</parametername>
</parameternamelist>
<parameterdescription>
<para>Output map assigning each channel label an integer ID. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" line="162" column="14" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" bodystart="162" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classhops_1_1MHO__SamplerLabeler_1a7d30965977e77b10c8c992bc1f30765a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; hops::MHO_SamplerLabeler&lt; XArrayType &gt;::SplitChannelLabels</definition>
        <argsstring>(std::string channels)</argsstring>
        <name>SplitChannelLabels</name>
        <param>
          <type>std::string</type>
          <declname>channels</declname>
        </param>
        <briefdescription>
<para>Function SplitChannelLabels, splits the channel strings into individual channel labels. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channels</parametername>
</parameternamelist>
<parameterdescription>
<para>(std::string) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return value (std::string) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" line="182" column="21" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" bodystart="182" bodyend="207"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class <ref refid="classhops_1_1MHO__SamplerLabeler" kindref="compound">MHO_SamplerLabeler</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>When the &apos;samplers&apos; keyword is encountered, this operator loops over all channels and inserts a label for each channel which contains the sampler index associated with that channel. This can later be used to look up the station sampler delay (ambiguities) for this channel by the pcal operators e.g.: samplers 4 abcdefgh ijklmnop qrstuvwx yzABCDEF.</para>
<para><simplesect kind="author"><para>J. Barrett - <ulink url="mailto:barrettj@mit.edu">barrettj@mit.edu</ulink> </para>
</simplesect>
<simplesect kind="date"><para>Wed Dec 13 16:55:25 2023 -0500 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>hops::MHO_Operator</label>
        <link refid="classhops_1_1MHO__Operator"/>
      </node>
      <node id="2">
        <label>hops::MHO_UnaryOperator&lt; XArrayType &gt;</label>
        <link refid="classhops_1_1MHO__UnaryOperator"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>hops::MHO_SamplerLabeler&lt; XArrayType &gt;</label>
        <link refid="classhops_1_1MHO__SamplerLabeler"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>hops::MHO_Operator</label>
        <link refid="classhops_1_1MHO__Operator"/>
      </node>
      <node id="2">
        <label>hops::MHO_UnaryOperator&lt; XArrayType &gt;</label>
        <link refid="classhops_1_1MHO__UnaryOperator"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>hops::MHO_SamplerLabeler&lt; XArrayType &gt;</label>
        <link refid="classhops_1_1MHO__SamplerLabeler"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" line="34" column="13" bodyfile="/home/barrettj/work/projects/hops-git/source/cpp_src/Calibration/include/MHO_SamplerLabeler.hh" bodystart="35" bodyend="208"/>
    <listofallmembers>
      <member refid="classhops_1_1MHO__SamplerLabeler_1a1c6e7c449975d1c10497bc787c197ac5" prot="private" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>ConstructChannelToSamplerIDMap</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1a704c4cb4154241356da3eb744ebfea74" prot="public" virt="virtual"><scope>hops::MHO_SamplerLabeler</scope><name>Execute</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1a7e4f90ac93ffc15a3a120e49d3d3a37b" prot="public" virt="pure-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>Execute</name></member>
      <member refid="classhops_1_1MHO__SamplerLabeler_1a1047dfaf9275903a968897850362f018" prot="protected" virt="virtual"><scope>hops::MHO_SamplerLabeler</scope><name>ExecuteInPlace</name></member>
      <member refid="classhops_1_1MHO__SamplerLabeler_1a27d976c6a5f2bac6917f994f679a3826" prot="protected" virt="virtual"><scope>hops::MHO_SamplerLabeler</scope><name>ExecuteOutOfPlace</name></member>
      <member refid="classhops_1_1MHO__SamplerLabeler_1afae76ac77399fa7e090d2d6f72bf3520" prot="private" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>fChannelLabelKey</name></member>
      <member refid="classhops_1_1MHO__SamplerLabeler_1a8b2f30acc0d2b22fd850501d931c101c" prot="private" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>fComma</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1aeebfd2ffd335365a3c03182cc7c9521c" prot="protected" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>fInPlace</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1aea3536242de828361a2f10b879c50388" prot="protected" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>fInPlaceArgs</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1a487fb22e2a815461fe05048439ec6c20" prot="protected" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>fOutOfPlaceArgs</name></member>
      <member refid="classhops_1_1MHO__SamplerLabeler_1a8cb5ff5623a5bebf1127964cf29ebd2f" prot="private" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>fRefChanToSamplerID</name></member>
      <member refid="classhops_1_1MHO__SamplerLabeler_1a7bbf57c475afca2f11565ad17a6472bb" prot="private" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>fRefSamplerChanSets</name></member>
      <member refid="classhops_1_1MHO__SamplerLabeler_1a333831c67614f485285662003c61b575" prot="private" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>fRefSamplerIndexKey</name></member>
      <member refid="classhops_1_1MHO__SamplerLabeler_1a81b2991b60a16d2dbcc933579e89cfde" prot="private" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>fRemChanToSamplerID</name></member>
      <member refid="classhops_1_1MHO__SamplerLabeler_1add9bd2764c957348f924662e433483da" prot="private" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>fRemSamplerChanSets</name></member>
      <member refid="classhops_1_1MHO__SamplerLabeler_1a09f78c6fca9e63043a9a58b41cc559c0" prot="private" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>fRemSamplerIndexKey</name></member>
      <member refid="classhops_1_1MHO__SamplerLabeler_1ac76e5dbd2e17a3b2f19584a3f25a222b" prot="private" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>fTokenizer</name></member>
      <member refid="classhops_1_1MHO__Operator_1ae944174d27ebc2a0978b3bad9e97cfca" prot="public" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>GetName</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1aa7dbd018a8e2ab56ee718f703cd8df0e" prot="public" virt="virtual"><scope>hops::MHO_SamplerLabeler</scope><name>Initialize</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1ac4e4bb8c8e69204cf7b9dd8989f4e17a" prot="public" virt="pure-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>Initialize</name></member>
      <member refid="classhops_1_1MHO__SamplerLabeler_1a0837feeb0c3c1d3683fa069d699881dd" prot="protected" virt="virtual"><scope>hops::MHO_SamplerLabeler</scope><name>InitializeInPlace</name></member>
      <member refid="classhops_1_1MHO__SamplerLabeler_1a97acd9d00fa18e7e381adfbeca94eaa0" prot="protected" virt="virtual"><scope>hops::MHO_SamplerLabeler</scope><name>InitializeOutOfPlace</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1af6ccdf30e87b4a31347593d22dab2f99" prot="public" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>MHO_Operator</name></member>
      <member refid="classhops_1_1MHO__SamplerLabeler_1a84bffa68bffd9aedc39e3635203e7f6c" prot="public" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>MHO_SamplerLabeler</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1a56a30a66a2fab5e8f005a3aa3f8ff796" prot="public" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>MHO_UnaryOperator</name></member>
      <member refid="classhops_1_1MHO__Operator_1a42a5df950d1464de705cf1f8a98957a9" prot="public" virt="virtual"><scope>hops::MHO_SamplerLabeler</scope><name>Priority</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1a272c2bda0dfa7a7a8c4de4a063fa124b" prot="public" virt="virtual"><scope>hops::MHO_SamplerLabeler</scope><name>SetArgs</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1a6acead8f2593c70c45f89201bc503d39" prot="public" virt="virtual"><scope>hops::MHO_SamplerLabeler</scope><name>SetArgs</name></member>
      <member refid="classhops_1_1MHO__Operator_1a258fbfb617f811155923b477066fed85" prot="public" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>SetName</name></member>
      <member refid="classhops_1_1MHO__Operator_1ae336e78d21bfcdcb355bc9c057411859" prot="public" virt="virtual"><scope>hops::MHO_SamplerLabeler</scope><name>SetPriority</name></member>
      <member refid="classhops_1_1MHO__SamplerLabeler_1a36860e1e6476c684c02683920d32de5c" prot="public" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>SetReferenceStationSamplerChannelSets</name></member>
      <member refid="classhops_1_1MHO__SamplerLabeler_1ac2380afdf13577519ddcdda9d9da0313" prot="public" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>SetRemoteStationSamplerChannelSets</name></member>
      <member refid="classhops_1_1MHO__SamplerLabeler_1a7d30965977e77b10c8c992bc1f30765a" prot="private" virt="non-virtual"><scope>hops::MHO_SamplerLabeler</scope><name>SplitChannelLabels</name></member>
      <member refid="classhops_1_1MHO__Operator_1a22d862ce42973f29cb9ec79619fe6242" prot="public" virt="virtual"><scope>hops::MHO_SamplerLabeler</scope><name>~MHO_Operator</name></member>
      <member refid="classhops_1_1MHO__SamplerLabeler_1a48c51c50a3940b8860b4137d430ef2b7" prot="public" virt="virtual"><scope>hops::MHO_SamplerLabeler</scope><name>~MHO_SamplerLabeler</name></member>
      <member refid="classhops_1_1MHO__UnaryOperator_1a6a16ae57bd76c4934860582d175f4e7f" prot="public" virt="virtual"><scope>hops::MHO_SamplerLabeler</scope><name>~MHO_UnaryOperator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
